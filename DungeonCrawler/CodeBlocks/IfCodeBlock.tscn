[gd_scene load_steps=11 format=2]

[ext_resource path="res://DungeonCrawler/CodeBlocks/BaseCodeBlock.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/v1.1 dungeon crawler 16x16 pixel pack/ui (new)/if_else_code_blk.png" type="Texture" id=2]
[ext_resource path="res://DungeonCrawler/CodeBlocks/Panels/Spaces/IndentedSpaceToDropCodeBlock.tscn" type="PackedScene" id=3]
[ext_resource path="res://DungeonCrawler/CodeBlocks/IfOptionButton.tres" type="Theme" id=5]
[ext_resource path="res://Assets/Fonts/monogram/ttf/monogram-extended.ttf" type="DynamicFontData" id=6]
[ext_resource path="res://DungeonCrawler/CodeBlocks/OptionButton.gd" type="Script" id=7]

[sub_resource type="GDScript" id=4]
script/source = "extends BaseCodeBlock

export (PackedScene) var indented_space
onready var label : Label = $Label
#onready var line_edit : LineEdit = $NumberOfTimesToRepeat/LineEdit
onready var can_option_button : OptionButton = $CanOptionButton
onready var walk_direction_option_button : OptionButton = $WalkDirectionOptionButton
onready var spaces : VBoxContainer = $Spaces
signal created_new_space_in_code_block_wrapper(added_code_blk_wrapper)
signal deleted_new_space_in_code_block_wrapper(rect_min_size_to_delete)


func _ready() -> void:
	is_code_block_wrapper = true
	spaces.get_child(0).connect(\"occupied_space\", self, \"create_new_space\")
	

func create_new_space(added_code_blk_wrapper : bool) -> void:
	var new_space = indented_space.instance()
	spaces.add_child(new_space)
	new_space.connect(\"occupied_space\", self, \"create_new_space\")
	emit_signal(\"created_new_space_in_code_block_wrapper\", added_code_blk_wrapper)


func delete_space_which_discarded_block_originated(data_dict_of_discarded_block) -> void:
	print(data_dict_of_discarded_block[\"space_index\"])
	
	var index_of_space : int = data_dict_of_discarded_block[\"space_index\"][0]
	var reference_to_space_to_delete = spaces.get_child(index_of_space)
	
	if data_dict_of_discarded_block[\"space_index\"].size() > 1:
		data_dict_of_discarded_block[\"space_index\"].erase(0)
		reference_to_space_to_delete.get_occupied_code_block().delete_space_which_discarded_block_originated(data_dict_of_discarded_block)
	else:
		reference_to_space_to_delete.queue_free()	
		#var removed_code_blk_wrapper : bool = reference_to_space_to_delete.get_node(\"OccupiedCodeBlock\").get_child(0).is_code_block_wrapper
		print(reference_to_space_to_delete.rect_min_size)
		#emit_signal(\"deleted_new_space_in_code_block_wrapper\", removed_code_blk_wrapper)
		emit_signal(\"deleted_new_space_in_code_block_wrapper\", reference_to_space_to_delete.rect_min_size.y)


# For Yoke Min!!
func get_instruction():
	var instruction = []
	instruction.append(label.text)
	instruction.append(can_option_button.text)
	instruction.append(walk_direction_option_button.text)
	#instruction.append(line_edit.text) # no. of times to repeat
	
	# since repeat code blk manages it's own spaces / inner blks, 
	# need to come out with some way to read the occupied code blks in Spaces here
	var while_instruction = []
#	for space in spaces.get_children():
#		if space.is_occupied():
#			var occupied_code_block : BaseCodeBlock = space.get_occupied_code_block()
#			if occupied_code_block.get_name() == \"Repeat\":
#				var repeat_instructions = []
#				repeat_instructions = occupied_code_block.get_instruction()
#				while_instruction.append(repeat_instructions)
#			elif occupied_code_block.get_name() == \"While\":
#				var while_instructions = []
#				while_instructions = occupied_code_block.get_instruction()
#				while_instruction.append(while_instructions)
#
#			print(\"[\" + occupied_code_block.get_name() + \"]\")
#			while_instruction.append(occupied_code_block.get_instruction())
	
	instruction.append(while_instruction)
	print(instruction)
	return instruction


# yoke min, you will need this function to read the instructions of the code blks within this repeat code blk
func get_reference_to_occupied_code_block_based_on_space_index(space_index : int) -> Node:
	return spaces.get_child(space_index).get_child(1)
"

[sub_resource type="ImageTexture" id=7]

[sub_resource type="DynamicFont" id=2]
size = 10
font_data = ExtResource( 6 )

[sub_resource type="ImageTexture" id=3]

[node name="IfCodeBlock" instance=ExtResource( 1 )]
margin_right = 44.0
rect_min_size = Vector2( 44, 10 )
texture = ExtResource( 2 )
patch_margin_left = 22
patch_margin_right = 22
script = SubResource( 4 )
indented_space = ExtResource( 3 )

[node name="Label" parent="." index="0"]
text = "If"

[node name="CanOptionButton" type="OptionButton" parent="." index="1"]
margin_left = 7.0
margin_top = 2.0
margin_right = 44.0
margin_bottom = 20.0
rect_min_size = Vector2( 37, 18 )
rect_scale = Vector2( 0.5, 0.5 )
focus_mode = 0
theme = ExtResource( 5 )
custom_icons/arrow = SubResource( 7 )
custom_fonts/font = SubResource( 2 )
text = "Can't"
flat = true
items = [ "Can", null, false, 0, null, "Can't", null, false, 1, null ]
selected = 1
script = ExtResource( 7 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="WalkDirectionOptionButton" type="OptionButton" parent="." index="2"]
margin_left = 19.1623
margin_top = 2.16573
margin_right = 76.1623
margin_bottom = 20.1657
rect_min_size = Vector2( 57, 18 )
rect_scale = Vector2( 0.5, 0.5 )
focus_mode = 0
theme = ExtResource( 5 )
custom_icons/arrow = SubResource( 3 )
custom_fonts/font = SubResource( 2 )
text = "Walk Right"
flat = true
items = [ "Walk Up", null, false, 0, null, "Walk Down", null, false, 1, null, "Walk Left", null, false, 2, null, "Walk Right", null, false, 3, null ]
selected = 3
script = ExtResource( 7 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Spaces" type="VBoxContainer" parent="." index="3"]
margin_left = 5.0
margin_top = 14.0
margin_right = 55.0
margin_bottom = 24.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="IndentedSpaceToDropCodeBlock" parent="Spaces" index="0" instance=ExtResource( 3 )]
