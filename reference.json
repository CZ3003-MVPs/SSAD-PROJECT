{
  "name": "SSAD PROJECT",
  "description": "",
  "version": "n/a",
  "classes": [
    {
      "name": "FirebaseAuth",
      "path": "res://addons/godot-firebase/auth/auth.gd",
      "extends_class": [
        "HTTPRequest"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseAuth",
      "description": "# @meta-authors TODO\n# @meta-version 2.5\n# The authentication API for Firebase.\n# Documentation TODO.\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "_API_VERSION",
          "value": "v1",
          "data_type": "String",
          "signature": "const _API_VERSION: String = \"v1\"",
          "description": ""
        },
        {
          "name": "Requests",
          "value": {
            "NONE": -1,
            "EXCHANGE_TOKEN": 0,
            "LOGIN_WITH_OAUTH": 1
          },
          "data_type": "Dictionary",
          "signature": "const Requests: Dictionary = {\"EXCHANGE_TOKEN\":0,\"LOGIN_WITH_OAUTH\":1,\"NONE\":-1}",
          "description": ""
        },
        {
          "name": "RESPONSE_ASSERTION",
          "value": "identitytoolkit#VerifyAssertionResponse",
          "data_type": "String",
          "signature": "const RESPONSE_ASSERTION: String = \"identitytoolkit#VerifyAssertionResponse\"",
          "description": "VerifyAssertionResponse\"\n"
        },
        {
          "name": "RESPONSE_USERDATA",
          "value": "identitytoolkit#GetAccountInfoResponse",
          "data_type": "String",
          "signature": "const RESPONSE_USERDATA: String = \"identitytoolkit#GetAccountInfoResponse\"",
          "description": "GetAccountInfoResponse\"\n"
        },
        {
          "name": "RESPONSE_SIGNIN",
          "value": "identitytoolkit#VerifyPasswordResponse",
          "data_type": "String",
          "signature": "const RESPONSE_SIGNIN: String = \"identitytoolkit#VerifyPasswordResponse\"",
          "description": "VerifyPasswordResponse\"\n"
        },
        {
          "name": "RESPONSE_SIGNUP",
          "value": "identitytoolkit#SignupNewUserResponse",
          "data_type": "String",
          "signature": "const RESPONSE_SIGNUP: String = \"identitytoolkit#SignupNewUserResponse\"",
          "description": "SignupNewUserResponse\"\n"
        },
        {
          "name": "RESPONSE_CUSTOM_TOKEN",
          "value": "identitytoolkit#VerifyCustomTokenResponse",
          "data_type": "String",
          "signature": "const RESPONSE_CUSTOM_TOKEN: String = \"identitytoolkit#VerifyCustomTokenResponse\"",
          "description": "VerifyCustomTokenResponse\"\n"
        },
        {
          "name": "Auth_Type",
          "value": {
            "NONE": -1,
            "LOGIN_EP": 0,
            "LOGIN_ANON": 1,
            "LOGIN_CT": 2,
            "LOGIN_OAUTH": 3,
            "SIGNUP_EP": 4
          },
          "data_type": "Dictionary",
          "signature": "const Auth_Type: Dictionary = {\"LOGIN_ANON\":1,\"LOGIN_CT\":2,\"LOGIN_EP\":0,\"LOGIN_OAUTH\":3,\"NONE\":-1,\"SIGNUP_EP\":4}",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_base_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _base_url: String = \"\"",
          "description": ""
        },
        {
          "name": "_signup_request_url",
          "data_type": "String",
          "default_value": "accounts:signUp?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _signup_request_url: String = \"accounts:signUp?key=%s\"",
          "description": ""
        },
        {
          "name": "_signin_with_oauth_request_url",
          "data_type": "String",
          "default_value": "accounts:signInWithIdp?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _signin_with_oauth_request_url: String = \"accounts:signInWithIdp?key=%s\"",
          "description": ""
        },
        {
          "name": "_signin_request_url",
          "data_type": "String",
          "default_value": "accounts:signInWithPassword?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _signin_request_url: String = \"accounts:signInWithPassword?key=%s\"",
          "description": ""
        },
        {
          "name": "_signin_custom_token_url",
          "data_type": "String",
          "default_value": "accounts:signInWithCustomToken?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _signin_custom_token_url: String = \"accounts:signInWithCustomToken?key=%s\"",
          "description": ""
        },
        {
          "name": "_userdata_request_url",
          "data_type": "String",
          "default_value": "accounts:lookup?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _userdata_request_url: String = \"accounts:lookup?key=%s\"",
          "description": ""
        },
        {
          "name": "_oobcode_request_url",
          "data_type": "String",
          "default_value": "accounts:sendOobCode?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _oobcode_request_url: String = \"accounts:sendOobCode?key=%s\"",
          "description": ""
        },
        {
          "name": "_delete_account_request_url",
          "data_type": "String",
          "default_value": "accounts:delete?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _delete_account_request_url: String = \"accounts:delete?key=%s\"",
          "description": ""
        },
        {
          "name": "_update_account_request_url",
          "data_type": "String",
          "default_value": "accounts:update?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _update_account_request_url: String = \"accounts:update?key=%s\"",
          "description": ""
        },
        {
          "name": "_refresh_request_url",
          "data_type": "String",
          "default_value": "https://securetoken.googleapis.com/v1/token?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _refresh_request_url: String = \"https://securetoken.googleapis.com/v1/token?key=%s\"",
          "description": ""
        },
        {
          "name": "_google_auth_request_url",
          "data_type": "String",
          "default_value": "https://accounts.google.com/o/oauth2/v2/auth?",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _google_auth_request_url: String = \"https://accounts.google.com/o/oauth2/v2/auth?\"",
          "description": ""
        },
        {
          "name": "_google_token_request_url",
          "data_type": "String",
          "default_value": "https://oauth2.googleapis.com/token?",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _google_token_request_url: String = \"https://oauth2.googleapis.com/token?\"",
          "description": ""
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": ""
        },
        {
          "name": "auth",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var auth: Dictionary",
          "description": ""
        },
        {
          "name": "_needs_refresh",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _needs_refresh: bool = false",
          "description": ""
        },
        {
          "name": "is_busy",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_busy: bool = false",
          "description": ""
        },
        {
          "name": "tcp_server",
          "data_type": "TCP_Server",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var tcp_server: TCP_Server",
          "description": ""
        },
        {
          "name": "tcp_timer",
          "data_type": "Timer",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var tcp_timer: Timer",
          "description": ""
        },
        {
          "name": "tcp_timeout",
          "data_type": "float",
          "default_value": 0.5,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var tcp_timeout: float = 0.5",
          "description": ""
        },
        {
          "name": "_headers",
          "data_type": "PoolStringArray",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _headers: PoolStringArray",
          "description": ""
        },
        {
          "name": "requesting",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var requesting: int = -1",
          "description": ""
        },
        {
          "name": "auth_request_type",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var auth_request_type: int = -1",
          "description": ""
        },
        {
          "name": "_login_request_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _login_request_body: Dictionary",
          "description": ""
        },
        {
          "name": "_post_body",
          "data_type": "String",
          "default_value": "id_token=[GOOGLE_ID_TOKEN]&providerId=[PROVIDER_ID]",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _post_body: String = \"id_token=[GOOGLE_ID_TOKEN]&providerId=[PROVIDER_ID]\"",
          "description": ""
        },
        {
          "name": "_request_uri",
          "data_type": "String",
          "default_value": "[REQUEST_URI]",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _request_uri: String = \"[REQUEST_URI]\"",
          "description": ""
        },
        {
          "name": "_oauth_login_request_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _oauth_login_request_body: Dictionary",
          "description": ""
        },
        {
          "name": "_anonymous_login_request_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _anonymous_login_request_body: Dictionary",
          "description": ""
        },
        {
          "name": "_refresh_request_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _refresh_request_body: Dictionary",
          "description": ""
        },
        {
          "name": "_custom_token_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _custom_token_body: Dictionary",
          "description": ""
        },
        {
          "name": "_password_reset_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _password_reset_body: Dictionary",
          "description": ""
        },
        {
          "name": "_change_email_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _change_email_body: Dictionary",
          "description": ""
        },
        {
          "name": "_change_password_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _change_password_body: Dictionary",
          "description": ""
        },
        {
          "name": "_account_verification_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _account_verification_body: Dictionary",
          "description": ""
        },
        {
          "name": "_update_profile_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _update_profile_body: Dictionary",
          "description": ""
        },
        {
          "name": "_google_auth_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _google_auth_body: Dictionary",
          "description": ""
        },
        {
          "name": "_google_token_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _google_token_body: Dictionary",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "auth_request",
          "arguments": [
            "result_code",
            "result_content"
          ],
          "signature": "signal auth_request(result_code, result_content)",
          "description": " Emitted for each Auth request issued.\n `result_code` -> Either `1` if auth succeeded or `error_code` if unsuccessful auth request\n `result_content` -> Either `auth_result` if auth succeeded or `error_message` if unsuccessful auth request\n"
        },
        {
          "name": "signup_succeeded",
          "arguments": [
            "auth_result"
          ],
          "signature": "signal signup_succeeded(auth_result)",
          "description": ""
        },
        {
          "name": "login_succeeded",
          "arguments": [
            "auth_result"
          ],
          "signature": "signal login_succeeded(auth_result)",
          "description": ""
        },
        {
          "name": "login_failed",
          "arguments": [
            "code",
            "message"
          ],
          "signature": "signal login_failed(code, message)",
          "description": ""
        },
        {
          "name": "signup_failed",
          "arguments": [
            "code",
            "message"
          ],
          "signature": "signal signup_failed(code, message)",
          "description": ""
        },
        {
          "name": "userdata_received",
          "arguments": [
            "userdata"
          ],
          "signature": "signal userdata_received(userdata)",
          "description": ""
        },
        {
          "name": "token_exchanged",
          "arguments": [
            "successful"
          ],
          "signature": "signal token_exchanged(successful)",
          "description": ""
        },
        {
          "name": "token_refresh_succeeded",
          "arguments": [
            "auth_result"
          ],
          "signature": "signal token_refresh_succeeded(auth_result)",
          "description": ""
        },
        {
          "name": "logged_out",
          "arguments": [

          ],
          "signature": "signal logged_out()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_set_config",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _set_config(config_json: Dictionary) -> null",
          "description": " Sets the configuration needed for the plugin to talk to Firebase\n These settings come from the Firebase.gd script automatically\n",
          "arguments": [
            {
              "name": "config_json",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_check_emulating",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_emulating() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_is_ready",
          "return_type": "bool",
          "rpc_mode": 0,
          "signature": "func _is_ready() -> bool",
          "description": " Function is used to check if the auth script is ready to process a request. Returns true if it is not currently processing\n If false it will print an error\n",
          "arguments": [

          ]
        },
        {
          "name": "is_logged_in",
          "return_type": "bool",
          "rpc_mode": 0,
          "signature": "func is_logged_in() -> bool",
          "description": " Synchronous call to check if any user is already logged in.\n",
          "arguments": [

          ]
        },
        {
          "name": "signup_with_email_and_password",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func signup_with_email_and_password(email: String, password: String) -> null",
          "description": " Called with Firebase.Auth.signup_with_email_and_password(email, password)\n You must pass in the email and password to this function for it to work correctly\n",
          "arguments": [
            {
              "name": "email",
              "type": "String"
            },
            {
              "name": "password",
              "type": "String"
            }
          ]
        },
        {
          "name": "login_anonymous",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func login_anonymous() -> null",
          "description": " Called with Firebase.Auth.anonymous_login()\n A successful request is indicated by a 200 OK HTTP status code. \n The response contains the Firebase ID token and refresh token associated with the anonymous user.\n The 'mail' field will be empty since no email is linked to an anonymous user\n",
          "arguments": [

          ]
        },
        {
          "name": "login_with_email_and_password",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func login_with_email_and_password(email: String, password: String) -> null",
          "description": " Called with Firebase.Auth.login_with_email_and_password(email, password)\n You must pass in the email and password to this function for it to work correctly\n If the login fails it will return an error code through the function _on_FirebaseAuth_request_completed\n",
          "arguments": [
            {
              "name": "email",
              "type": "String"
            },
            {
              "name": "password",
              "type": "String"
            }
          ]
        },
        {
          "name": "login_with_custom_token",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func login_with_custom_token(token: String) -> null",
          "description": " Login with a custom valid token\n The token needs to be generated using an external service/function\n",
          "arguments": [
            {
              "name": "token",
              "type": "String"
            }
          ]
        },
        {
          "name": "get_google_auth",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func get_google_auth(redirect_uri: String = \"urn:ietf:wg:oauth:2.0:oob\", client_id: String) -> null",
          "description": " Open a web page in browser redirecting to Google oAuth2 page for the current project\n Once given user's authorization, a token will be generated.\n NOTE** with this method, the authorization process will be copy-pasted\n",
          "arguments": [
            {
              "name": "redirect_uri",
              "type": "String",
              "default_value": "urn:ietf:wg:oauth:2.0:oob"
            },
            {
              "name": "client_id",
              "type": "String"
            }
          ]
        },
        {
          "name": "get_google_auth_manual",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func get_google_auth_manual() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "exchange_google_token",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func exchange_google_token(google_token: String, redirect_uri: String = \"urn:ietf:wg:oauth:2.0:oob\") -> null",
          "description": " Exchange the authorization oAuth2 code obtained from browser with a proper access id_token\n",
          "arguments": [
            {
              "name": "google_token",
              "type": "String"
            },
            {
              "name": "redirect_uri",
              "type": "String",
              "default_value": "urn:ietf:wg:oauth:2.0:oob"
            }
          ]
        },
        {
          "name": "get_google_auth_redirect",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_google_auth_redirect(redirect_uri: String, listen_to_port: int) -> var",
          "description": "",
          "arguments": [
            {
              "name": "redirect_uri",
              "type": "String"
            },
            {
              "name": "listen_to_port",
              "type": "int"
            }
          ]
        },
        {
          "name": "get_google_auth_localhost",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_google_auth_localhost(port: int = 49152)",
          "description": " Open a web page in browser redirecting to Google oAuth2 page for the current project\n Once given user's authorization, a token will be generated.\n NOTE** the generated token will be automatically captured and a login request will be made if the token is correct\n",
          "arguments": [
            {
              "name": "port",
              "type": "int",
              "default_value": 49152
            }
          ]
        },
        {
          "name": "_tcp_stream_timer",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _tcp_stream_timer() -> null",
          "description": " A timer used to listen through TCP on the redirect uri of the request\n",
          "arguments": [

          ]
        },
        {
          "name": "login_with_oauth",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func login_with_oauth(_google_token: String, request_uri: String = \"urn:ietf:wg:oauth:2.0:oob\", provider_id: String = \"google.com\") -> var",
          "description": " Login with Google oAuth2.\n A token is automatically obtained using an authorization code using @get_google_auth()\n @provider_id and @request_uri can be changed\n",
          "arguments": [
            {
              "name": "_google_token",
              "type": "String"
            },
            {
              "name": "request_uri",
              "type": "String",
              "default_value": "urn:ietf:wg:oauth:2.0:oob"
            },
            {
              "name": "provider_id",
              "type": "String",
              "default_value": "google.com"
            }
          ]
        },
        {
          "name": "_exchange_google_token",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _exchange_google_token(google_token: String, redirect_uri: String = \"urn:ietf:wg:oauth:2.0:oob\") -> null",
          "description": " Exchange the authorization oAuth2 code obtained from browser with a proper access id_token\n",
          "arguments": [
            {
              "name": "google_token",
              "type": "String"
            },
            {
              "name": "redirect_uri",
              "type": "String",
              "default_value": "urn:ietf:wg:oauth:2.0:oob"
            }
          ]
        },
        {
          "name": "logout",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func logout() -> null",
          "description": " Function used to logout of the system, this will also remove the local encrypted auth file if there is one\n",
          "arguments": [

          ]
        },
        {
          "name": "manual_token_refresh",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func manual_token_refresh(auth_data)",
          "description": " Function is called when requesting a manual token refresh\n",
          "arguments": [
            {
              "name": "auth_data",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_request_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_request_completed(result: int, response_code: int, headers: PoolStringArray, body: PoolByteArray) -> null",
          "description": " This function is called whenever there is an authentication request to Firebase\n On an error, this function with emit the signal 'login_failed' and print the error to the console\n",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "response_code",
              "type": "int"
            },
            {
              "name": "headers",
              "type": "PoolStringArray"
            },
            {
              "name": "body",
              "type": "PoolByteArray"
            }
          ]
        },
        {
          "name": "save_auth",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func save_auth(auth: Dictionary) -> null",
          "description": " Function used to save the auth data provided by Firebase into an encrypted file\n Note this does not work in HTML5 or UWP\n",
          "arguments": [
            {
              "name": "auth",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "load_auth",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func load_auth() -> null",
          "description": " Function used to load the auth data file that has been stored locally\n Note this does not work in HTML5 or UWP\n",
          "arguments": [

          ]
        },
        {
          "name": "remove_auth",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func remove_auth() -> null",
          "description": " Function used to remove the local encrypted auth file\n",
          "arguments": [

          ]
        },
        {
          "name": "check_auth_file",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func check_auth_file() -> null",
          "description": " Function to check if there is an encrypted auth data file\n If there is, the game will load it and refresh the token\n",
          "arguments": [

          ]
        },
        {
          "name": "change_user_email",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func change_user_email(email: String) -> null",
          "description": " Function used to change the email account for the currently logged in user\n",
          "arguments": [
            {
              "name": "email",
              "type": "String"
            }
          ]
        },
        {
          "name": "change_user_password",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func change_user_password(password: String) -> null",
          "description": " Function used to change the password for the currently logged in user\n",
          "arguments": [
            {
              "name": "password",
              "type": "String"
            }
          ]
        },
        {
          "name": "update_account",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func update_account(idToken: String, displayName: String, photoUrl: String, deleteAttribute: PoolStringArray, returnSecureToken: bool) -> null",
          "description": " User Profile handlers \n",
          "arguments": [
            {
              "name": "idToken",
              "type": "String"
            },
            {
              "name": "displayName",
              "type": "String"
            },
            {
              "name": "photoUrl",
              "type": "String"
            },
            {
              "name": "deleteAttribute",
              "type": "PoolStringArray"
            },
            {
              "name": "returnSecureToken",
              "type": "bool"
            }
          ]
        },
        {
          "name": "send_account_verification_email",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func send_account_verification_email() -> null",
          "description": " Function to send a account verification email\n",
          "arguments": [

          ]
        },
        {
          "name": "send_password_reset_email",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func send_password_reset_email(email: String) -> null",
          "description": " Function used to reset the password for a user who has forgotten in.\n This will send the users account an email with a password reset link\n",
          "arguments": [
            {
              "name": "email",
              "type": "String"
            }
          ]
        },
        {
          "name": "get_user_data",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func get_user_data() -> null",
          "description": " Function called to get all\n",
          "arguments": [

          ]
        },
        {
          "name": "delete_user_account",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func delete_user_account() -> null",
          "description": " Function used to delete the account of the currently authenticated user\n",
          "arguments": [

          ]
        },
        {
          "name": "begin_refresh_countdown",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func begin_refresh_countdown() -> var",
          "description": " Function is called when a new token is issued to a user. The function will yield until the token has expired, and then request a new one.\n",
          "arguments": [

          ]
        },
        {
          "name": "get_clean_keys",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func get_clean_keys(auth_result: Dictionary) -> Dictionary",
          "description": " This function is used to make all keys lowercase\n This is only used to cut down on processing errors from Firebase\n This is due to Google have inconsistencies in the API that we are trying to fix\n",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirebaseUserData",
      "path": "res://addons/godot-firebase/auth/user_data.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseUserData",
      "description": "# @meta-authors TODO\r\n# @meta-version 2.3\r\n# Authentication user data.\r\n# Documentation TODO.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "local_id",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var local_id: String = \"\"",
          "description": " The uid of the current user.\n"
        },
        {
          "name": "email",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var email: String = \"\"",
          "description": ""
        },
        {
          "name": "email_verified",
          "data_type": "bool",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var email_verified: bool",
          "description": " Whether or not the account's email has been verified.\n"
        },
        {
          "name": "password_updated_at",
          "data_type": "float",
          "default_value": 0,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var password_updated_at: float = 0",
          "description": " The timestamp, in milliseconds, that the account password was last changed.\n"
        },
        {
          "name": "last_login_at",
          "data_type": "float",
          "default_value": 0,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var last_login_at: float = 0",
          "description": " The timestamp, in milliseconds, that the account last logged in at.\n"
        },
        {
          "name": "created_at",
          "data_type": "float",
          "default_value": 0,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var created_at: float = 0",
          "description": " The timestamp, in milliseconds, that the account was created at.\n"
        },
        {
          "name": "provider_user_info",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var provider_user_info: Array",
          "description": ""
        },
        {
          "name": "provider_id",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var provider_id: String = \"\"",
          "description": ""
        },
        {
          "name": "display_name",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var display_name: String = \"\"",
          "description": ""
        },
        {
          "name": "photo_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var photo_url: String = \"\"",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(p_userdata: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "p_userdata",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "as_text",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func as_text() -> String",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirebaseDatabase",
      "path": "res://addons/godot-firebase/database/database.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseDatabase",
      "description": "# @meta-authors TODO\n# @meta-version 2.2\n# The Realtime Database API for Firebase.\n# Documentation TODO.\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_base_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _base_url: String = \"\"",
          "description": ""
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": ""
        },
        {
          "name": "_auth",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _auth: Dictionary",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_set_config",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _set_config(config_json: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "config_json",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_check_emulating",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_emulating() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_FirebaseAuth_login_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_login_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_token_refresh_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_token_refresh_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_logout",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_logout() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_database_reference",
          "return_type": "FirebaseDatabaseReference",
          "rpc_mode": 0,
          "signature": "func get_database_reference(path: String, filter: Dictionary) -> FirebaseDatabaseReference",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "filter",
              "type": "Dictionary"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirebaseDatabaseStore",
      "path": "res://addons/godot-firebase/database/database_store.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseDatabaseStore",
      "description": "# @meta-authors TODO\r\n# @meta-version 2.2\r\n# Data structure that holds the currently-known data at a given path (a.k.a. reference) in a Firebase Realtime Database.\r\n# Can process both puts and patches into the data based on realtime events received from the service.\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "_DELIMITER",
          "value": "/",
          "data_type": "String",
          "signature": "const _DELIMITER: String = \"/\"",
          "description": ""
        },
        {
          "name": "_ROOT",
          "value": "_root",
          "data_type": "String",
          "signature": "const _ROOT: String = \"_root\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "debug",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var debug: bool = false",
          "description": "# @default false\r\n# Whether the store is in debug mode.\r\n"
        },
        {
          "name": "_data",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _data: Dictionary",
          "description": "# @default false\r\n# Whether the store is in debug mode.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "put",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func put(path: String, payload) -> null",
          "description": "# @args path, payload\r\n# Puts a new payload into this data store at the given path. Any existing values in this data store\r\n# at the specified path will be completely erased.\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "payload",
              "type": "var"
            }
          ]
        },
        {
          "name": "patch",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func patch(path: String, payload) -> null",
          "description": "# @args path, payload\r\n# Patches an update payload into this data store at the specified path.\r\n# NOTE: When patching in updates to arrays, payload should contain the entire new array! Updating single elements/indexes of an array is not supported. Sometimes when manually mutating array data directly from the Firebase Realtime Database console, single-element patches will be sent out which can cause issues here.\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "payload",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_data",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func get_data() -> Dictionary",
          "description": "# Returns a deep copy of this data store's payload.\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_update_data",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _update_data(path: String, payload, patch: bool) -> null",
          "description": "\r\n Updates this data store by either putting or patching the provided payload into it at the given\r\n path. The provided payload can technically be any value.\r\n\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "payload",
              "type": "var"
            },
            {
              "name": "patch",
              "type": "bool"
            }
          ]
        },
        {
          "name": "_update_dictionary",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _update_dictionary(original_dict: Dictionary, update_payload: Dictionary) -> null",
          "description": "\r\n Helper method to \"blit\" changes in an update dictionary payload onto an original dictionary.\r\n Parameters are directly changed via reference.\r\n\r\n",
          "arguments": [
            {
              "name": "original_dict",
              "type": "Dictionary"
            },
            {
              "name": "update_payload",
              "type": "Dictionary"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirebaseDatabaseReference",
      "path": "res://addons/godot-firebase/database/reference.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseDatabaseReference",
      "description": "# @meta-authors TODO\n# @meta-version 2.3\n# A reference to a location in the Realtime Database.\n# Documentation TODO.\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "ORDER_BY",
          "value": "orderBy",
          "data_type": "String",
          "signature": "const ORDER_BY: String = \"orderBy\"",
          "description": ""
        },
        {
          "name": "LIMIT_TO_FIRST",
          "value": "limitToFirst",
          "data_type": "String",
          "signature": "const LIMIT_TO_FIRST: String = \"limitToFirst\"",
          "description": ""
        },
        {
          "name": "LIMIT_TO_LAST",
          "value": "limitToLast",
          "data_type": "String",
          "signature": "const LIMIT_TO_LAST: String = \"limitToLast\"",
          "description": ""
        },
        {
          "name": "START_AT",
          "value": "startAt",
          "data_type": "String",
          "signature": "const START_AT: String = \"startAt\"",
          "description": ""
        },
        {
          "name": "EQUAL_TO",
          "value": "equalTo",
          "data_type": "String",
          "signature": "const EQUAL_TO: String = \"equalTo\"",
          "description": ""
        },
        {
          "name": "END_AT",
          "value": "endAt",
          "data_type": "String",
          "signature": "const END_AT: String = \"endAt\"",
          "description": ""
        },
        {
          "name": "_put_tag",
          "value": "put",
          "data_type": "String",
          "signature": "const _put_tag: String = \"put\"",
          "description": ""
        },
        {
          "name": "_patch_tag",
          "value": "patch",
          "data_type": "String",
          "signature": "const _patch_tag: String = \"patch\"",
          "description": ""
        },
        {
          "name": "_separator",
          "value": "/",
          "data_type": "String",
          "signature": "const _separator: String = \"/\"",
          "description": ""
        },
        {
          "name": "_json_list_tag",
          "value": ".json",
          "data_type": "String",
          "signature": "const _json_list_tag: String = \".json\"",
          "description": ""
        },
        {
          "name": "_query_tag",
          "value": "?",
          "data_type": "String",
          "signature": "const _query_tag: String = \"?\"",
          "description": ""
        },
        {
          "name": "_auth_variable_end",
          "value": "]",
          "data_type": "String",
          "signature": "const _auth_variable_end: String = \"]\"",
          "description": ""
        },
        {
          "name": "_auth_variable_begin",
          "value": "[",
          "data_type": "String",
          "signature": "const _auth_variable_begin: String = \"[\"",
          "description": ""
        },
        {
          "name": "_key_filter_tag",
          "value": "$key",
          "data_type": "String",
          "signature": "const _key_filter_tag: String = \"$key\"",
          "description": ""
        },
        {
          "name": "_filter_tag",
          "value": "&",
          "data_type": "String",
          "signature": "const _filter_tag: String = \"&\"",
          "description": ""
        },
        {
          "name": "_equal_tag",
          "value": "=",
          "data_type": "String",
          "signature": "const _equal_tag: String = \"=\"",
          "description": ""
        },
        {
          "name": "_accept_header",
          "value": "accept: text/event-stream",
          "data_type": "String",
          "signature": "const _accept_header: String = \"accept: text/event-stream\"",
          "description": ""
        },
        {
          "name": "_auth_tag",
          "value": "auth=",
          "data_type": "String",
          "signature": "const _auth_tag: String = \"auth=\"",
          "description": ""
        },
        {
          "name": "_escaped_quote",
          "value": "\"",
          "data_type": "String",
          "signature": "const _escaped_quote: String = \"\\\"\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_pusher",
          "data_type": "HTTPRequest",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _pusher: HTTPRequest",
          "description": ""
        },
        {
          "name": "_listener",
          "data_type": "Node",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _listener: Node",
          "description": ""
        },
        {
          "name": "_store",
          "data_type": "FirebaseDatabaseStore",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _store: FirebaseDatabaseStore",
          "description": ""
        },
        {
          "name": "_auth",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _auth: Dictionary",
          "description": ""
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": ""
        },
        {
          "name": "_filter_query",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _filter_query: Dictionary",
          "description": ""
        },
        {
          "name": "_db_path",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _db_path: String",
          "description": ""
        },
        {
          "name": "_cached_filter",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _cached_filter: String",
          "description": ""
        },
        {
          "name": "_push_queue",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _push_queue: Array",
          "description": ""
        },
        {
          "name": "_can_connect_to_host",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _can_connect_to_host: bool = false",
          "description": ""
        },
        {
          "name": "_headers",
          "data_type": "PoolStringArray",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _headers: PoolStringArray",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "new_data_update",
          "arguments": [
            "data"
          ],
          "signature": "signal new_data_update(data)",
          "description": ""
        },
        {
          "name": "patch_data_update",
          "arguments": [
            "data"
          ],
          "signature": "signal patch_data_update(data)",
          "description": ""
        },
        {
          "name": "push_successful",
          "arguments": [

          ],
          "signature": "signal push_successful()",
          "description": ""
        },
        {
          "name": "push_failed",
          "arguments": [

          ],
          "signature": "signal push_failed()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "set_db_path",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_db_path(path: String, filter_query_dict: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "filter_query_dict",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "set_auth_and_config",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_auth_and_config(auth_ref: Dictionary, config_ref: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_ref",
              "type": "Dictionary"
            },
            {
              "name": "config_ref",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "set_pusher",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_pusher(pusher_ref: HTTPRequest) -> null",
          "description": "",
          "arguments": [
            {
              "name": "pusher_ref",
              "type": "HTTPRequest"
            }
          ]
        },
        {
          "name": "set_listener",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_listener(listener_ref: Node) -> null",
          "description": "",
          "arguments": [
            {
              "name": "listener_ref",
              "type": "Node"
            }
          ]
        },
        {
          "name": "on_new_sse_event",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func on_new_sse_event(headers: Dictionary, event: String, data: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "headers",
              "type": "Dictionary"
            },
            {
              "name": "event",
              "type": "String"
            },
            {
              "name": "data",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "set_store",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_store(store_ref: FirebaseDatabaseStore) -> null",
          "description": "",
          "arguments": [
            {
              "name": "store_ref",
              "type": "FirebaseDatabaseStore"
            }
          ]
        },
        {
          "name": "update",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func update(path: String, data: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "data",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "push",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func push(data: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "data",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "get_data",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func get_data() -> Dictionary",
          "description": "\n Returns a deep copy of the current local copy of the data stored at this reference in the Firebase\n Realtime Database.\n\n",
          "arguments": [

          ]
        },
        {
          "name": "_get_remaining_path",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _get_remaining_path(is_push: bool = true) -> String",
          "description": "",
          "arguments": [
            {
              "name": "is_push",
              "type": "bool",
              "default_value": true
            }
          ]
        },
        {
          "name": "_get_list_url",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _get_list_url() -> String",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_get_filter",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_filter()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_route_data",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _route_data(command: String, path: String, data) -> null",
          "description": "\n Appropriately updates the current local copy of the data stored at this reference in the Firebase\n Realtime Database.\n\n",
          "arguments": [
            {
              "name": "command",
              "type": "String"
            },
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "on_push_request_complete",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func on_push_request_complete(result: int, response_code: int, headers: PoolStringArray, body: PoolByteArray) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "response_code",
              "type": "int"
            },
            {
              "name": "headers",
              "type": "PoolStringArray"
            },
            {
              "name": "body",
              "type": "PoolByteArray"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirebaseResource",
      "path": "res://addons/godot-firebase/database/resource.gd",
      "extends_class": [
        "Resource"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseResource",
      "description": "# @meta-authors SIsilicon, fenix-hub\r\n# @meta-version 2.2\r\n# A generic resource used by Firebase Database.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "key",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var key: String",
          "description": ""
        },
        {
          "name": "data",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var data",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(key: String, data) -> null",
          "description": "",
          "arguments": [
            {
              "name": "key",
              "type": "String"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "_to_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _to_string()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirebaseDynamicLinks",
      "path": "res://addons/godot-firebase/dynamiclinks/dynamiclinks.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseDynamicLinks",
      "description": "# @meta-authors TODO\r\n# @meta-authors TODO\r\n# @meta-version 1.1\r\n# The dynamic links API for Firebase\r\n# Documentation TODO.\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "_API_VERSION",
          "value": "v1",
          "data_type": "String",
          "signature": "const _API_VERSION: String = \"v1\"",
          "description": ""
        },
        {
          "name": "_AUTHORIZATION_HEADER",
          "value": "Authorization: Bearer ",
          "data_type": "String",
          "signature": "const _AUTHORIZATION_HEADER: String = \"Authorization: Bearer \"",
          "description": ""
        },
        {
          "name": "Requests",
          "value": {
            "NONE": -1,
            "GENERATE": 0
          },
          "data_type": "Dictionary",
          "signature": "const Requests: Dictionary = {\"GENERATE\":0,\"NONE\":-1}",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "request",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var request: int = -1",
          "description": ""
        },
        {
          "name": "_base_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _base_url: String = \"\"",
          "description": ""
        },
        {
          "name": "_dynamic_link_request_url",
          "data_type": "String",
          "default_value": "shortLinks?key=%s",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _dynamic_link_request_url: String = \"shortLinks?key=%s\"",
          "description": ""
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": ""
        },
        {
          "name": "_auth",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _auth: Dictionary",
          "description": ""
        },
        {
          "name": "_request_list_node",
          "data_type": "HTTPRequest",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _request_list_node: HTTPRequest",
          "description": ""
        },
        {
          "name": "_headers",
          "data_type": "PoolStringArray",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _headers: PoolStringArray",
          "description": ""
        },
        {
          "name": "_link_request_body",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _link_request_body: Dictionary",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "dynamic_link_generated",
          "arguments": [
            "link_result"
          ],
          "signature": "signal dynamic_link_generated(link_result)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_set_config",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _set_config(config_json: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "config_json",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_check_emulating",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_emulating() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "generate_dynamic_link",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func generate_dynamic_link(long_link: String, APN: String, IBI: String, is_unguessable: bool) -> null",
          "description": "# @args log_link, APN, IBI, is_unguessable\r\n# This function is used to generate a dynamic link using the Firebase REST API\r\n# It will return a JSON with the shortened link\r\n",
          "arguments": [
            {
              "name": "long_link",
              "type": "String"
            },
            {
              "name": "APN",
              "type": "String"
            },
            {
              "name": "IBI",
              "type": "String"
            },
            {
              "name": "is_unguessable",
              "type": "bool"
            }
          ]
        },
        {
          "name": "_on_request_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_request_completed(result: int, response_code: int, headers: PoolStringArray, body: PoolByteArray) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "response_code",
              "type": "int"
            },
            {
              "name": "headers",
              "type": "PoolStringArray"
            },
            {
              "name": "body",
              "type": "PoolByteArray"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_login_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_login_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_token_refresh_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_token_refresh_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_logout",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_logout() -> null",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "firebase.gd",
      "path": "res://addons/godot-firebase/firebase/firebase.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class firebase.gd",
      "description": "# @meta-authors Kyle Szklenski\n# @meta-version 2.5\n# The Firebase Godot API.\n# This singleton gives you access to your Firebase project and its capabilities. Using this requires you to fill out some Firebase configuration settings. It currently comes with four modules.\n# \t- [code]Auth[/code]: Manages user authentication (logging and out, etc...)\n# \t- [code]Database[/code]: A NonSQL realtime database for managing data in JSON structures.\n# \t- [code]Firestore[/code]: Similar to Database, but stores data in collections and documents, among other things.\n# \t- [code]Storage[/code]: Gives access to Cloud Storage; perfect for storing files like images and other assets.\n# \n# @tutorial https://github.com/GodotNuts/GodotFirebase/wiki\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "_EMULATORS_PORTS",
          "value": "firebase/emulators/ports",
          "data_type": "String",
          "signature": "const _EMULATORS_PORTS: String = \"firebase/emulators/ports\"",
          "description": ""
        },
        {
          "name": "_ENVIRONMENT_VARIABLES",
          "value": "firebase/environment_variables",
          "data_type": "String",
          "signature": "const _ENVIRONMENT_VARIABLES: String = \"firebase/environment_variables\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "Auth",
          "data_type": "FirebaseAuth",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Auth: FirebaseAuth",
          "description": "# @type FirebaseAuth\n# The Firebase Authentication API.\n"
        },
        {
          "name": "Firestore",
          "data_type": "FirebaseFirestore",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Firestore: FirebaseFirestore",
          "description": "# @type FirebaseFirestore\n# The Firebase Firestore API.\n"
        },
        {
          "name": "Database",
          "data_type": "FirebaseDatabase",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Database: FirebaseDatabase",
          "description": "# @type FirebaseDatabase\n# The Firebase Realtime Database API.\n"
        },
        {
          "name": "Storage",
          "data_type": "FirebaseStorage",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Storage: FirebaseStorage",
          "description": "# @type FirebaseStorage\n# The Firebase Storage API.\n"
        },
        {
          "name": "DynamicLinks",
          "data_type": "FirebaseDynamicLinks",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var DynamicLinks: FirebaseDynamicLinks",
          "description": "# @type FirebaseDynamicLinks\n# The Firebase Dynamic Links API.\n"
        },
        {
          "name": "Functions",
          "data_type": "FirebaseFunctions",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Functions: FirebaseFunctions",
          "description": "# @type FirebaseFunctions\n# The Firebase Cloud Functions API\n"
        },
        {
          "name": "emulating",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var emulating: bool = false",
          "description": ""
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": " Configuration used by all files in this project\n These values can be found in your Firebase Project\n See the README on Github for how to access\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_emulated",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_emulated(emulating: bool = true) -> null",
          "description": "",
          "arguments": [
            {
              "name": "emulating",
              "type": "bool",
              "default_value": true
            }
          ]
        },
        {
          "name": "_check_emulating",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_emulating() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_load_config",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _load_config() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_setup_modules",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _setup_modules() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_printerr",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _printerr(error: String) -> null",
          "description": " -------------\n",
          "arguments": [
            {
              "name": "error",
              "type": "String"
            }
          ]
        },
        {
          "name": "_print",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _print(msg: String) -> null",
          "description": "",
          "arguments": [
            {
              "name": "msg",
              "type": "String"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirebaseFirestore",
      "path": "res://addons/godot-firebase/firestore/firestore.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseFirestore",
      "description": "# @meta-authors Nicolò 'fenix' Santilio,\r\n# @meta-version 2.5\r\n#\r\n# Referenced by [code]Firebase.Firestore[/code]. Represents the Firestore module.\r\n# Cloud Firestore is a flexible, scalable database for mobile, web, and server development from Firebase and Google Cloud. \r\n# Like Firebase Realtime Database, it keeps your data in sync across client apps through realtime listeners and offers offline support for mobile and web so you can build responsive apps that work regardless of network latency or Internet connectivity. Cloud Firestore also offers seamless integration with other Firebase and Google Cloud products, including Cloud Functions.\r\n#\r\n# Following Cloud Firestore's NoSQL data model, you store data in [b]documents[/b] that contain fields mapping to values. These documents are stored in [b]collections[/b], which are containers for your documents that you can use to organize your data and build queries. \r\n# Documents support many different data types, from simple strings and numbers, to complex, nested objects. You can also create subcollections within documents and build hierarchical data structures that scale as your database grows.\r\n# The Cloud Firestore data model supports whatever data structure works best for your app.\r\n#\r\n# (source: [url=https://firebase.google.com/docs/firestore]Firestore[/url])\r\n#\r\n# @tutorial https://github.com/GodotNuts/GodotFirebase/wiki/Firestore\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "_API_VERSION",
          "value": "v1",
          "data_type": "String",
          "signature": "const _API_VERSION: String = \"v1\"",
          "description": ""
        },
        {
          "name": "CACHE_SIZE_UNLIMITED",
          "value": -1,
          "data_type": "int",
          "signature": "const CACHE_SIZE_UNLIMITED: int = -1",
          "description": " TODO: Implement cache size limit\r\n"
        },
        {
          "name": "_CACHE_RECORD_FILE",
          "value": "RmlyZXN0b3JlIGNhY2hlLXJlY29yZHMu.fscache",
          "data_type": "String",
          "signature": "const _CACHE_RECORD_FILE: String = \"RmlyZXN0b3JlIGNhY2hlLXJlY29yZHMu.fscache\"",
          "description": ""
        },
        {
          "name": "_CACHE_EXTENSION",
          "value": ".fscache",
          "data_type": "String",
          "signature": "const _CACHE_EXTENSION: String = \".fscache\"",
          "description": ""
        },
        {
          "name": "_AUTHORIZATION_HEADER",
          "value": "Authorization: Bearer ",
          "data_type": "String",
          "signature": "const _AUTHORIZATION_HEADER: String = \"Authorization: Bearer \"",
          "description": ""
        },
        {
          "name": "_MAX_POOLED_REQUEST_AGE",
          "value": 30,
          "data_type": "int",
          "signature": "const _MAX_POOLED_REQUEST_AGE: int = 30",
          "description": ""
        },
        {
          "name": "Requests",
          "value": {
            "NONE": -1,
            "LIST": 0,
            "QUERY": 1
          },
          "data_type": "Dictionary",
          "signature": "const Requests: Dictionary = {\"LIST\":0,\"NONE\":-1,\"QUERY\":1}",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "request",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var request: int = -1",
          "description": "# The code indicating the request Firestore is processing.\r\n# See @[enum FirebaseFirestore.Requests] to get a full list of codes identifiers.\r\n# @enum Requests\r\n"
        },
        {
          "name": "persistence_enabled",
          "data_type": "bool",
          "default_value": true,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var persistence_enabled: bool = true",
          "description": "# Whether cache files can be used and generated.\r\n# @default true\r\n"
        },
        {
          "name": "networking",
          "data_type": "bool",
          "default_value": true,
          "setter": "set_networking",
          "getter": "",
          "export": false,
          "signature": "var networking: bool = true",
          "description": "# Whether an internet connection can be used.\r\n# @default true\r\n"
        },
        {
          "name": "collections",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var collections: Dictionary",
          "description": "# A Dictionary containing all collections currently referenced.\r\n# @type Dictionary\r\n"
        },
        {
          "name": "auth",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var auth: Dictionary",
          "description": "# A Dictionary containing all authentication fields for the current logged user.\r\n# @type Dictionary\r\n"
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": ""
        },
        {
          "name": "_cache_loc",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _cache_loc: String",
          "description": ""
        },
        {
          "name": "_encrypt_key",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _encrypt_key: String",
          "description": ""
        },
        {
          "name": "_base_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _base_url: String = \"\"",
          "description": ""
        },
        {
          "name": "_extended_url",
          "data_type": "String",
          "default_value": "projects/[PROJECT_ID]/databases/(default)/documents/",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _extended_url: String = \"projects/[PROJECT_ID]/databases/(default)/documents/\"",
          "description": ""
        },
        {
          "name": "_query_suffix",
          "data_type": "String",
          "default_value": ":runQuery",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _query_suffix: String = \":runQuery\"",
          "description": ""
        },
        {
          "name": "_request_list_node",
          "data_type": "HTTPRequest",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _request_list_node: HTTPRequest",
          "description": "var _connect_check_node : HTTPRequest\r\n"
        },
        {
          "name": "_requests_queue",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _requests_queue: Array",
          "description": ""
        },
        {
          "name": "_current_query",
          "data_type": "FirestoreQuery",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _current_query: FirestoreQuery",
          "description": ""
        },
        {
          "name": "_http_request_pool",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _http_request_pool: Array",
          "description": ""
        },
        {
          "name": "_offline",
          "data_type": "bool",
          "default_value": false,
          "setter": "_set_offline",
          "getter": "",
          "export": false,
          "signature": "var _offline: bool = false",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "listed_documents",
          "arguments": [
            "documents"
          ],
          "signature": "signal listed_documents(documents)",
          "description": "# Emitted when a  [code]list()[/code] request is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n"
        },
        {
          "name": "result_query",
          "arguments": [
            "result"
          ],
          "signature": "signal result_query(result)",
          "description": "# Emitted when a  [code]list()[/code] request is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a  [code]query()[/code] request is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n"
        },
        {
          "name": "task_error",
          "arguments": [
            "code",
            "status",
            "message"
          ],
          "signature": "signal task_error(code, status, message)",
          "description": "# Emitted when a  [code]list()[/code] request is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a  [code]query()[/code] request is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a  [code]query()[/code] request is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a [code]list()[/code] or [code]query()[/code] request is [b]not[/b] successfully completed.\r\n"
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_process",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _process(delta: float) -> null",
          "description": "",
          "arguments": [
            {
              "name": "delta",
              "type": "float"
            }
          ]
        },
        {
          "name": "collection",
          "return_type": "FirestoreCollection",
          "rpc_mode": 0,
          "signature": "func collection(path: String) -> FirestoreCollection",
          "description": "# Returns a reference collection by its [i]path[/i].\r\n# \r\n# The returned object will be of [code]FirestoreCollection[/code] type.\r\n# If saved into a variable, it can be used to issue requests on the collection itself.\r\n# @args path\r\n# @return FirestoreCollection\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            }
          ]
        },
        {
          "name": "query",
          "return_type": "FirestoreTask",
          "rpc_mode": 0,
          "signature": "func query(query: FirestoreQuery) -> FirestoreTask",
          "description": "# Issue a query on your Firestore database.\r\n# \r\n# [b]Note:[/b] a [code]FirestoreQuery[/code] object needs to be created to issue the query.\r\n# This method will return a [code]FirestoreTask[/code] object, representing a reference to the request issued.\r\n# If saved into a variable, the [code]FirestoreTask[/code] object can be used to yield on the [code]result_query(result)[/code] signal, or the more generic [code]task_finished(result)[/code] signal.\r\n# \r\n# ex. \r\n# [code]var query_task : FirestoreTask = Firebase.Firestore.query(FirestoreQuery.new())[/code]\r\n# [code]yield(query_task, \"task_finished\")[/code]\r\n# Since the emitted signal is holding an argument, it can be directly retrieved as a return variable from the [code]yield()[/code] function.\r\n# \r\n# ex.\r\n# [code]var result : Array = yield(query_task, \"task_finished\")[/code]\r\n# \r\n# [b]Warning:[/b] It currently does not work offline!\r\n#\r\n# @args query\r\n# @arg-types FirestoreQuery\r\n# @return FirestoreTask\r\n",
          "arguments": [
            {
              "name": "query",
              "type": "FirestoreQuery"
            }
          ]
        },
        {
          "name": "list",
          "return_type": "FirestoreTask",
          "rpc_mode": 0,
          "signature": "func list(path: String = \"\", page_size: int = 0, page_token: String = \"\", order_by: String = \"\") -> FirestoreTask",
          "description": "# Request a list of contents (documents and/or collections) inside a collection, specified by its [i]id[/i]. This method will return a [code]FirestoreTask[/code] object, representing a reference to the request issued. If saved into a variable, the [code]FirestoreTask[/code] object can be used to yield on the [code]result_query(result)[/code] signal, or the more generic [code]task_finished(result)[/code] signal.\r\n# [b]Note:[/b] [code]order_by[/code] does not work in offline mode.\r\n# ex. \r\n# [code]var query_task : FirestoreTask = Firebase.Firestore.query(FirestoreQuery.new())[/code]\r\n# [code]yield(query_task, \"task_finished\")[/code]\r\n# Since the emitted signal is holding an argument, it can be directly retrieved as a return variable from the [code]yield()[/code] function.\r\n# \r\n# ex.\r\n# [code]var result : Array = yield(query_task, \"task_finished\")[/code]\r\n# \r\n# @args collection_id, page_size, page_token, order_by\r\n# @arg-types String, int, String, String\r\n# @arg-defaults , 0, \"\", \"\"\r\n# @return FirestoreTask\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "name": "page_size",
              "type": "int",
              "default_value": 0
            },
            {
              "name": "page_token",
              "type": "String",
              "default_value": ""
            },
            {
              "name": "order_by",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_networking",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_networking(value: bool) -> null",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "bool"
            }
          ]
        },
        {
          "name": "enable_networking",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func enable_networking() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "disable_networking",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func disable_networking() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_set_offline",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _set_offline(value: bool) -> null",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "bool"
            }
          ]
        },
        {
          "name": "_set_config",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _set_config(config_json: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "config_json",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_check_emulating",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_emulating() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_pooled_request",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _pooled_request(task: FirestoreTask) -> var",
          "description": "",
          "arguments": [
            {
              "name": "task",
              "type": "FirestoreTask"
            }
          ]
        },
        {
          "name": "_on_listed_documents",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_listed_documents(listed_documents: Array)",
          "description": "",
          "arguments": [
            {
              "name": "listed_documents",
              "type": "Array"
            }
          ]
        },
        {
          "name": "_on_result_query",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_result_query(result: Array)",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "Array"
            }
          ]
        },
        {
          "name": "_on_task_error",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_task_error(code: int, status: String, message: String)",
          "description": "",
          "arguments": [
            {
              "name": "code",
              "type": "int"
            },
            {
              "name": "status",
              "type": "String"
            },
            {
              "name": "message",
              "type": "String"
            }
          ]
        },
        {
          "name": "_on_task_list_error",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_task_list_error(code: int, status: String, message: String)",
          "description": "",
          "arguments": [
            {
              "name": "code",
              "type": "int"
            },
            {
              "name": "status",
              "type": "String"
            },
            {
              "name": "message",
              "type": "String"
            }
          ]
        },
        {
          "name": "_on_task_query_error",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_task_query_error(code: int, status: String, message: String)",
          "description": "",
          "arguments": [
            {
              "name": "code",
              "type": "int"
            },
            {
              "name": "status",
              "type": "String"
            },
            {
              "name": "message",
              "type": "String"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_login_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_login_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_token_refresh_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_token_refresh_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_pooled_request_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_pooled_request_completed(result: int, response_code: int, headers: PoolStringArray, body: PoolByteArray, request: HTTPRequest) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "response_code",
              "type": "int"
            },
            {
              "name": "headers",
              "type": "PoolStringArray"
            },
            {
              "name": "body",
              "type": "PoolByteArray"
            },
            {
              "name": "request",
              "type": "HTTPRequest"
            }
          ]
        },
        {
          "name": "_on_connect_check_request_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_connect_check_request_completed(result: int, _response_code, _headers, _body) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "_response_code",
              "type": "var"
            },
            {
              "name": "_headers",
              "type": "var"
            },
            {
              "name": "_body",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_logout",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_logout() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_check_auth_error",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_auth_error(code: int, message: String) -> null",
          "description": "",
          "arguments": [
            {
              "name": "code",
              "type": "int"
            },
            {
              "name": "message",
              "type": "String"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirestoreCollection",
      "path": "res://addons/godot-firebase/firestore/firestore_collection.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirestoreCollection",
      "description": "# @meta-authors TODO\r\n# @meta-authors TODO\r\n# @meta-version 2.3\r\n# A reference to a Firestore Collection.\r\n# Documentation TODO.\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "_separator",
          "value": "/",
          "data_type": "String",
          "signature": "const _separator: String = \"/\"",
          "description": ""
        },
        {
          "name": "_query_tag",
          "value": "?",
          "data_type": "String",
          "signature": "const _query_tag: String = \"?\"",
          "description": ""
        },
        {
          "name": "_AUTHORIZATION_HEADER",
          "value": "Authorization: Bearer ",
          "data_type": "String",
          "signature": "const _AUTHORIZATION_HEADER: String = \"Authorization: Bearer \"",
          "description": ""
        },
        {
          "name": "_documentId_tag",
          "value": "documentId=",
          "data_type": "String",
          "signature": "const _documentId_tag: String = \"documentId=\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "auth",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var auth: Dictionary",
          "description": ""
        },
        {
          "name": "collection_name",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var collection_name: String",
          "description": ""
        },
        {
          "name": "firestore",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var firestore",
          "description": " FirebaseFirestore (can't static type due to cyclic reference)\n"
        },
        {
          "name": "_base_url",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _base_url: String",
          "description": ""
        },
        {
          "name": "_extended_url",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _extended_url: String",
          "description": ""
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": ""
        },
        {
          "name": "_documents",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _documents: Dictionary",
          "description": ""
        },
        {
          "name": "_request_queues",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _request_queues: Dictionary",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "add_document",
          "arguments": [
            "doc"
          ],
          "signature": "signal add_document(doc)",
          "description": ""
        },
        {
          "name": "get_document",
          "arguments": [
            "doc"
          ],
          "signature": "signal get_document(doc)",
          "description": ""
        },
        {
          "name": "update_document",
          "arguments": [
            "doc"
          ],
          "signature": "signal update_document(doc)",
          "description": ""
        },
        {
          "name": "delete_document",
          "arguments": [

          ],
          "signature": "signal delete_document()",
          "description": ""
        },
        {
          "name": "error",
          "arguments": [
            "code",
            "status",
            "message"
          ],
          "signature": "signal error(code, status, message)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "get",
          "return_type": "FirestoreTask",
          "rpc_mode": 0,
          "signature": "func get(document_id: String) -> FirestoreTask",
          "description": " ----------------------- Requests\r\n# @args document_id\r\n# @return FirestoreTask\r\n# used to GET a document from the collection, specify @document_id\r\n",
          "arguments": [
            {
              "name": "document_id",
              "type": "String"
            }
          ]
        },
        {
          "name": "add",
          "return_type": "FirestoreTask",
          "rpc_mode": 0,
          "signature": "func add(document_id: String, fields: Dictionary) -> FirestoreTask",
          "description": "# @args document_id, fields\r\n# @arg-defaults , {}\r\n# @return FirestoreTask\r\n# used to SAVE/ADD a new document to the collection, specify @documentID and @fields\r\n",
          "arguments": [
            {
              "name": "document_id",
              "type": "String"
            },
            {
              "name": "fields",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "update",
          "return_type": "FirestoreTask",
          "rpc_mode": 0,
          "signature": "func update(document_id: String, fields: Dictionary) -> FirestoreTask",
          "description": "# @args document_id, fields\r\n# @arg-defaults , {}\r\n# @return FirestoreTask\r\n used to UPDATE a document, specify @documentID and @fields\r\n",
          "arguments": [
            {
              "name": "document_id",
              "type": "String"
            },
            {
              "name": "fields",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "delete",
          "return_type": "FirestoreTask",
          "rpc_mode": 0,
          "signature": "func delete(document_id: String) -> FirestoreTask",
          "description": "# @args document_id\r\n# @return FirestoreTask\r\n used to DELETE a document, specify @document_id\r\n",
          "arguments": [
            {
              "name": "document_id",
              "type": "String"
            }
          ]
        },
        {
          "name": "_get_request_url",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _get_request_url() -> String",
          "description": " ----------------- Functions\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_process_request",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _process_request(task: FirestoreTask, document_id: String, url: String, fields: String = \"\") -> var",
          "description": "",
          "arguments": [
            {
              "name": "task",
              "type": "FirestoreTask"
            },
            {
              "name": "document_id",
              "type": "String"
            },
            {
              "name": "url",
              "type": "String"
            },
            {
              "name": "fields",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_on_task_finished",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_task_finished(_arg, document_id: String) -> null",
          "description": "",
          "arguments": [
            {
              "name": "_arg",
              "type": "var"
            },
            {
              "name": "document_id",
              "type": "String"
            }
          ]
        },
        {
          "name": "_on_get_document",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_get_document(document: FirestoreDocument)",
          "description": " -------------------- Higher level of communication with signals\r\n",
          "arguments": [
            {
              "name": "document",
              "type": "FirestoreDocument"
            }
          ]
        },
        {
          "name": "_on_add_document",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_add_document(document: FirestoreDocument)",
          "description": "",
          "arguments": [
            {
              "name": "document",
              "type": "FirestoreDocument"
            }
          ]
        },
        {
          "name": "_on_update_document",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_update_document(document: FirestoreDocument)",
          "description": "",
          "arguments": [
            {
              "name": "document",
              "type": "FirestoreDocument"
            }
          ]
        },
        {
          "name": "_on_delete_document",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_delete_document()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_error",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_error(code, status, message)",
          "description": "",
          "arguments": [
            {
              "name": "code",
              "type": "var"
            },
            {
              "name": "status",
              "type": "var"
            },
            {
              "name": "message",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirestoreDocument",
      "path": "res://addons/godot-firebase/firestore/firestore_document.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirestoreDocument",
      "description": "# @meta-authors TODO\r\n# @meta-version 2.2\r\n# A reference to a Firestore Document.\r\n# Documentation TODO.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "document",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var document: Dictionary",
          "description": " A FirestoreDocument objects that holds all important values for a Firestore Document,\r\n @doc_name = name of the Firestore Document, which is the request PATH\r\n @doc_fields = fields held by Firestore Document, in APIs format\r\n created when requested from a `collection().get()` call\r\n the Document itself\n"
        },
        {
          "name": "doc_fields",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var doc_fields: Dictionary",
          "description": " only .fields\n"
        },
        {
          "name": "doc_name",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var doc_name: String",
          "description": " only .name\n"
        },
        {
          "name": "create_time",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var create_time: String",
          "description": " createTime\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(doc: Dictionary, _doc_name: String = \"\", _doc_fields: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "doc",
              "type": "Dictionary"
            },
            {
              "name": "_doc_name",
              "type": "String",
              "default_value": ""
            },
            {
              "name": "_doc_fields",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": " Call print(document) to return directly this document formatted\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [
        {
          "name": "dict2fields",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func dict2fields(dict: Dictionary) -> Dictionary",
          "description": " Pass a dictionary { 'key' : 'value' } to format it in a APIs usable .fields \r\n",
          "arguments": [
            {
              "name": "dict",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "fields2dict",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func fields2dict(doc: Dictionary) -> Dictionary",
          "description": " Pass the .fields inside a Firestore Document to print out the Dictionary { 'key' : 'value' }\r\n",
          "arguments": [
            {
              "name": "doc",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "array2fields",
          "return_type": "Array",
          "rpc_mode": 0,
          "signature": "func array2fields(array: Array) -> Array",
          "description": " Pass an Array to parse it to a Firebase arrayValue\r\n",
          "arguments": [
            {
              "name": "array",
              "type": "Array"
            }
          ]
        },
        {
          "name": "fields2array",
          "return_type": "Array",
          "rpc_mode": 0,
          "signature": "func fields2array(array: Dictionary) -> Array",
          "description": " Pass a Firebase arrayValue Dictionary to convert it back to an Array\r\n",
          "arguments": [
            {
              "name": "array",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "dict2timestamp",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func dict2timestamp(dict: Dictionary) -> String",
          "description": " Converts a gdscript Dictionary (most likely obtained with OS.get_datetime()) to a Firebase Timestamp\r\n",
          "arguments": [
            {
              "name": "dict",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "timestamp2dict",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func timestamp2dict(timestamp: String) -> Dictionary",
          "description": " Converts a Firebase Timestamp back to a gdscript Dictionary\r\n",
          "arguments": [
            {
              "name": "timestamp",
              "type": "String"
            }
          ]
        },
        {
          "name": "is_field_timestamp",
          "return_type": "bool",
          "rpc_mode": 0,
          "signature": "func is_field_timestamp(field: Dictionary) -> bool",
          "description": "",
          "arguments": [
            {
              "name": "field",
              "type": "Dictionary"
            }
          ]
        }
      ]
    },
    {
      "name": "FirestoreQuery",
      "path": "res://addons/godot-firebase/firestore/firestore_query.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirestoreQuery",
      "description": "# @meta-authors Nicoló 'fenix' Santilio\r\n# @meta-version 1.3\r\n# A firestore query.\r\n# Documentation TODO.\r\n",
      "sub_classes": [
        {
          "name": "Order",
          "path": "res://addons/godot-firebase/firestore/firestore_query.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class Order",
          "description": "",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "obj",
              "data_type": "Dictionary",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var obj: Dictionary",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [

          ],
          "static_functions": [

          ]
        },
        {
          "name": "Cursor",
          "path": "res://addons/godot-firebase/firestore/firestore_query.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class Cursor",
          "description": "",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "values",
              "data_type": "Array",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var values: Array",
              "description": ""
            },
            {
              "name": "before",
              "data_type": "bool",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var before: bool",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init(v: Array, b: bool)",
              "description": "",
              "arguments": [
                {
                  "name": "v",
                  "type": "Array"
                },
                {
                  "name": "b",
                  "type": "bool"
                }
              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [
        {
          "name": "TEMPLATE_QUERY",
          "value": {
            "select": {

            },
            "from": [

            ],
            "where": {

            },
            "orderBy": [

            ],
            "startAt": {

            },
            "endAt": {

            },
            "offset": 0,
            "limit": 0
          },
          "data_type": "Dictionary",
          "signature": "const TEMPLATE_QUERY: Dictionary = {\"endAt\":{},\"from\":[],\"limit\":0,\"offset\":0,\"orderBy\":[],\"select\":{},\"startAt\":{},\"where\":{}}",
          "description": ""
        },
        {
          "name": "DIRECTION",
          "value": {
            "DIRECTION_UNSPECIFIED": 0,
            "ASCENDING": 1,
            "DESCENDING": 2
          },
          "data_type": "Dictionary",
          "signature": "const DIRECTION: Dictionary = {\"ASCENDING\":1,\"DESCENDING\":2,\"DIRECTION_UNSPECIFIED\":0}",
          "description": ""
        },
        {
          "name": "OPERATOR",
          "value": {
            "OPERATOR_NSPECIFIED": 0,
            "LESS_THAN": 1,
            "LESS_THAN_OR_EQUAL": 2,
            "GREATER_THAN": 3,
            "GREATER_THAN_OR_EQUAL": 4,
            "EQUAL": 5,
            "NOT_EQUAL": 6,
            "ARRAY_CONTAINS": 7,
            "ARRAY_CONTAINS_ANY": 8,
            "IN": 9,
            "NOT_IN": 10,
            "IS_NAN": 11,
            "IS_NULL": 12,
            "IS_NOT_NAN": 13,
            "IS_NOT_NULL": 14,
            "AND": 15,
            "OR": 16
          },
          "data_type": "Dictionary",
          "signature": "const OPERATOR: Dictionary = {\"AND\":15,\"ARRAY_CONTAINS\":7,\"ARRAY_CONTAINS_ANY\":8,\"EQUAL\":5,\"GREATER_THAN\":3,\"GREATER_THAN_OR_EQUAL\":4,\"IN\":9,\"IS_NAN\":11,\"IS_NOT_NAN\":13,\"IS_NOT_NULL\":14,\"IS_NULL\":12,\"LESS_THAN\":1,\"LESS_THAN_OR_EQUAL\":2,\"NOT_EQUAL\":6,\"NOT_IN\":10,\"OPERATOR_NSPECIFIED\":0,\"OR\":16}",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "query",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var query: Dictionary",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "query_result",
          "arguments": [
            "query_result"
          ],
          "signature": "signal query_result(query_result)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "select",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func select(fields) -> FirestoreQuery",
          "description": " Select which fields you want to return as a reflection from your query.\r\n Fields must be added inside a list. Only a field is accepted inside the list\r\n Leave the Array empty if you want to return the whole document\r\n",
          "arguments": [
            {
              "name": "fields",
              "type": "var"
            }
          ]
        },
        {
          "name": "from",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func from(collection_id: String, all_descendants: bool = true) -> FirestoreQuery",
          "description": " Select the collection you want to return the query result from\r\n if @all_descendants also sub-collections will be returned. If false, only documents will be returned\r\n",
          "arguments": [
            {
              "name": "collection_id",
              "type": "String"
            },
            {
              "name": "all_descendants",
              "type": "bool",
              "default_value": true
            }
          ]
        },
        {
          "name": "from_many",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func from_many(collections_array: Array) -> FirestoreQuery",
          "description": " @collections_array MUST be an Array of Arrays with this structure\r\n [ [\"collection_id\", true/false] ]\r\n",
          "arguments": [
            {
              "name": "collections_array",
              "type": "Array"
            }
          ]
        },
        {
          "name": "where",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func where(field: String, operator: int, value = null, chain: int = -1)",
          "description": " Query the value of a field you want to match\r\n @field : the name of the field\r\n @operator : from FirestoreQuery.OPERATOR\r\n @value : can be any type - String, int, bool, float\r\n @chain : from FirestoreQuery.OPERATOR.[OR/AND], use it only if you want to chain \"AND\" or \"OR\" logic with futher where_field() calls\r\n eg. .where_field(\"name\", OPERATOR.EQUAL, \"Matt\", OPERATOR.AND).where_field(\"age\", OPERATOR.LESS_THAN, 20)\r\n",
          "arguments": [
            {
              "name": "field",
              "type": "String"
            },
            {
              "name": "operator",
              "type": "int"
            },
            {
              "name": "value",
              "type": "var",
              "default_value": null
            },
            {
              "name": "chain",
              "type": "int",
              "default_value": -1
            }
          ]
        },
        {
          "name": "order_by",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func order_by(field: String, direction: int) -> FirestoreQuery",
          "description": " Order by a field, defining its name and the order direction\r\n default directoin = Ascending\r\n",
          "arguments": [
            {
              "name": "field",
              "type": "String"
            },
            {
              "name": "direction",
              "type": "int"
            }
          ]
        },
        {
          "name": "order_by_fields",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func order_by_fields(order_field_list: Array) -> FirestoreQuery",
          "description": " Order by a set of fields and directions\r\n @order_list is an Array of Arrays with the following structure\r\n [@field_name , @DIRECTION.[direction]]\r\n else, order_object() can be called to return an already parsed Dictionary\r\n",
          "arguments": [
            {
              "name": "order_field_list",
              "type": "Array"
            }
          ]
        },
        {
          "name": "start_at",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func start_at(value, before: bool) -> FirestoreQuery",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            },
            {
              "name": "before",
              "type": "bool"
            }
          ]
        },
        {
          "name": "end_at",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func end_at(value, before: bool) -> FirestoreQuery",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            },
            {
              "name": "before",
              "type": "bool"
            }
          ]
        },
        {
          "name": "offset",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func offset(offset: int) -> FirestoreQuery",
          "description": "",
          "arguments": [
            {
              "name": "offset",
              "type": "int"
            }
          ]
        },
        {
          "name": "limit",
          "return_type": "FirestoreQuery",
          "rpc_mode": 0,
          "signature": "func limit(limit: int) -> FirestoreQuery",
          "description": "",
          "arguments": [
            {
              "name": "limit",
              "type": "int"
            }
          ]
        },
        {
          "name": "create_field_filter",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func create_field_filter(field: String, operator: int, value) -> Dictionary",
          "description": "",
          "arguments": [
            {
              "name": "field",
              "type": "String"
            },
            {
              "name": "operator",
              "type": "int"
            },
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "create_unary_filter",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func create_unary_filter(field: String, operator: int) -> Dictionary",
          "description": "",
          "arguments": [
            {
              "name": "field",
              "type": "String"
            },
            {
              "name": "operator",
              "type": "int"
            }
          ]
        },
        {
          "name": "create_composite_filter",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func create_composite_filter(operator: int, filters: Array) -> Dictionary",
          "description": "",
          "arguments": [
            {
              "name": "operator",
              "type": "int"
            },
            {
              "name": "filters",
              "type": "Array"
            }
          ]
        },
        {
          "name": "clean",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func clean() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [
        {
          "name": "_cursor_object",
          "return_type": "Cursor",
          "rpc_mode": 0,
          "signature": "func _cursor_object(value, before: bool) -> Cursor",
          "description": " UTILITIES ----------------------------------------\r\n",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            },
            {
              "name": "before",
              "type": "bool"
            }
          ]
        },
        {
          "name": "_order_object",
          "return_type": "Order",
          "rpc_mode": 0,
          "signature": "func _order_object(field: String, direction: int) -> Order",
          "description": "",
          "arguments": [
            {
              "name": "field",
              "type": "String"
            },
            {
              "name": "direction",
              "type": "int"
            }
          ]
        }
      ]
    },
    {
      "name": "FirestoreTask",
      "path": "res://addons/godot-firebase/firestore/firestore_task.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirestoreTask",
      "description": "# @meta-authors Nicolò 'fenix' Santilio,\r\n# @meta-version 1.2\r\n#\r\n# A [code]FirestoreTask[/code] is an indipendent node inheriting [code]HTTPRequest[/code] that processes a [code]Firestore[/code] request.\r\n# Once the Task is completed (both if successfully or not) it will emit the relative signal (or a general purpose signal [code]task_finished()[/code]) and will destroy automatically.\r\n# \r\n# Being a [code]Node[/code] it can be stored in a variable to yield on it, and receive its result as a callback.\r\n# All signals emitted by a [code]FirestoreTask[/code] represent a direct level of signal communication, which can be high ([code]get_document(document), result_query(result)[/code]) or low ([code]task_finished(result)[/code]).\r\n# An indirect level of communication with Tasks is also provided, redirecting signals to the [class FirebaseFirestore] module.\r\n#\r\n# ex.\r\n# [code]var task : FirestoreTask = Firebase.Firestore.query(query)[/code]\r\n# [code]var result : Array = yield(task, \"task_finished\")[/code]\r\n# [code]var result : Array = yield(task, \"result_query\")[/code]\r\n# [code]var result : Array = yield(Firebase.Firestore, \"task_finished\")[/code]\r\n# [code]var result : Array = yield(Firebase.Firestore, \"result_query\")[/code]\r\n# \r\n# @tutorial https://github.com/GodotNuts/GodotFirebase/wiki/Firestore#FirestoreTask\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "Task",
          "value": {
            "TASK_GET": 0,
            "TASK_POST": 1,
            "TASK_PATCH": 2,
            "TASK_DELETE": 3,
            "TASK_QUERY": 4,
            "TASK_LIST": 5
          },
          "data_type": "Dictionary",
          "signature": "const Task: Dictionary = {\"TASK_DELETE\":3,\"TASK_GET\":0,\"TASK_LIST\":5,\"TASK_PATCH\":2,\"TASK_POST\":1,\"TASK_QUERY\":4}",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "action",
          "data_type": "int",
          "default_value": -1,
          "setter": "set_action",
          "getter": "",
          "export": false,
          "signature": "var action: int = -1",
          "description": "# The code indicating the request Firestore is processing.\r\n# See @[enum FirebaseFirestore.Requests] to get a full list of codes identifiers.\r\n# @setter set_action\r\n"
        },
        {
          "name": "data",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var data",
          "description": "# A variable, temporary holding the result of the request.\r\n"
        },
        {
          "name": "from_cache",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var from_cache: bool = false",
          "description": "# Whether the data came from cache.\r\n"
        },
        {
          "name": "_response_headers",
          "data_type": "PoolStringArray",
          "default_value": [

          ],
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _response_headers: PoolStringArray = []",
          "description": ""
        },
        {
          "name": "_response_code",
          "data_type": "int",
          "default_value": 0,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _response_code: int = 0",
          "description": ""
        },
        {
          "name": "_method",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _method: int = -1",
          "description": ""
        },
        {
          "name": "_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _url: String = \"\"",
          "description": ""
        },
        {
          "name": "_fields",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _fields: String = \"\"",
          "description": ""
        },
        {
          "name": "_headers",
          "data_type": "PoolStringArray",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _headers: PoolStringArray",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "task_finished",
          "arguments": [
            "result"
          ],
          "signature": "signal task_finished(result)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n"
        },
        {
          "name": "add_document",
          "arguments": [
            "doc"
          ],
          "signature": "signal add_document(doc)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n# Emitted when a [code]add(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n"
        },
        {
          "name": "get_document",
          "arguments": [
            "doc"
          ],
          "signature": "signal get_document(doc)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n# Emitted when a [code]add(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]get(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n"
        },
        {
          "name": "update_document",
          "arguments": [
            "doc"
          ],
          "signature": "signal update_document(doc)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n# Emitted when a [code]add(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]get(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]update(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n"
        },
        {
          "name": "delete_document",
          "arguments": [

          ],
          "signature": "signal delete_document()",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n# Emitted when a [code]add(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]get(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]update(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]delete(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n"
        },
        {
          "name": "listed_documents",
          "arguments": [
            "documents"
          ],
          "signature": "signal listed_documents(documents)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n# Emitted when a [code]add(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]get(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]update(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]delete(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]list(collection_id)[/code] request on [class FirebaseFirestore] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n"
        },
        {
          "name": "result_query",
          "arguments": [
            "result"
          ],
          "signature": "signal result_query(result)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n# Emitted when a [code]add(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]get(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]update(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]delete(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]list(collection_id)[/code] request on [class FirebaseFirestore] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a [code]query(collection_id)[/code] request on [class FirebaseFirestore] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n"
        },
        {
          "name": "task_error",
          "arguments": [
            "code",
            "status",
            "message"
          ],
          "signature": "signal task_error(code, status, message)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n# Emitted when a [code]add(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]get(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]update(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]delete(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]list(collection_id)[/code] request on [class FirebaseFirestore] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a [code]query(collection_id)[/code] request on [class FirebaseFirestore] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a request is [b]not[/b] successfully completed.\r\n# @arg-types Dictionary\r\n"
        },
        {
          "name": "task_query_error",
          "arguments": [
            "code",
            "status",
            "message"
          ],
          "signature": "signal task_query_error(code, status, message)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\r\n# @arg-types Variant\r\n# Emitted when a [code]add(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]get(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]update(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]delete(document)[/code] request on a [class FirebaseCollection] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types FirestoreDocument\r\n# Emitted when a [code]list(collection_id)[/code] request on [class FirebaseFirestore] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a [code]query(collection_id)[/code] request on [class FirebaseFirestore] is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a request is [b]not[/b] successfully completed.\r\n# @arg-types Dictionary\r\n"
        },
        {
          "name": "task_list_error",
          "arguments": [
            "code",
            "status",
            "message"
          ],
          "signature": "signal task_list_error(code, status, message)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_on_request_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_request_completed(result: int, response_code: int, headers: PoolStringArray, body: PoolByteArray) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "response_code",
              "type": "int"
            },
            {
              "name": "headers",
              "type": "PoolStringArray"
            },
            {
              "name": "body",
              "type": "PoolByteArray"
            }
          ]
        },
        {
          "name": "set_action",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_action(value: int) -> null",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        {
          "name": "_handle_cache",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func _handle_cache(offline: bool, data, encrypt_key: String, cache_path: String, body) -> Dictionary",
          "description": "",
          "arguments": [
            {
              "name": "offline",
              "type": "bool"
            },
            {
              "name": "data",
              "type": "var"
            },
            {
              "name": "encrypt_key",
              "type": "String"
            },
            {
              "name": "cache_path",
              "type": "String"
            },
            {
              "name": "body",
              "type": "var"
            }
          ]
        },
        {
          "name": "_merge_dict",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func _merge_dict(dic_a: Dictionary, dic_b: Dictionary, nullify: bool = false) -> Dictionary",
          "description": "",
          "arguments": [
            {
              "name": "dic_a",
              "type": "Dictionary"
            },
            {
              "name": "dic_b",
              "type": "Dictionary"
            },
            {
              "name": "nullify",
              "type": "bool",
              "default_value": false
            }
          ]
        },
        {
          "name": "_merge_array",
          "return_type": "Array",
          "rpc_mode": 0,
          "signature": "func _merge_array(arr_a: Array, arr_b: Array, nullify: bool = false) -> Array",
          "description": "",
          "arguments": [
            {
              "name": "arr_a",
              "type": "Array"
            },
            {
              "name": "arr_b",
              "type": "Array"
            },
            {
              "name": "nullify",
              "type": "bool",
              "default_value": false
            }
          ]
        }
      ],
      "static_functions": [
        {
          "name": "_get_doc_file",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _get_doc_file(cache_path: String, document_id: String, encrypt_key: String) -> String",
          "description": "",
          "arguments": [
            {
              "name": "cache_path",
              "type": "String"
            },
            {
              "name": "document_id",
              "type": "String"
            },
            {
              "name": "encrypt_key",
              "type": "String"
            }
          ]
        }
      ]
    },
    {
      "name": "FirebaseFunctions",
      "path": "res://addons/godot-firebase/functions/functions.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseFunctions",
      "description": "# @meta-authors Nicolò 'fenix' Santilio,\r\n# @meta-version 2.5\r\n#\r\n# (source: [url=https://firebase.google.com/docs/functions]Functions[/url])\r\n#\r\n# @tutorial https://github.com/GodotNuts/GodotFirebase/wiki/Functions\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "CACHE_SIZE_UNLIMITED",
          "value": -1,
          "data_type": "int",
          "signature": "const CACHE_SIZE_UNLIMITED: int = -1",
          "description": " TODO: Implement cache size limit\r\n"
        },
        {
          "name": "_CACHE_RECORD_FILE",
          "value": "RmlyZXN0b3JlIGNhY2hlLXJlY29yZHMu.fscache",
          "data_type": "String",
          "signature": "const _CACHE_RECORD_FILE: String = \"RmlyZXN0b3JlIGNhY2hlLXJlY29yZHMu.fscache\"",
          "description": ""
        },
        {
          "name": "_CACHE_EXTENSION",
          "value": ".fscache",
          "data_type": "String",
          "signature": "const _CACHE_EXTENSION: String = \".fscache\"",
          "description": ""
        },
        {
          "name": "_AUTHORIZATION_HEADER",
          "value": "Authorization: Bearer ",
          "data_type": "String",
          "signature": "const _AUTHORIZATION_HEADER: String = \"Authorization: Bearer \"",
          "description": ""
        },
        {
          "name": "_MAX_POOLED_REQUEST_AGE",
          "value": 30,
          "data_type": "int",
          "signature": "const _MAX_POOLED_REQUEST_AGE: int = 30",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "request",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var request: int = -1",
          "description": "# The code indicating the request Firestore is processing.\r\n# See @[enum FirebaseFirestore.Requests] to get a full list of codes identifiers.\r\n# @enum Requests\r\n"
        },
        {
          "name": "persistence_enabled",
          "data_type": "bool",
          "default_value": true,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var persistence_enabled: bool = true",
          "description": "# Whether cache files can be used and generated.\r\n# @default true\r\n"
        },
        {
          "name": "networking",
          "data_type": "bool",
          "default_value": true,
          "setter": "set_networking",
          "getter": "",
          "export": false,
          "signature": "var networking: bool = true",
          "description": "# Whether an internet connection can be used.\r\n# @default true\r\n"
        },
        {
          "name": "auth",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var auth: Dictionary",
          "description": "# A Dictionary containing all authentication fields for the current logged user.\r\n# @type Dictionary\r\n"
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": ""
        },
        {
          "name": "_cache_loc",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _cache_loc: String",
          "description": ""
        },
        {
          "name": "_encrypt_key",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _encrypt_key: String",
          "description": ""
        },
        {
          "name": "_base_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _base_url: String = \"\"",
          "description": ""
        },
        {
          "name": "_http_request_pool",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _http_request_pool: Array",
          "description": ""
        },
        {
          "name": "_offline",
          "data_type": "bool",
          "default_value": false,
          "setter": "_set_offline",
          "getter": "",
          "export": false,
          "signature": "var _offline: bool = false",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "task_error",
          "arguments": [
            "code",
            "status",
            "message"
          ],
          "signature": "signal task_error(code, status, message)",
          "description": "# Emitted when a  [code]query()[/code] request is successfully completed. [code]error()[/code] signal will be emitted otherwise.\r\n# @arg-types Array\r\n# Emitted when a [code]list()[/code] or [code]query()[/code] request is [b]not[/b] successfully completed.\r\n"
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_process",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _process(delta: float) -> null",
          "description": "",
          "arguments": [
            {
              "name": "delta",
              "type": "float"
            }
          ]
        },
        {
          "name": "execute",
          "return_type": "FunctionTask",
          "rpc_mode": 0,
          "signature": "func execute(function: String, method: int, params: Dictionary, body: Dictionary) -> FunctionTask",
          "description": "# @args \r\n# @return FunctionTask\r\n",
          "arguments": [
            {
              "name": "function",
              "type": "String"
            },
            {
              "name": "method",
              "type": "int"
            },
            {
              "name": "params",
              "type": "Dictionary"
            },
            {
              "name": "body",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "set_networking",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_networking(value: bool) -> null",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "bool"
            }
          ]
        },
        {
          "name": "enable_networking",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func enable_networking() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "disable_networking",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func disable_networking() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_set_offline",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _set_offline(value: bool) -> null",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "bool"
            }
          ]
        },
        {
          "name": "_set_config",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _set_config(config_json: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "config_json",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_check_emulating",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_emulating() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_pooled_request",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _pooled_request(task: FunctionTask) -> var",
          "description": "",
          "arguments": [
            {
              "name": "task",
              "type": "FunctionTask"
            }
          ]
        },
        {
          "name": "_on_task_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_task_finished(data: Dictionary)",
          "description": " -------------\r\n",
          "arguments": [
            {
              "name": "data",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_function_executed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_function_executed(result: int, data: Dictionary)",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "data",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_task_error",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_task_error(code: int, status: int, message: String)",
          "description": "",
          "arguments": [
            {
              "name": "code",
              "type": "int"
            },
            {
              "name": "status",
              "type": "int"
            },
            {
              "name": "message",
              "type": "String"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_login_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_login_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_token_refresh_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_token_refresh_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_pooled_request_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_pooled_request_completed(result: int, response_code: int, headers: PoolStringArray, body: PoolByteArray, request: HTTPRequest) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "response_code",
              "type": "int"
            },
            {
              "name": "headers",
              "type": "PoolStringArray"
            },
            {
              "name": "body",
              "type": "PoolByteArray"
            },
            {
              "name": "request",
              "type": "HTTPRequest"
            }
          ]
        },
        {
          "name": "_on_connect_check_request_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_connect_check_request_completed(result: int, _response_code, _headers, _body) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "_response_code",
              "type": "var"
            },
            {
              "name": "_headers",
              "type": "var"
            },
            {
              "name": "_body",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_logout",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_logout() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_check_auth_error",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_auth_error(code: int, message: String) -> null",
          "description": "",
          "arguments": [
            {
              "name": "code",
              "type": "int"
            },
            {
              "name": "message",
              "type": "String"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FunctionTask",
      "path": "res://addons/godot-firebase/functions/function_task.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FunctionTask",
      "description": "# @meta-authors Nicolò 'fenix' Santilio,\n# @meta-version 1.2\n#\n# ex.\n# [code]var task : FirestoreTask = Firebase.Firestore.query(query)[/code]\n# [code]var result : Array = yield(task, \"task_finished\")[/code]\n# [code]var result : Array = yield(task, \"result_query\")[/code]\n# [code]var result : Array = yield(Firebase.Firestore, \"task_finished\")[/code]\n# [code]var result : Array = yield(Firebase.Firestore, \"result_query\")[/code]\n# \n# @tutorial https://github.com/GodotNuts/GodotFirebase/wiki/Firestore#FirestoreTask\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "data",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var data: Dictionary",
          "description": "# A variable, temporary holding the result of the request.\n"
        },
        {
          "name": "error",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var error: Dictionary",
          "description": "# A variable, temporary holding the result of the request.\n"
        },
        {
          "name": "from_cache",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var from_cache: bool = false",
          "description": "# Whether the data came from cache.\n"
        },
        {
          "name": "_response_headers",
          "data_type": "PoolStringArray",
          "default_value": [

          ],
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _response_headers: PoolStringArray = []",
          "description": ""
        },
        {
          "name": "_response_code",
          "data_type": "int",
          "default_value": 0,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _response_code: int = 0",
          "description": ""
        },
        {
          "name": "_method",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _method: int = -1",
          "description": ""
        },
        {
          "name": "_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _url: String = \"\"",
          "description": ""
        },
        {
          "name": "_fields",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _fields: String = \"\"",
          "description": ""
        },
        {
          "name": "_headers",
          "data_type": "PoolStringArray",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _headers: PoolStringArray",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "task_finished",
          "arguments": [
            "result"
          ],
          "signature": "signal task_finished(result)",
          "description": "# Emitted when a request is completed. The request can be successful or not successful: if not, an [code]error[/code] Dictionary will be passed as a result.\n# @arg-types Variant\n"
        },
        {
          "name": "function_executed",
          "arguments": [
            "response",
            "result"
          ],
          "signature": "signal function_executed(response, result)",
          "description": "# Emitted when a cloud function is correctly executed, returning the Response Code and Result Body\n# @arg-types FirestoreDocument\n"
        },
        {
          "name": "task_error",
          "arguments": [
            "code",
            "status",
            "message"
          ],
          "signature": "signal task_error(code, status, message)",
          "description": "# Emitted when a request is [b]not[/b] successfully completed.\n# @arg-types Dictionary\n"
        }
      ],
      "methods": [
        {
          "name": "_on_request_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_request_completed(result: int, response_code: int, headers: PoolStringArray, body: PoolByteArray) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            },
            {
              "name": "response_code",
              "type": "int"
            },
            {
              "name": "headers",
              "type": "PoolStringArray"
            },
            {
              "name": "body",
              "type": "PoolByteArray"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "plugin.gd",
      "path": "res://addons/godot-firebase/plugin.gd",
      "extends_class": [
        "EditorPlugin"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class plugin.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_enter_tree",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _enter_tree() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_exit_tree",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _exit_tree() -> null",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "FirebaseStorage",
      "path": "res://addons/godot-firebase/storage/storage.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class FirebaseStorage",
      "description": "# @meta-authors SIsilicon\r\n# @meta-version 2.2\r\n# The Storage API for Firebase.\r\n# This object handles all firebase storage tasks, variables and references. To use this API, you must first create a [StorageReference] with [method ref]. With the reference, you can then query and manipulate the file or folder in the cloud storage.\r\n# \r\n# [i]Note: In HTML builds, you must configure [url=https://firebase.google.com/docs/storage/web/download-files#cors_configuration]CORS[/url] in your storage bucket.[i] \r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "_API_VERSION",
          "value": "v0",
          "data_type": "String",
          "signature": "const _API_VERSION: String = \"v0\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "bucket",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var bucket: String",
          "description": "# The current storage bucket the Storage API is referencing.\r\n"
        },
        {
          "name": "requesting",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var requesting: bool = false",
          "description": "# @default false\r\n# Whether a task is currently being processed.\r\n"
        },
        {
          "name": "_auth",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _auth: Dictionary",
          "description": ""
        },
        {
          "name": "_config",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _config: Dictionary",
          "description": ""
        },
        {
          "name": "_references",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _references: Dictionary",
          "description": ""
        },
        {
          "name": "_base_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _base_url: String = \"\"",
          "description": ""
        },
        {
          "name": "_extended_url",
          "data_type": "String",
          "default_value": "b/[APP_ID]/o/[FILE_PATH]",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _extended_url: String = \"b/[APP_ID]/o/[FILE_PATH]\"",
          "description": ""
        },
        {
          "name": "_root_ref",
          "data_type": "StorageReference",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _root_ref: StorageReference",
          "description": ""
        },
        {
          "name": "_http_client",
          "data_type": "HTTPClient",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _http_client: HTTPClient",
          "description": ""
        },
        {
          "name": "_pending_tasks",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _pending_tasks: Array",
          "description": ""
        },
        {
          "name": "_current_task",
          "data_type": "StorageTask",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _current_task: StorageTask",
          "description": ""
        },
        {
          "name": "_response_code",
          "data_type": "int",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _response_code: int",
          "description": ""
        },
        {
          "name": "_response_headers",
          "data_type": "PoolStringArray",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _response_headers: PoolStringArray",
          "description": ""
        },
        {
          "name": "_response_data",
          "data_type": "PoolByteArray",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _response_data: PoolByteArray",
          "description": ""
        },
        {
          "name": "_content_length",
          "data_type": "int",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _content_length: int",
          "description": ""
        },
        {
          "name": "_reading_body",
          "data_type": "bool",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _reading_body: bool",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "task_successful",
          "arguments": [
            "result",
            "response_code",
            "data"
          ],
          "signature": "signal task_successful(result, response_code, data)",
          "description": "# @arg-types int, int, PoolStringArray\r\n# @arg-enums HTTPRequest.Result, HTTPClient.ResponseCode\r\n# Emitted when a [StorageTask] has finished successful.\r\n"
        },
        {
          "name": "task_failed",
          "arguments": [
            "result",
            "response_code",
            "data"
          ],
          "signature": "signal task_failed(result, response_code, data)",
          "description": "# @arg-types int, int, PoolStringArray\r\n# @arg-enums HTTPRequest.Result, HTTPClient.ResponseCode\r\n# Emitted when a [StorageTask] has finished with an error.\r\n"
        }
      ],
      "methods": [
        {
          "name": "_notification",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _notification(what: int) -> null",
          "description": "",
          "arguments": [
            {
              "name": "what",
              "type": "int"
            }
          ]
        },
        {
          "name": "_internal_process",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _internal_process(_delta: float) -> null",
          "description": "",
          "arguments": [
            {
              "name": "_delta",
              "type": "float"
            }
          ]
        },
        {
          "name": "ref",
          "return_type": "StorageReference",
          "rpc_mode": 0,
          "signature": "func ref(path: String = \"\") -> StorageReference",
          "description": "# @args path\r\n# @arg-defaults \"\"\r\n# @return StorageReference\r\n# Returns a reference to a file or folder in the storage bucket. It's this reference that should be used to control the file/folder on the server end.\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_set_config",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _set_config(config_json: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "config_json",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_check_emulating",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _check_emulating() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_upload",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func _upload(data: PoolByteArray, headers: PoolStringArray, ref: StorageReference, meta_only: bool) -> StorageTask",
          "description": "",
          "arguments": [
            {
              "name": "data",
              "type": "PoolByteArray"
            },
            {
              "name": "headers",
              "type": "PoolStringArray"
            },
            {
              "name": "ref",
              "type": "StorageReference"
            },
            {
              "name": "meta_only",
              "type": "bool"
            }
          ]
        },
        {
          "name": "_download",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _download(ref: StorageReference, meta_only: bool, url_only: bool) -> var",
          "description": "",
          "arguments": [
            {
              "name": "ref",
              "type": "StorageReference"
            },
            {
              "name": "meta_only",
              "type": "bool"
            },
            {
              "name": "url_only",
              "type": "bool"
            }
          ]
        },
        {
          "name": "_list",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func _list(ref: StorageReference, list_all: bool) -> StorageTask",
          "description": "",
          "arguments": [
            {
              "name": "ref",
              "type": "StorageReference"
            },
            {
              "name": "list_all",
              "type": "bool"
            }
          ]
        },
        {
          "name": "_delete",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func _delete(ref: StorageReference) -> StorageTask",
          "description": "",
          "arguments": [
            {
              "name": "ref",
              "type": "StorageReference"
            }
          ]
        },
        {
          "name": "_process_request",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _process_request(task: StorageTask) -> null",
          "description": "",
          "arguments": [
            {
              "name": "task",
              "type": "StorageTask"
            }
          ]
        },
        {
          "name": "_finish_request",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _finish_request(result: int) -> null",
          "description": "",
          "arguments": [
            {
              "name": "result",
              "type": "int"
            }
          ]
        },
        {
          "name": "_get_file_url",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _get_file_url(ref: StorageReference) -> String",
          "description": "",
          "arguments": [
            {
              "name": "ref",
              "type": "StorageReference"
            }
          ]
        },
        {
          "name": "_simplify_path",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _simplify_path(path: String) -> String",
          "description": " Removes any \"../\" or \"./\" in the file path.\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_login_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_login_succeeded(auth_token: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_token",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_token_refresh_succeeded",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_token_refresh_succeeded(auth_result: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "auth_result",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_on_FirebaseAuth_logout",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_logout() -> null",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "StorageReference",
      "path": "res://addons/godot-firebase/storage/storage_reference.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class StorageReference",
      "description": "# @meta-authors SIsilicon\n# @meta-version 2.2\n# A reference to a file or folder in the Firebase cloud storage.\n# This object is used to interact with the cloud storage. You may get data from the server, as well as upload your own back to it.\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "MIME_TYPES",
          "value": {
            "bmp": "image/bmp",
            "css": "text/css",
            "csv": "text/csv",
            "gd": "text/plain",
            "htm": "text/html",
            "html": "text/html",
            "jpeg": "image/jpeg",
            "jpg": "image/jpeg",
            "json": "application/json",
            "mp3": "audio/mpeg",
            "mpeg": "video/mpeg",
            "ogg": "audio/ogg",
            "ogv": "video/ogg",
            "png": "image/png",
            "shader": "text/plain",
            "svg": "image/svg+xml",
            "tif": "image/tiff",
            "tiff": "image/tiff",
            "tres": "text/plain",
            "tscn": "text/plain",
            "txt": "text/plain",
            "wav": "audio/wav",
            "webm": "video/webm",
            "webp": "video/webm",
            "xml": "text/xml"
          },
          "data_type": "Dictionary",
          "signature": "const MIME_TYPES: Dictionary = {\"bmp\":\"image/bmp\",\"css\":\"text/css\",\"csv\":\"text/csv\",\"gd\":\"text/plain\",\"htm\":\"text/html\",\"html\":\"text/html\",\"jpeg\":\"image/jpeg\",\"jpg\":\"image/jpeg\",\"json\":\"application/json\",\"mp3\":\"audio/mpeg\",\"mpeg\":\"video/mpeg\",\"ogg\":\"audio/ogg\",\"ogv\":\"video/ogg\",\"png\":\"image/png\",\"shader\":\"text/plain\",\"svg\":\"image/svg+xml\",\"tif\":\"image/tiff\",\"tiff\":\"image/tiff\",\"tres\":\"text/plain\",\"tscn\":\"text/plain\",\"txt\":\"text/plain\",\"wav\":\"audio/wav\",\"webm\":\"video/webm\",\"webp\":\"video/webm\",\"xml\":\"text/xml\"}",
          "description": "# A dictionary of common MIME types based on a file extension.\n# Example: [code]MIME_TYPES.png[/code] will return [code]image/png[/code].\n"
        },
        {
          "name": "DEFAULT_MIME_TYPE",
          "value": "application/octet-stream",
          "data_type": "String",
          "signature": "const DEFAULT_MIME_TYPE: String = \"application/octet-stream\"",
          "description": "# The default MIME type to use when uploading a file.\n# Data sent with this type are interpreted as plain binary data. Note that firebase will generate an MIME type based on the file extenstion if none is provided.\n"
        }
      ],
      "members": [
        {
          "name": "bucket",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var bucket: String = \"\"",
          "description": "# @default \"\"\n# The stroage bucket this referenced file/folder is located in.\n"
        },
        {
          "name": "full_path",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var full_path: String = \"\"",
          "description": "# @default \"\"\n# The path to the file/folder relative to [member bucket].\n"
        },
        {
          "name": "name",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var name: String = \"\"",
          "description": "# @default \"\"\n# The name of the file/folder, including any file extension.\n# Example: If the [member full_path] is [code]images/user/image.png[/code], then the [member name] would be [code]image.png[/code].\n"
        },
        {
          "name": "parent",
          "data_type": "StorageReference",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var parent: StorageReference",
          "description": "# The parent [StorageReference] one level up the file hierarchy.\n# If the current [StorageReference] is the root (i.e. the [member full_path] is [code]\"\"[/code]) then the [member parent] will be [code]null[/code].\n"
        },
        {
          "name": "root",
          "data_type": "StorageReference",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var root: StorageReference",
          "description": "# The root [StorageReference].\n"
        },
        {
          "name": "storage",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var storage",
          "description": "# @type FirebaseStorage\n# The Storage API that created this [StorageReference] to begin with.\n FirebaseStorage (Can't static type due to cyclic reference)\n"
        },
        {
          "name": "valid",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var valid: bool = false",
          "description": "# @default false\n# Whether this [StorageReference] is valid. None of the functions will work when in an invalid state.\n# It is set to false when [method delete] is called.\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "child",
          "return_type": "StorageReference",
          "rpc_mode": 0,
          "signature": "func child(path: String) -> StorageReference",
          "description": "# @args path\n# @return StorageReference\n# Returns a reference to another [StorageReference] relative to this one.\n",
          "arguments": [
            {
              "name": "path",
              "type": "String"
            }
          ]
        },
        {
          "name": "put_data",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func put_data(data: PoolByteArray, metadata: Dictionary) -> StorageTask",
          "description": "# @args data, metadata\n# @return StorageTask\n# Makes an attempt to upload data to the referenced file location. Status on this task is found in the returned [StorageTask].\n",
          "arguments": [
            {
              "name": "data",
              "type": "PoolByteArray"
            },
            {
              "name": "metadata",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "put_string",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func put_string(data: String, metadata: Dictionary) -> StorageTask",
          "description": "# @args data, metadata\n# @return StorageTask\n# Like [method put_data], but [code]data[/code] is a [String].\n",
          "arguments": [
            {
              "name": "data",
              "type": "String"
            },
            {
              "name": "metadata",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "put_file",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func put_file(file_path: String, metadata: Dictionary) -> StorageTask",
          "description": "# @args file_path, metadata\n# @return StorageTask\n# Like [method put_data], but the data comes from a file at [code]file_path[/code].\n",
          "arguments": [
            {
              "name": "file_path",
              "type": "String"
            },
            {
              "name": "metadata",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "get_data",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func get_data() -> StorageTask",
          "description": "# @return StorageTask\n# Makes an attempt to download the files from the referenced file location. Status on this task is found in the returned [StorageTask].\n",
          "arguments": [

          ]
        },
        {
          "name": "get_string",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func get_string() -> StorageTask",
          "description": "# @return StorageTask\n# Like [method get_data], but the data in the returned [StorageTask] comes in the form of a [String].\n",
          "arguments": [

          ]
        },
        {
          "name": "get_download_url",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func get_download_url() -> StorageTask",
          "description": "# @return StorageTask\n# Attempts to get the download url that points to the referenced file's data. Using the url directly may require an authentication header. Status on this task is found in the returned [StorageTask].\n",
          "arguments": [

          ]
        },
        {
          "name": "get_metadata",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func get_metadata() -> StorageTask",
          "description": "# @return StorageTask\n# Attempts to get the metadata of the referenced file. Status on this task is found in the returned [StorageTask].\n",
          "arguments": [

          ]
        },
        {
          "name": "update_metadata",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func update_metadata(metadata: Dictionary) -> StorageTask",
          "description": "# @args metadata\n# @return StorageTask\n# Attempts to update the metadata of the referenced file. Any field with a value of [code]null[/code] will be deleted on the server end. Status on this task is found in the returned [StorageTask].\n",
          "arguments": [
            {
              "name": "metadata",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "list",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func list() -> StorageTask",
          "description": "# @return StorageTask\n# Attempts to get the list of files and/or folders under the referenced folder This function is not nested unlike [method list_all]. Status on this task is found in the returned [StorageTask].\n",
          "arguments": [

          ]
        },
        {
          "name": "list_all",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func list_all() -> StorageTask",
          "description": "# @return StorageTask\n# Attempts to get the list of files and/or folders under the referenced folder This function is nested unlike [method list]. Status on this task is found in the returned [StorageTask].\n",
          "arguments": [

          ]
        },
        {
          "name": "delete",
          "return_type": "StorageTask",
          "rpc_mode": 0,
          "signature": "func delete() -> StorageTask",
          "description": "# @return StorageTask\n# Attempts to delete the referenced file/folder. If successful, the reference will become invalid And can no longer be used. If you need to reference this location again, make a new reference with [method StorageTask.ref]. Status on this task is found in the returned [StorageTask].\n",
          "arguments": [

          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_task_finished",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_task_finished(task: StorageTask, action: String) -> null",
          "description": "",
          "arguments": [
            {
              "name": "task",
              "type": "StorageTask"
            },
            {
              "name": "action",
              "type": "String"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "StorageTask",
      "path": "res://addons/godot-firebase/storage/storage_task.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class StorageTask",
      "description": "# @meta-authors SIsilicon\r\n# @meta-version 2.2\r\n# An object that keeps track of an operation performed by [StorageReference].\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "Task",
          "value": {
            "TASK_UPLOAD": 0,
            "TASK_UPLOAD_META": 1,
            "TASK_DOWNLOAD": 2,
            "TASK_DOWNLOAD_META": 3,
            "TASK_DOWNLOAD_URL": 4,
            "TASK_LIST": 5,
            "TASK_LIST_ALL": 6,
            "TASK_DELETE": 7,
            "TASK_MAX": 8
          },
          "data_type": "Dictionary",
          "signature": "const Task: Dictionary = {\"TASK_DELETE\":7,\"TASK_DOWNLOAD\":2,\"TASK_DOWNLOAD_META\":3,\"TASK_DOWNLOAD_URL\":4,\"TASK_LIST\":5,\"TASK_LIST_ALL\":6,\"TASK_MAX\":8,\"TASK_UPLOAD\":0,\"TASK_UPLOAD_META\":1}",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "ref",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ref",
          "description": "# @type StorageReference\r\n# The [StorageReference] that created this [StorageTask].\r\n Storage Reference (Can't static type due to cyclic reference)\n"
        },
        {
          "name": "action",
          "data_type": "int",
          "default_value": -1,
          "setter": "set_action",
          "getter": "",
          "export": false,
          "signature": "var action: int = -1",
          "description": "# @enum Task\r\n# @default -1\r\n# @setter set_action\r\n# The kind of operation this [StorageTask] is keeping track of.\r\n"
        },
        {
          "name": "data",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var data",
          "description": "# @default PoolByteArray()\r\n# Data that the tracked task will/has returned.\r\n data can be of any type.\n"
        },
        {
          "name": "progress",
          "data_type": "float",
          "default_value": 0,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var progress: float = 0",
          "description": "# @default 0.0\r\n# The percentage of data that has been received.\r\n"
        },
        {
          "name": "result",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var result: int = -1",
          "description": "# @default -1\r\n# @enum HTTPRequest.Result\r\n# The resulting status of the task. Anyting other than [constant HTTPRequest.RESULT_SUCCESS] means an error has occured.\r\n"
        },
        {
          "name": "finished",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var finished: bool = false",
          "description": "# @default false\r\n# Whether the task is finished processing.\r\n"
        },
        {
          "name": "response_headers",
          "data_type": "PoolStringArray",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var response_headers: PoolStringArray",
          "description": "# @default PoolStringArray()\r\n# The returned HTTP response headers.\r\n"
        },
        {
          "name": "response_code",
          "data_type": "int",
          "default_value": 0,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var response_code: int = 0",
          "description": "# @default 0\r\n# @enum HTTPClient.ResponseCode\r\n# The returned HTTP response code.\r\n"
        },
        {
          "name": "_method",
          "data_type": "int",
          "default_value": -1,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _method: int = -1",
          "description": ""
        },
        {
          "name": "_url",
          "data_type": "String",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _url: String = \"\"",
          "description": ""
        },
        {
          "name": "_headers",
          "data_type": "PoolStringArray",
          "default_value": [

          ],
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _headers: PoolStringArray = []",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "task_finished",
          "arguments": [
            "data"
          ],
          "signature": "signal task_finished(data)",
          "description": "# Emitted when the task is finished. Returns data depending on the success and action of the task.\r\n"
        }
      ],
      "methods": [
        {
          "name": "set_action",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func set_action(value: int) -> null",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "int"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "autofree.gd",
      "path": "res://addons/gut/autofree.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class autofree.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Class used to keep track of objects to be freed and utilities to free them.\r\n ##############################################################################\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_to_free",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _to_free",
          "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Class used to keep track of objects to be freed and utilities to free them.\r\n ##############################################################################\r\n"
        },
        {
          "name": "_to_queue_free",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _to_queue_free",
          "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Class used to keep track of objects to be freed and utilities to free them.\r\n ##############################################################################\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "add_free",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_free(thing)",
          "description": "",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "add_queue_free",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_queue_free(thing)",
          "description": "",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_queue_free_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_queue_free_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_free_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_free_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "free_all",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func free_all()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "comparator.gd",
      "path": "res://addons/gut/comparator.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class comparator.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "MISSING",
          "value": "|__missing__gut__compare__value__|",
          "data_type": "String",
          "signature": "const MISSING: String = \"|__missing__gut__compare__value__|\"",
          "description": ""
        },
        {
          "name": "DICTIONARY_DISCLAIMER",
          "value": "Dictionaries are compared-by-ref.  See assert_eq in wiki.",
          "data_type": "String",
          "signature": "const DICTIONARY_DISCLAIMER: String = \"Dictionaries are compared-by-ref.  See assert_eq in wiki.\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "class comparator.gd",
          "description": ""
        },
        {
          "name": "_strutils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _strutils",
          "description": ""
        },
        {
          "name": "_max_length",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _max_length",
          "description": ""
        },
        {
          "name": "_should_compare_int_to_float",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _should_compare_int_to_float",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_cannot_comapre_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _cannot_comapre_text(v1, v2)",
          "description": "",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            }
          ]
        },
        {
          "name": "_make_missing_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _make_missing_string(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "_create_missing_result",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _create_missing_result(v1, v2, text)",
          "description": "",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "simple",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func simple(v1, v2, missing_string = \"\")",
          "description": "",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            },
            {
              "name": "missing_string",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "shallow",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func shallow(v1, v2)",
          "description": "",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            }
          ]
        },
        {
          "name": "deep",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func deep(v1, v2)",
          "description": "",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            }
          ]
        },
        {
          "name": "format_value",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func format_value(val, max_val_length)",
          "description": "",
          "arguments": [
            {
              "name": "val",
              "type": "var"
            },
            {
              "name": "max_val_length",
              "type": "var"
            }
          ]
        },
        {
          "name": "compare",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func compare(v1, v2, diff_type)",
          "description": "",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            },
            {
              "name": "diff_type",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_should_compare_int_to_float",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_should_compare_int_to_float()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_should_compare_int_to_float",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_should_compare_int_to_float(should_compare_int_float)",
          "description": "",
          "arguments": [
            {
              "name": "should_compare_int_float",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_compare_symbol",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_compare_symbol(is_equal)",
          "description": "",
          "arguments": [
            {
              "name": "is_equal",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "compare_result.gd",
      "path": "res://addons/gut/compare_result.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class compare_result.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "are_equal",
          "data_type": "var",
          "default_value": null,
          "setter": "set_are_equal",
          "getter": "get_are_equal",
          "export": false,
          "signature": "class compare_result.gd",
          "description": ""
        },
        {
          "name": "summary",
          "data_type": "var",
          "default_value": null,
          "setter": "set_summary",
          "getter": "get_summary",
          "export": false,
          "signature": "var summary",
          "description": ""
        },
        {
          "name": "max_differences",
          "data_type": "var",
          "default_value": null,
          "setter": "set_max_differences",
          "getter": "get_max_differences",
          "export": false,
          "signature": "var max_differences",
          "description": ""
        },
        {
          "name": "differences",
          "data_type": "var",
          "default_value": null,
          "setter": "set_differences",
          "getter": "get_differences",
          "export": false,
          "signature": "var differences",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_block_set",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _block_set(which, val)",
          "description": "",
          "arguments": [
            {
              "name": "which",
              "type": "var"
            },
            {
              "name": "val",
              "type": "var"
            }
          ]
        },
        {
          "name": "_to_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _to_string()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_are_equal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_are_equal()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_are_equal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_are_equal(r_eq)",
          "description": "",
          "arguments": [
            {
              "name": "r_eq",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_summary()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_summary(smry)",
          "description": "",
          "arguments": [
            {
              "name": "smry",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_total_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_total_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_different_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_different_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_short_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_short_summary()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_max_differences",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_max_differences()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_max_differences",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_max_differences(max_diff)",
          "description": "",
          "arguments": [
            {
              "name": "max_diff",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_differences",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_differences()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_differences",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_differences(diffs)",
          "description": "",
          "arguments": [
            {
              "name": "diffs",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_brackets",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_brackets()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "diff_formatter.gd",
      "path": "res://addons/gut/diff_formatter.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class diff_formatter.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "INDENT",
          "value": "    ",
          "data_type": "String",
          "signature": "const INDENT: String = \"    \"",
          "description": ""
        },
        {
          "name": "ABSOLUTE_MAX_DISPLAYED",
          "value": 10000,
          "data_type": "int",
          "signature": "const ABSOLUTE_MAX_DISPLAYED: int = 10000",
          "description": ""
        },
        {
          "name": "UNLIMITED",
          "value": -1,
          "data_type": "int",
          "signature": "const UNLIMITED: int = -1",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "class diff_formatter.gd",
          "description": ""
        },
        {
          "name": "_strutils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _strutils",
          "description": ""
        },
        {
          "name": "_max_to_display",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _max_to_display",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_single_diff",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _single_diff(diff, depth = 0)",
          "description": "",
          "arguments": [
            {
              "name": "diff",
              "type": "var"
            },
            {
              "name": "depth",
              "type": "var",
              "default_value": 0
            }
          ]
        },
        {
          "name": "make_it",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func make_it(diff)",
          "description": "",
          "arguments": [
            {
              "name": "diff",
              "type": "var"
            }
          ]
        },
        {
          "name": "differences_to_s",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func differences_to_s(differences, depth = 0)",
          "description": "",
          "arguments": [
            {
              "name": "differences",
              "type": "var"
            },
            {
              "name": "depth",
              "type": "var",
              "default_value": 0
            }
          ]
        },
        {
          "name": "get_max_to_display",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_max_to_display()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_max_to_display",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_max_to_display(max_to_display)",
          "description": "",
          "arguments": [
            {
              "name": "max_to_display",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "diff_tool.gd",
      "path": "res://addons/gut/diff_tool.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/compare_result.gd",
      "icon": "",
      "signature": "class diff_tool.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "SHALLOW",
          "value": 1,
          "data_type": "int",
          "signature": "const SHALLOW: int = 1",
          "description": ""
        },
        {
          "name": "DEEP",
          "value": 0,
          "data_type": "int",
          "signature": "const DEEP: int = 0",
          "description": ""
        },
        {
          "name": "SIMPLE",
          "value": 2,
          "data_type": "int",
          "signature": "const SIMPLE: int = 2",
          "description": ""
        },
        {
          "name": "INDENT",
          "value": "    ",
          "data_type": "String",
          "signature": "const INDENT: String = \"    \"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": ""
        },
        {
          "name": "_strutils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _strutils",
          "description": ""
        },
        {
          "name": "_compare",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _compare",
          "description": ""
        },
        {
          "name": "DiffTool",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var DiffTool",
          "description": ""
        },
        {
          "name": "_value_1",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _value_1",
          "description": ""
        },
        {
          "name": "_value_2",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _value_2",
          "description": ""
        },
        {
          "name": "_total_count",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _total_count",
          "description": ""
        },
        {
          "name": "_diff_type",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _diff_type",
          "description": ""
        },
        {
          "name": "_brackets",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _brackets",
          "description": ""
        },
        {
          "name": "_valid",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _valid",
          "description": ""
        },
        {
          "name": "_desc_things",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _desc_things",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "set_are_equal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_are_equal(val)",
          "description": " -------- comapre_result.gd \"interface\" ---------------------\r\n",
          "arguments": [
            {
              "name": "val",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_are_equal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_are_equal()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_summary(val)",
          "description": "",
          "arguments": [
            {
              "name": "val",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_summary()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_different_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_different_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_total_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_total_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_short_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_short_summary()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_brackets",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_brackets()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_invalidate",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _invalidate()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init(v1, v2, diff_type)",
          "description": "",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            },
            {
              "name": "diff_type",
              "type": "var"
            }
          ]
        },
        {
          "name": "_find_differences",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _find_differences(v1, v2)",
          "description": "",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            }
          ]
        },
        {
          "name": "_diff_array",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _diff_array(a1, a2)",
          "description": "",
          "arguments": [
            {
              "name": "a1",
              "type": "var"
            },
            {
              "name": "a2",
              "type": "var"
            }
          ]
        },
        {
          "name": "_diff_dictionary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _diff_dictionary(d1, d2)",
          "description": "",
          "arguments": [
            {
              "name": "d1",
              "type": "var"
            },
            {
              "name": "d2",
              "type": "var"
            }
          ]
        },
        {
          "name": "summarize",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func summarize()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "are_equal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func are_equal()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_diff_type",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_diff_type()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_value_1",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_value_1()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_value_2",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_value_2()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "doubler.gd",
      "path": "res://addons/gut/doubler.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class doubler.gd",
      "description": " ------------------------------------------------------------------------------\r\n Utility class to hold the local and built in methods separately.  Add all local\r\n methods FIRST, then add built ins.\r\n ------------------------------------------------------------------------------\r\n List of methods that should not be overloaded when they are not defined\r\n in the class being doubled.  These either break things if they are\r\n overloaded or do not have a \"super\" equivalent so we can't just pass\r\n through.\r\n",
      "sub_classes": [
        {
          "name": "ScriptMethods",
          "path": "res://addons/gut/doubler.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class ScriptMethods",
          "description": " ------------------------------------------------------------------------------\r\n Utility class to hold the local and built in methods separately.  Add all local\r\n methods FIRST, then add built ins.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "_blacklist",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _blacklist",
              "description": " ------------------------------------------------------------------------------\r\n Utility class to hold the local and built in methods separately.  Add all local\r\n methods FIRST, then add built ins.\r\n ------------------------------------------------------------------------------\r\n List of methods that should not be overloaded when they are not defined\r\n in the class being doubled.  These either break things if they are\r\n overloaded or do not have a \"super\" equivalent so we can't just pass\r\n through.\r\n"
            },
            {
              "name": "_skip",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _skip",
              "description": " These methods should not be included in the double.\r\n"
            },
            {
              "name": "built_ins",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var built_ins",
              "description": ""
            },
            {
              "name": "local_methods",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var local_methods",
              "description": ""
            },
            {
              "name": "_method_names",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _method_names",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "is_blacklisted",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func is_blacklisted(method_meta)",
              "description": "",
              "arguments": [
                {
                  "name": "method_meta",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_add_name_if_does_not_have",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _add_name_if_does_not_have(method_name)",
              "description": "",
              "arguments": [
                {
                  "name": "method_name",
                  "type": "var"
                }
              ]
            },
            {
              "name": "add_built_in_method",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func add_built_in_method(method_meta)",
              "description": "",
              "arguments": [
                {
                  "name": "method_meta",
                  "type": "var"
                }
              ]
            },
            {
              "name": "add_local_method",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func add_local_method(method_meta)",
              "description": "",
              "arguments": [
                {
                  "name": "method_meta",
                  "type": "var"
                }
              ]
            },
            {
              "name": "to_s",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func to_s()",
              "description": "",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "ObjectInfo",
          "path": "res://addons/gut/doubler.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class ObjectInfo",
          "description": " ------------------------------------------------------------------------------\r\n Helper class to deal with objects and inner classes.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "_path",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _path",
              "description": " ------------------------------------------------------------------------------\r\n Helper class to deal with objects and inner classes.\r\n ------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "_subpaths",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _subpaths",
              "description": ""
            },
            {
              "name": "_utils",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _utils",
              "description": ""
            },
            {
              "name": "_method_strategy",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _method_strategy",
              "description": ""
            },
            {
              "name": "make_partial_double",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var make_partial_double",
              "description": ""
            },
            {
              "name": "scene_path",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var scene_path",
              "description": ""
            },
            {
              "name": "_native_class",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _native_class",
              "description": ""
            },
            {
              "name": "_native_class_name",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _native_class_name",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init(path, subpath = null)",
              "description": "",
              "arguments": [
                {
                  "name": "path",
                  "type": "var"
                },
                {
                  "name": "subpath",
                  "type": "var",
                  "default_value": null
                }
              ]
            },
            {
              "name": "instantiate",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func instantiate()",
              "description": " Returns an instance of the class/inner class\r\n",
              "arguments": [

              ]
            },
            {
              "name": "get_loaded_class",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_loaded_class()",
              "description": " Can't call it get_class because that is reserved so it gets this ugly name.\r\n Loads up the class and then any inner classes to give back a reference to\r\n the desired Inner class (if there is any)\r\n",
              "arguments": [

              ]
            },
            {
              "name": "to_s",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func to_s()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_path",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_path()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_subpath",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_subpath()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "has_subpath",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func has_subpath()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_extends_text",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_extends_text()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_method_strategy",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_method_strategy()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "set_method_strategy",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func set_method_strategy(method_strategy)",
              "description": "",
              "arguments": [
                {
                  "name": "method_strategy",
                  "type": "var"
                }
              ]
            },
            {
              "name": "is_native",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func is_native()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "set_native_class",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func set_native_class(native_class)",
              "description": "",
              "arguments": [
                {
                  "name": "native_class",
                  "type": "var"
                }
              ]
            },
            {
              "name": "get_native_class_name",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_native_class_name()",
              "description": "",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "FileOrString",
          "path": "res://addons/gut/doubler.gd",
          "extends_class": [
            "File"
          ],
          "extends_file": "",
          "icon": "",
          "signature": "class FileOrString",
          "description": " ------------------------------------------------------------------------------\r\n Allows for interacting with a file but only creating a string.  This was done\r\n to ease the transition from files being created for doubles to loading\r\n doubles from a string.  This allows the files to be created for debugging\r\n purposes since reading a file is easier than reading a dumped out string.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "_do_file",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _do_file",
              "description": ""
            },
            {
              "name": "_contents",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _contents",
              "description": ""
            },
            {
              "name": "_path",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _path",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "open",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func open(path, mode)",
              "description": "",
              "arguments": [
                {
                  "name": "path",
                  "type": "var"
                },
                {
                  "name": "mode",
                  "type": "var"
                }
              ]
            },
            {
              "name": "close",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func close()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "store_string",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func store_string(s)",
              "description": "",
              "arguments": [
                {
                  "name": "s",
                  "type": "var"
                }
              ]
            },
            {
              "name": "get_contents",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_contents()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_path",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_path()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "load_it",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func load_it()",
              "description": "",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "PackedSceneDouble",
          "path": "res://addons/gut/doubler.gd",
          "extends_class": [
            "PackedScene"
          ],
          "extends_file": "",
          "icon": "",
          "signature": "class PackedSceneDouble",
          "description": " ------------------------------------------------------------------------------\r\n A stroke of genius if I do say so.  This allows for doubling a scene without\r\n having  to write any files.  By overloading instance we can make whatever\r\n we want.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "_script",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _script",
              "description": ""
            },
            {
              "name": "_scene",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _scene",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "set_script_obj",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func set_script_obj(obj)",
              "description": "",
              "arguments": [
                {
                  "name": "obj",
                  "type": "var"
                }
              ]
            },
            {
              "name": "instance",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func instance(edit_state = 0)",
              "description": "",
              "arguments": [
                {
                  "name": "edit_state",
                  "type": "var",
                  "default_value": 0
                }
              ]
            },
            {
              "name": "load_scene",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func load_scene(path)",
              "description": "",
              "arguments": [
                {
                  "name": "path",
                  "type": "var"
                }
              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": " ------------------------------------------------------------------------------\r\n START Doubler\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_ignored_methods",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _ignored_methods",
          "description": ""
        },
        {
          "name": "_stubber",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _stubber",
          "description": ""
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": ""
        },
        {
          "name": "_method_maker",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _method_maker",
          "description": ""
        },
        {
          "name": "_output_dir",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _output_dir",
          "description": ""
        },
        {
          "name": "_double_count",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _double_count",
          "description": " used in making files names unique\n"
        },
        {
          "name": "_spy",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _spy",
          "description": ""
        },
        {
          "name": "_gut",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _gut",
          "description": ""
        },
        {
          "name": "_strategy",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _strategy",
          "description": ""
        },
        {
          "name": "_base_script_text",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _base_script_text",
          "description": ""
        },
        {
          "name": "_make_files",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _make_files",
          "description": ""
        },
        {
          "name": "_non_super_methods",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _non_super_methods",
          "description": " These methods all call super implicitly.  Stubbing them to call super causes\r\n super to be called twice.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init(strategy)",
          "description": "",
          "arguments": [
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_indented_line",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_indented_line(indents, text)",
          "description": " ###############\r\n Private\r\n ###############\r\n",
          "arguments": [
            {
              "name": "indents",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "_stub_to_call_super",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _stub_to_call_super(obj_info, method_name)",
          "description": "",
          "arguments": [
            {
              "name": "obj_info",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_base_script_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_base_script_text(obj_info, override_path)",
          "description": "",
          "arguments": [
            {
              "name": "obj_info",
              "type": "var"
            },
            {
              "name": "override_path",
              "type": "var"
            }
          ]
        },
        {
          "name": "_write_file",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _write_file(obj_info, dest_path, override_path = null)",
          "description": "",
          "arguments": [
            {
              "name": "obj_info",
              "type": "var"
            },
            {
              "name": "dest_path",
              "type": "var"
            },
            {
              "name": "override_path",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "_double_scene_and_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _double_scene_and_script(scene_info)",
          "description": "",
          "arguments": [
            {
              "name": "scene_info",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_methods",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_methods(object_info)",
          "description": "",
          "arguments": [
            {
              "name": "object_info",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_inst_id_ref_str",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_inst_id_ref_str(inst)",
          "description": "",
          "arguments": [
            {
              "name": "inst",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_func_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_func_text(method_hash)",
          "description": "",
          "arguments": [
            {
              "name": "method_hash",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_temp_path",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_temp_path(object_info)",
          "description": " returns the path to write the double file to\r\n",
          "arguments": [
            {
              "name": "object_info",
              "type": "var"
            }
          ]
        },
        {
          "name": "_load_double",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _load_double(fileOrString)",
          "description": "",
          "arguments": [
            {
              "name": "fileOrString",
              "type": "var"
            }
          ]
        },
        {
          "name": "_double",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _double(obj_info, override_path = null)",
          "description": "",
          "arguments": [
            {
              "name": "obj_info",
              "type": "var"
            },
            {
              "name": "override_path",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "_double_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _double_script(path, make_partial, strategy)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "make_partial",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "_double_inner",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _double_inner(path, subpath, make_partial, strategy)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "subpath",
              "type": "var"
            },
            {
              "name": "make_partial",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "_double_scene",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _double_scene(path, make_partial, strategy)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "make_partial",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "_double_gdnative",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _double_gdnative(native_class, make_partial, strategy)",
          "description": "",
          "arguments": [
            {
              "name": "native_class",
              "type": "var"
            },
            {
              "name": "make_partial",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_output_dir",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_output_dir()",
          "description": " ###############\r\n Public\r\n ###############\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_output_dir",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_output_dir(output_dir)",
          "description": "",
          "arguments": [
            {
              "name": "output_dir",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_spy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_spy()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_spy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_spy(spy)",
          "description": "",
          "arguments": [
            {
              "name": "spy",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_stubber",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_stubber()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_stubber",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_stubber(stubber)",
          "description": "",
          "arguments": [
            {
              "name": "stubber",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_logger(logger)",
          "description": "",
          "arguments": [
            {
              "name": "logger",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_strategy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_strategy()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_strategy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_strategy(strategy)",
          "description": "",
          "arguments": [
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_gut",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_gut()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_gut",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_gut(gut)",
          "description": "",
          "arguments": [
            {
              "name": "gut",
              "type": "var"
            }
          ]
        },
        {
          "name": "partial_double_scene",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func partial_double_scene(path, strategy)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "double_scene",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func double_scene(path, strategy)",
          "description": " double a scene\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "double",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func double(path, strategy)",
          "description": " double a script/object\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "partial_double",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func partial_double(path, strategy)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "partial_double_inner",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func partial_double_inner(path, subpath, strategy)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "subpath",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "double_inner",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func double_inner(path, subpath, strategy)",
          "description": " double an inner class in a script\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "subpath",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "double_gdnative",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func double_gdnative(native_class)",
          "description": " must always use FULL strategy since this is a native class and you won't get\r\n any methods if you don't use FULL\r\n",
          "arguments": [
            {
              "name": "native_class",
              "type": "var"
            }
          ]
        },
        {
          "name": "partial_double_gdnative",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func partial_double_gdnative(native_class)",
          "description": " must always use FULL strategy since this is a native class and you won't get\r\n any methods if you don't use FULL\r\n",
          "arguments": [
            {
              "name": "native_class",
              "type": "var"
            }
          ]
        },
        {
          "name": "clear_output_directory",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear_output_directory()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "delete_output_directory",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func delete_output_directory()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "add_ignored_method",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_ignored_method(path, method_name)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_ignored_methods",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_ignored_methods()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_make_files",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_make_files()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_make_files",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_make_files(make_files)",
          "description": "",
          "arguments": [
            {
              "name": "make_files",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "gut.gd",
      "path": "res://addons/gut/gut.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class gut.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n View readme for usage details.\r\n ##############################################################################\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "LOG_LEVEL_ALL_ASSERTS",
          "value": 2,
          "data_type": "int",
          "signature": "const LOG_LEVEL_ALL_ASSERTS: int = 2",
          "description": ""
        },
        {
          "name": "WAITING_MESSAGE",
          "value": "/# waiting #/",
          "data_type": "String",
          "signature": "const WAITING_MESSAGE: String = \"/# waiting #/\"",
          "description": " waiting #/'\n"
        },
        {
          "name": "COMPLETED",
          "value": "completed",
          "data_type": "String",
          "signature": "const COMPLETED: String = \"completed\"",
          "description": ""
        },
        {
          "name": "LOG_LEVEL_TEST_AND_FAILURES",
          "value": 1,
          "data_type": "int",
          "signature": "const LOG_LEVEL_TEST_AND_FAILURES: int = 1",
          "description": " ###########################\r\n Other Vars\r\n ###########################\r\n"
        },
        {
          "name": "PAUSE_MESSAGE",
          "value": "/# Pausing.  Press continue button...#/",
          "data_type": "String",
          "signature": "const PAUSE_MESSAGE: String = \"/# Pausing.  Press continue button...#/\"",
          "description": " Pausing.  Press continue button...#/'\n"
        },
        {
          "name": "LOG_LEVEL_FAIL_ONLY",
          "value": 0,
          "data_type": "int",
          "signature": "const LOG_LEVEL_FAIL_ONLY: int = 0",
          "description": " ###########################\r\n Other Vars\r\n ###########################\r\n"
        },
        {
          "name": "SIGNAL_TESTS_FINISHED",
          "value": "tests_finished",
          "data_type": "String",
          "signature": "const SIGNAL_TESTS_FINISHED: String = \"tests_finished\"",
          "description": ""
        },
        {
          "name": "SIGNAL_STOP_YIELD_BEFORE_TEARDOWN",
          "value": "stop_yield_before_teardown",
          "data_type": "String",
          "signature": "const SIGNAL_STOP_YIELD_BEFORE_TEARDOWN: String = \"stop_yield_before_teardown\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_select_script",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _select_script",
          "description": " -- Settings --\r\n"
        },
        {
          "name": "_tests_like",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _tests_like",
          "description": " -- Settings --\r\n"
        },
        {
          "name": "_inner_class_name",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _inner_class_name",
          "description": ""
        },
        {
          "name": "_should_maximize",
          "data_type": "var",
          "default_value": null,
          "setter": "set_should_maximize",
          "getter": "get_should_maximize",
          "export": false,
          "signature": "var _should_maximize",
          "description": ""
        },
        {
          "name": "_log_level",
          "data_type": "var",
          "default_value": null,
          "setter": "set_log_level",
          "getter": "get_log_level",
          "export": false,
          "signature": "var _log_level",
          "description": ""
        },
        {
          "name": "_disable_strict_datatype_checks",
          "data_type": "var",
          "default_value": null,
          "setter": "disable_strict_datatype_checks",
          "getter": "is_strict_datatype_checks_disabled",
          "export": false,
          "signature": "var _disable_strict_datatype_checks",
          "description": ""
        },
        {
          "name": "_test_prefix",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _test_prefix",
          "description": ""
        },
        {
          "name": "_file_prefix",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _file_prefix",
          "description": ""
        },
        {
          "name": "_file_extension",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _file_extension",
          "description": ""
        },
        {
          "name": "_inner_class_prefix",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _inner_class_prefix",
          "description": ""
        },
        {
          "name": "_temp_directory",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _temp_directory",
          "description": ""
        },
        {
          "name": "_export_path",
          "data_type": "var",
          "default_value": null,
          "setter": "set_export_path",
          "getter": "get_export_path",
          "export": false,
          "signature": "var _export_path",
          "description": ""
        },
        {
          "name": "_include_subdirectories",
          "data_type": "var",
          "default_value": null,
          "setter": "set_include_subdirectories",
          "getter": "get_include_subdirectories",
          "export": false,
          "signature": "var _include_subdirectories",
          "description": ""
        },
        {
          "name": "_double_strategy",
          "data_type": "var",
          "default_value": null,
          "setter": "set_double_strategy",
          "getter": "get_double_strategy",
          "export": false,
          "signature": "var _double_strategy",
          "description": ""
        },
        {
          "name": "_pre_run_script",
          "data_type": "var",
          "default_value": null,
          "setter": "set_pre_run_script",
          "getter": "get_pre_run_script",
          "export": false,
          "signature": "var _pre_run_script",
          "description": ""
        },
        {
          "name": "_post_run_script",
          "data_type": "var",
          "default_value": null,
          "setter": "set_post_run_script",
          "getter": "get_post_run_script",
          "export": false,
          "signature": "var _post_run_script",
          "description": ""
        },
        {
          "name": "_color_output",
          "data_type": "var",
          "default_value": null,
          "setter": "set_color_output",
          "getter": "get_color_output",
          "export": false,
          "signature": "var _color_output",
          "description": ""
        },
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": ""
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": ""
        },
        {
          "name": "_strutils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _strutils",
          "description": ""
        },
        {
          "name": "_deprecated_tracker",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _deprecated_tracker",
          "description": " Used to prevent multiple messages for deprecated setup/teardown messages\r\n"
        },
        {
          "name": "_pre_run_script_instance",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _pre_run_script_instance",
          "description": " The instance that is created from _pre_run_script.  Accessible from\r\n get_pre_run_script_instance.\r\n"
        },
        {
          "name": "_post_run_script_instance",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _post_run_script_instance",
          "description": " The instance that is created from _pre_run_script.  Accessible from\r\n get_pre_run_script_instance.\r\n This is not used except in tests.\n"
        },
        {
          "name": "_script_name",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _script_name",
          "description": ""
        },
        {
          "name": "_test_collector",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _test_collector",
          "description": ""
        },
        {
          "name": "_test_script_objects",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _test_script_objects",
          "description": " The instanced scripts.  This is populated as the scripts are run.\r\n"
        },
        {
          "name": "_waiting",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _waiting",
          "description": ""
        },
        {
          "name": "_done",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _done",
          "description": ""
        },
        {
          "name": "_is_running",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _is_running",
          "description": ""
        },
        {
          "name": "_current_test",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _current_test",
          "description": ""
        },
        {
          "name": "_log_text",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _log_text",
          "description": ""
        },
        {
          "name": "_pause_before_teardown",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _pause_before_teardown",
          "description": ""
        },
        {
          "name": "_ignore_pause_before_teardown",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _ignore_pause_before_teardown",
          "description": " when true _pause_before_teardown will be ignored.  useful\r\n when batch processing and you don't want to watch.\r\n"
        },
        {
          "name": "_wait_timer",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _wait_timer",
          "description": " when true _pause_before_teardown will be ignored.  useful\r\n when batch processing and you don't want to watch.\r\n"
        },
        {
          "name": "_yield_between",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _yield_between",
          "description": ""
        },
        {
          "name": "_was_yield_method_called",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _was_yield_method_called",
          "description": ""
        },
        {
          "name": "_yield_timer",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _yield_timer",
          "description": " used when yielding to gut instead of some other\r\n signal.  Start with set_yield_time()\r\n"
        },
        {
          "name": "_unit_test_name",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _unit_test_name",
          "description": ""
        },
        {
          "name": "_new_summary",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _new_summary",
          "description": ""
        },
        {
          "name": "_yielding_to",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _yielding_to",
          "description": ""
        },
        {
          "name": "_stubber",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _stubber",
          "description": ""
        },
        {
          "name": "_doubler",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _doubler",
          "description": ""
        },
        {
          "name": "_spy",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _spy",
          "description": ""
        },
        {
          "name": "_gui",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _gui",
          "description": ""
        },
        {
          "name": "_orphan_counter",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _orphan_counter",
          "description": ""
        },
        {
          "name": "_autofree",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _autofree",
          "description": ""
        },
        {
          "name": "_parameter_handler",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _parameter_handler",
          "description": " This is populated by test.gd each time a paramterized test is encountered\r\n for the first time.\r\n"
        },
        {
          "name": "_cancel_import",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _cancel_import",
          "description": " Used to cancel importing scripts if an error has occurred in the setup.  This\r\n prevents tests from being run if they were exported and ensures that the\r\n error displayed is seen since importing generates a lot of text.\r\n"
        },
        {
          "name": "_before_all_test_obj",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _before_all_test_obj",
          "description": " Used for proper assert tracking and printing during before_all\r\n"
        },
        {
          "name": "_after_all_test_obj",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _after_all_test_obj",
          "description": " Used for proper assert tracking and printing during before_all\r\n Used for proper assert tracking and printing during after_all\r\n"
        },
        {
          "name": "_should_print_versions",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _should_print_versions",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n used to cut down on output in tests.\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " ------------------------------------------------------------------------------\r\n Initialize controls\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_notification",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _notification(what)",
          "description": " ------------------------------------------------------------------------------\r\n Runs right before free is called.  Can't override `free`.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "what",
              "type": "var"
            }
          ]
        },
        {
          "name": "_print_versions",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _print_versions(send_all = true)",
          "description": "",
          "arguments": [
            {
              "name": "send_all",
              "type": "var",
              "default_value": true
            }
          ]
        },
        {
          "name": "_setup_gui",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _setup_gui()",
          "description": " ##############################################################################\r\n\r\n GUI Events and setup\r\n\r\n ##############################################################################\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_add_scripts_to_gui",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _add_scripts_to_gui()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_run_one",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_run_one(index)",
          "description": "",
          "arguments": [
            {
              "name": "index",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_new_gui_run_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_new_gui_run_script(index)",
          "description": "",
          "arguments": [
            {
              "name": "index",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_new_gui_end_pause",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_new_gui_end_pause()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_new_gui_ignore_pause",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_new_gui_ignore_pause(should)",
          "description": "",
          "arguments": [
            {
              "name": "should",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_log_level_changed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_log_level_changed(value)",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "_yielding_callback",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _yielding_callback(from_obj = false)",
          "description": "####################\r\n\r\n Events\r\n\r\n####################\r\n ------------------------------------------------------------------------------\r\n Timeout for the built in timer.  emits the timeout signal.  Start timer\r\n with set_yield_time()\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "from_obj",
              "type": "var",
              "default_value": false
            }
          ]
        },
        {
          "name": "_on_test_script_yield_completed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_test_script_yield_completed()",
          "description": " ------------------------------------------------------------------------------\r\n completed signal for GDScriptFucntionState returned from a test script that\r\n has yielded\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_log_test_children_warning",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _log_test_children_warning(test_script)",
          "description": "####################\r\n\r\n Private\r\n\r\n####################\r\n",
          "arguments": [
            {
              "name": "test_script",
              "type": "var"
            }
          ]
        },
        {
          "name": "_print_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _print_summary()",
          "description": " ------------------------------------------------------------------------------\r\n Convert the _summary dictionary into text\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_validate_hook_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _validate_hook_script(path)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "_run_hook_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _run_hook_script(inst)",
          "description": " ------------------------------------------------------------------------------\r\n Runs a hook script.  Script must exist, and must extend\r\n res://addons/gut/hook_script.gd\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "inst",
              "type": "var"
            }
          ]
        },
        {
          "name": "_init_run",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init_run()",
          "description": " ------------------------------------------------------------------------------\r\n Initialize variables for each run of a single test script.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_end_run",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _end_run()",
          "description": " ------------------------------------------------------------------------------\r\n Print out run information and close out the run.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_is_function_state",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _is_function_state(script_result)",
          "description": " ------------------------------------------------------------------------------\r\n Checks the passed in thing to see if it is a \"function state\" object that gets\r\n returned when a function yields.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "script_result",
              "type": "var"
            }
          ]
        },
        {
          "name": "_print_script_heading",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _print_script_heading(script)",
          "description": " ------------------------------------------------------------------------------\r\n Print out the heading for a new script\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "script",
              "type": "var"
            }
          ]
        },
        {
          "name": "_should_yield_now",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _should_yield_now()",
          "description": " ------------------------------------------------------------------------------\r\n Just gets more logic out of _test_the_scripts.  Decides if we should yield after\r\n this test based on flags and counters.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_does_class_name_match",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _does_class_name_match(the_class_name, script_class_name)",
          "description": " ------------------------------------------------------------------------------\r\n Yes if the class name is null or the script's class name includes class_name\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "the_class_name",
              "type": "var"
            },
            {
              "name": "script_class_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_setup_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _setup_script(test_script)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "test_script",
              "type": "var"
            }
          ]
        },
        {
          "name": "_do_yield_between",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _do_yield_between(time)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "time",
              "type": "var"
            }
          ]
        },
        {
          "name": "_wait_for_done",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _wait_for_done(result)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "result",
              "type": "var"
            }
          ]
        },
        {
          "name": "_wait_for_continue_button",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _wait_for_continue_button()",
          "description": " ------------------------------------------------------------------------------\r\n returns self so it can be integrated into the yield call.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_call_deprecated_script_method",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _call_deprecated_script_method(script, method, alt)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "script",
              "type": "var"
            },
            {
              "name": "method",
              "type": "var"
            },
            {
              "name": "alt",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_indexes_matching_script_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_indexes_matching_script_name(name)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_indexes_matching_path",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_indexes_matching_path(path)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "_run_parameterized_test",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _run_parameterized_test(test_script, test_name)",
          "description": " ------------------------------------------------------------------------------\r\n Execute all calls of a parameterized test.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "test_script",
              "type": "var"
            },
            {
              "name": "test_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_run_test",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _run_test(script_inst, test_name)",
          "description": " ------------------------------------------------------------------------------\r\n Runs a single test given a test.gd instance and the name of the test to run.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "script_inst",
              "type": "var"
            },
            {
              "name": "test_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_call_before_all",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _call_before_all(test_script)",
          "description": " ------------------------------------------------------------------------------\r\n Calls after_all on the passed in test script and takes care of settings so all\r\n logger output appears indented and with a proper heading\r\n\r\n Calls both pre-all-tests methods until prerun_setup is removed\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "test_script",
              "type": "var"
            }
          ]
        },
        {
          "name": "_call_after_all",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _call_after_all(test_script)",
          "description": " ------------------------------------------------------------------------------\r\n Calls after_all on the passed in test script and takes care of settings so all\r\n logger output appears indented and with a proper heading\r\n\r\n Calls both post-all-tests methods until postrun_teardown is removed.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "test_script",
              "type": "var"
            }
          ]
        },
        {
          "name": "_test_the_scripts",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _test_the_scripts(indexes)",
          "description": " ------------------------------------------------------------------------------\r\n Run all tests in a script.  This is the core logic for running tests.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "indexes",
              "type": "var"
            }
          ]
        },
        {
          "name": "_pass",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _pass(text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_fail",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _fail(text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_extract_line_number",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _extract_line_number(current_test)",
          "description": " ------------------------------------------------------------------------------\r\n Extracts the line number from curren stacktrace by matching the test case name\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "current_test",
              "type": "var"
            }
          ]
        },
        {
          "name": "_pending",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _pending(text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_files",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_files(path, prefix, suffix)",
          "description": " ------------------------------------------------------------------------------\r\n Gets all the files in a directory and all subdirectories if get_include_subdirectories\r\n is true.  The files returned are all sorted by name.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "prefix",
              "type": "var"
            },
            {
              "name": "suffix",
              "type": "var"
            }
          ]
        },
        {
          "name": "p",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func p(text, level = 0, NOT_USED_ANYMORE = -123)",
          "description": "########################\r\n\r\n public\r\n\r\n########################\r\n ------------------------------------------------------------------------------\r\n Conditionally prints the text to the console/results variable based on the\r\n current log level and what level is passed in.  Whenever currently in a test,\r\n the text will be indented under the test.  It can be further indented if\r\n desired.\r\n\r\n The first time output is generated when in a test, the test name will be\r\n printed.\r\n\r\n NOT_USED_ANYMORE was indent level.  This was deprecated in 7.0.0.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "level",
              "type": "var",
              "default_value": 0
            },
            {
              "name": "NOT_USED_ANYMORE",
              "type": "var",
              "default_value": -123
            }
          ]
        },
        {
          "name": "get_minimum_size",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_minimum_size()",
          "description": "###############\r\n\r\n RUN TESTS/ADD SCRIPTS\r\n\r\n###############\r\n",
          "arguments": [

          ]
        },
        {
          "name": "test_scripts",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_scripts(run_rest = false)",
          "description": " ------------------------------------------------------------------------------\r\n Runs all the scripts that were added using add_script\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "run_rest",
              "type": "var",
              "default_value": false
            }
          ]
        },
        {
          "name": "run_tests",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func run_tests(run_rest = false)",
          "description": " alias\r\n",
          "arguments": [
            {
              "name": "run_rest",
              "type": "var",
              "default_value": false
            }
          ]
        },
        {
          "name": "test_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_script(script)",
          "description": " ------------------------------------------------------------------------------\r\n Runs a single script passed in.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "script",
              "type": "var"
            }
          ]
        },
        {
          "name": "add_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_script(script)",
          "description": " ------------------------------------------------------------------------------\r\n Adds a script to be run when test_scripts called.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "script",
              "type": "var"
            }
          ]
        },
        {
          "name": "add_directory",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_directory(path, prefix, suffix)",
          "description": " ------------------------------------------------------------------------------\r\n Add all scripts in the specified directory that start with the prefix and end\r\n with the suffix.  Does not look in sub directories.  Can be called multiple\r\n times.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "prefix",
              "type": "var"
            },
            {
              "name": "suffix",
              "type": "var"
            }
          ]
        },
        {
          "name": "select_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func select_script(script_name)",
          "description": " ------------------------------------------------------------------------------\r\n This will try to find a script in the list of scripts to test that contains\r\n the specified script name.  It does not have to be a full match.  It will\r\n select the first matching occurrence so that this script will run when run_tests\r\n is called.  Works the same as the select_this_one option of add_script.\r\n\r\n returns whether it found a match or not\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "script_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "export_tests",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func export_tests(path)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "import_tests",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func import_tests(path)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "import_tests_if_none_found",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func import_tests_if_none_found()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "export_if_tests_found",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func export_if_tests_found()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_should_maximize",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_should_maximize(should)",
          "description": " ------------------------------------------------------------------------------\r\n Maximize test runner window to fit the viewport.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "should",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_should_maximize",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_should_maximize()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "maximize",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func maximize()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "disable_strict_datatype_checks",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func disable_strict_datatype_checks(should)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "should",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_strict_datatype_checks_disabled",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_strict_datatype_checks_disabled()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "end_yielded_test",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func end_yielded_test()",
          "description": " ------------------------------------------------------------------------------\r\n Pauses the test and waits for you to press a confirmation button.  Useful when\r\n you want to watch a test play out onscreen or inspect results.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "clear_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear_text()",
          "description": " ------------------------------------------------------------------------------\r\n Clears the text of the text box.  This resets all counters.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_test_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_test_count()",
          "description": " ------------------------------------------------------------------------------\r\n Get the number of tests that were ran\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_assert_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_assert_count()",
          "description": " ------------------------------------------------------------------------------\r\n Get the number of assertions that were made\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_pass_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_pass_count()",
          "description": " ------------------------------------------------------------------------------\r\n Get the number of assertions that passed\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_fail_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_fail_count()",
          "description": " ------------------------------------------------------------------------------\r\n Get the number of assertions that failed\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_pending_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_pending_count()",
          "description": " ------------------------------------------------------------------------------\r\n Get the number of tests flagged as pending\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_result_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_result_text()",
          "description": " ------------------------------------------------------------------------------\r\n Get the results of all tests ran as text.  This string is the same as is\r\n displayed in the text box, and similar to what is printed to the console.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_log_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_log_level(level)",
          "description": " ------------------------------------------------------------------------------\r\n Set the log level.  Use one of the various LOG_LEVEL_* constants.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "level",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_log_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_log_level()",
          "description": " ------------------------------------------------------------------------------\r\n Get the current log level.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "pause_before_teardown",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func pause_before_teardown()",
          "description": " ------------------------------------------------------------------------------\r\n Call this method to make the test pause before teardown so that you can inspect\r\n anything that you have rendered to the screen.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_ignore_pause_before_teardown",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_ignore_pause_before_teardown(should_ignore)",
          "description": " ------------------------------------------------------------------------------\r\n For batch processing purposes, you may want to ignore any calls to\r\n pause_before_teardown that you forgot to remove.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "should_ignore",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_ignore_pause_before_teardown",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_ignore_pause_before_teardown()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_yield_between_tests",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_yield_between_tests(should)",
          "description": " ------------------------------------------------------------------------------\r\n Set to true so that painting of the screen will occur between tests.  Allows you\r\n to see the output as tests occur.  Especially useful with long running tests that\r\n make it appear as though it has humg.\r\n\r\n NOTE:  not compatible with 1.0 so this is disabled by default.  This will\r\n change in future releases.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "should",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_yield_between_tests",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_yield_between_tests()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "simulate",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func simulate(obj, times, delta)",
          "description": " ------------------------------------------------------------------------------\r\n Call _process or _fixed_process, if they exist, on obj and all it's children\r\n and their children and so and so forth.  Delta will be passed through to all\r\n the _process or _fixed_process methods.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "times",
              "type": "var"
            },
            {
              "name": "delta",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_yield_time",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_yield_time(time, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Starts an internal timer with a timeout of the passed in time.  A 'timeout'\r\n signal will be sent when the timer ends.  Returns itself so that it can be\r\n used in a call to yield...cutting down on lines of code.\r\n\r\n Example, yield to the Gut object for 10 seconds:\r\n  yield(gut.set_yield_time(10), 'timeout')\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "time",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "set_yield_signal_or_time",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_yield_signal_or_time(obj, signal_name, max_wait, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "max_wait",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_unit_test_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_unit_test_name()",
          "description": " ------------------------------------------------------------------------------\r\n get the specific unit test that should be run\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_unit_test_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_unit_test_name(test_name)",
          "description": " ------------------------------------------------------------------------------\r\n set the specific unit test that should be run.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "test_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "file_touch",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func file_touch(path)",
          "description": " ------------------------------------------------------------------------------\r\n Creates an empty file at the specified path\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "file_delete",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func file_delete(path)",
          "description": " ------------------------------------------------------------------------------\r\n deletes the file at the specified path\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_file_empty",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_file_empty(path)",
          "description": " ------------------------------------------------------------------------------\r\n Checks to see if the passed in file has any data in it.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_file_as_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_file_as_text(path)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "directory_delete_files",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func directory_delete_files(path)",
          "description": " ------------------------------------------------------------------------------\r\n deletes all files in a given directory\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_current_script_object",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_current_script_object()",
          "description": " ------------------------------------------------------------------------------\r\n Returns the instantiated script object that is currently being run.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_current_test_object",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_current_test_object()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_stubber",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_stubber()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_doubler",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_doubler()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_spy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_spy()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_temp_directory",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_temp_directory()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_temp_directory",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_temp_directory(temp_directory)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "temp_directory",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_inner_class_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_inner_class_name()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_inner_class_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_inner_class_name(inner_class_name)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "inner_class_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_summary()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_double_strategy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_double_strategy()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_double_strategy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_double_strategy(double_strategy)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "double_strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_include_subdirectories",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_include_subdirectories()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_logger(logger)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "logger",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_include_subdirectories",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_include_subdirectories(include_subdirectories)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "include_subdirectories",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_test_collector",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_test_collector()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_export_path",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_export_path()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_export_path",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_export_path(export_path)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "export_path",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_version",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_version()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_pre_run_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_pre_run_script()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_pre_run_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_pre_run_script(pre_run_script)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "pre_run_script",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_post_run_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_post_run_script()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_post_run_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_post_run_script(post_run_script)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "post_run_script",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_pre_run_script_instance",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_pre_run_script_instance()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_post_run_script_instance",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_post_run_script_instance()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_color_output",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_color_output()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_color_output",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_color_output(color_output)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "color_output",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_parameter_handler",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_parameter_handler()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_parameter_handler",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_parameter_handler(parameter_handler)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "parameter_handler",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_gui",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_gui()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_orphan_counter",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_orphan_counter()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "show_orphans",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func show_orphans(should)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "should",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_autofree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_autofree()",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "GutScene.gd",
      "path": "res://addons/gut/GutScene.gd",
      "extends_class": [
        "Panel"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class GutScene.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "DEFAULT_TITLE",
          "value": "Gut: The Godot Unit Testing tool.",
          "data_type": "String",
          "signature": "const DEFAULT_TITLE: String = \"Gut: The Godot Unit Testing tool.\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_script_list",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _script_list",
          "description": ""
        },
        {
          "name": "_nav",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _nav",
          "description": ""
        },
        {
          "name": "_progress",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _progress",
          "description": ""
        },
        {
          "name": "_summary",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _summary",
          "description": ""
        },
        {
          "name": "_extras",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _extras",
          "description": ""
        },
        {
          "name": "_ignore_pauses",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _ignore_pauses",
          "description": ""
        },
        {
          "name": "_continue_button",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _continue_button",
          "description": ""
        },
        {
          "name": "_text_box",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _text_box",
          "description": ""
        },
        {
          "name": "_titlebar",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _titlebar",
          "description": ""
        },
        {
          "name": "_user_files",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _user_files",
          "description": ""
        },
        {
          "name": "_mouse",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _mouse",
          "description": ""
        },
        {
          "name": "_is_running",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _is_running",
          "description": ""
        },
        {
          "name": "_start_time",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _start_time",
          "description": ""
        },
        {
          "name": "_time",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _time",
          "description": ""
        },
        {
          "name": "_pre_maximize_rect",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _pre_maximize_rect",
          "description": ""
        },
        {
          "name": "_font_size",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _font_size",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "end_pause",
          "arguments": [

          ],
          "signature": "signal end_pause()",
          "description": ""
        },
        {
          "name": "ignore_pause",
          "arguments": [

          ],
          "signature": "signal ignore_pause()",
          "description": ""
        },
        {
          "name": "log_level_changed",
          "arguments": [

          ],
          "signature": "signal log_level_changed()",
          "description": ""
        },
        {
          "name": "run_script",
          "arguments": [

          ],
          "signature": "signal run_script()",
          "description": ""
        },
        {
          "name": "run_single_script",
          "arguments": [

          ],
          "signature": "signal run_single_script()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "elapsed_time_as_str",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func elapsed_time_as_str()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_process",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _process(_delta)",
          "description": "",
          "arguments": [
            {
              "name": "_delta",
              "type": "var"
            }
          ]
        },
        {
          "name": "_draw",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _draw()",
          "description": " needs get_size()\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_Maximize_draw",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Maximize_draw()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_ShowExtras_draw",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ShowExtras_draw()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_Run_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Run_pressed()",
          "description": " ####################\r\n GUI Events\r\n ####################\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_CurrentScript_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_CurrentScript_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_Previous_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Previous_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_Next_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Next_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_LogLevelSlider_value_changed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_LogLevelSlider_value_changed(_value)",
          "description": "",
          "arguments": [
            {
              "name": "_value",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_Continue_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Continue_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_IgnorePause_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_IgnorePause_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_RunSingleScript_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_RunSingleScript_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_ScriptsList_item_selected",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ScriptsList_item_selected(index)",
          "description": "",
          "arguments": [
            {
              "name": "index",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_TitleBar_mouse_entered",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_TitleBar_mouse_entered()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_TitleBar_mouse_exited",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_TitleBar_mouse_exited()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_input",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _input(event)",
          "description": "",
          "arguments": [
            {
              "name": "event",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_ResizeHandle_mouse_entered",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ResizeHandle_mouse_entered()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_ResizeHandle_mouse_exited",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ResizeHandle_mouse_exited()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_RichTextLabel_gui_input",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_RichTextLabel_gui_input(ev)",
          "description": "",
          "arguments": [
            {
              "name": "ev",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_Copy_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Copy_pressed()",
          "description": " leaving this b/c it is wired up and might have to send\r\n more signals through\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_ShowExtras_toggled",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ShowExtras_toggled(button_pressed)",
          "description": "",
          "arguments": [
            {
              "name": "button_pressed",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_Maximize_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Maximize_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_run_mode",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _run_mode(is_running = true)",
          "description": " ####################\r\n Private\r\n ####################\r\n",
          "arguments": [
            {
              "name": "is_running",
              "type": "var",
              "default_value": true
            }
          ]
        },
        {
          "name": "_select_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _select_script(index)",
          "description": "",
          "arguments": [
            {
              "name": "index",
              "type": "var"
            }
          ]
        },
        {
          "name": "_toggle_scripts",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _toggle_scripts()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_show_scripts",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _show_scripts()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_hide_scripts",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _hide_scripts()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_update_controls",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _update_controls()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_update_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _update_summary()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "run_mode",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func run_mode(is_running = true)",
          "description": " ####################\r\n Public\r\n ####################\r\n",
          "arguments": [
            {
              "name": "is_running",
              "type": "var",
              "default_value": true
            }
          ]
        },
        {
          "name": "set_scripts",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_scripts(scripts)",
          "description": "",
          "arguments": [
            {
              "name": "scripts",
              "type": "var"
            }
          ]
        },
        {
          "name": "select_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func select_script(index)",
          "description": "",
          "arguments": [
            {
              "name": "index",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_selected_index",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_selected_index()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_log_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_log_level()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_log_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_log_level(value)",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_ignore_pause",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_ignore_pause(should)",
          "description": "",
          "arguments": [
            {
              "name": "should",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_ignore_pause",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_ignore_pause()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_text_box",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_text_box()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "end_run",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func end_run()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_progress_script_max",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_progress_script_max(value)",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_progress_script_value",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_progress_script_value(value)",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_progress_test_max",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_progress_test_max(value)",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_progress_test_value",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_progress_test_value(value)",
          "description": "",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "clear_progress",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear_progress()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "pause",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func pause()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_title",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_title(title = null)",
          "description": "",
          "arguments": [
            {
              "name": "title",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "add_passing",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_passing(amount = 1)",
          "description": "",
          "arguments": [
            {
              "name": "amount",
              "type": "var",
              "default_value": 1
            }
          ]
        },
        {
          "name": "add_failing",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_failing(amount = 1)",
          "description": "",
          "arguments": [
            {
              "name": "amount",
              "type": "var",
              "default_value": 1
            }
          ]
        },
        {
          "name": "clear_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear_summary()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "maximize",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func maximize()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "clear_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear_text()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "scroll_to_bottom",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func scroll_to_bottom()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_set_font_size_for_rtl",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _set_font_size_for_rtl(rtl, new_size)",
          "description": "_text_box.cursor_set_line(_gui.get_text_box().get_line_count())\r\n",
          "arguments": [
            {
              "name": "rtl",
              "type": "var"
            },
            {
              "name": "new_size",
              "type": "var"
            }
          ]
        },
        {
          "name": "_set_fonts_for_rtl",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _set_fonts_for_rtl(rtl, base_font_name)",
          "description": "",
          "arguments": [
            {
              "name": "rtl",
              "type": "var"
            },
            {
              "name": "base_font_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_font_size",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_font_size(new_size)",
          "description": "",
          "arguments": [
            {
              "name": "new_size",
              "type": "var"
            }
          ]
        },
        {
          "name": "_set_font",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _set_font(rtl, font_name, custom_name)",
          "description": "",
          "arguments": [
            {
              "name": "rtl",
              "type": "var"
            },
            {
              "name": "font_name",
              "type": "var"
            },
            {
              "name": "custom_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_set_all_fonts_in_ftl",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _set_all_fonts_in_ftl(ftl, base_name)",
          "description": "",
          "arguments": [
            {
              "name": "ftl",
              "type": "var"
            },
            {
              "name": "base_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_font",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_font(base_name)",
          "description": "",
          "arguments": [
            {
              "name": "base_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_default_font_color",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_default_font_color(color)",
          "description": "",
          "arguments": [
            {
              "name": "color",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_background_color",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_background_color(color)",
          "description": "",
          "arguments": [
            {
              "name": "color",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_UserFiles_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_UserFiles_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_waiting_label",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_waiting_label()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "gut_cmdln.gd",
      "path": "res://addons/gut/gut_cmdln.gd",
      "extends_class": [
        "SceneTree"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class gut_cmdln.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Description\r\n -----------\r\n Command line interface for the GUT unit testing tool.  Allows you to run tests\r\n from the command line instead of running a scene.  Place this script along with\r\n gut.gd into your scripts directory at the root of your project.  Once there you\r\n can run this script (from the root of your project) using the following command:\r\n \tgodot -s -d test/gut/gut_cmdln.gd\r\n\r\n See the readme for a list of options and examples.  You can also use the -gh\r\n option to get more information about how to use the command line interface.\r\n ##############################################################################\r\n",
      "sub_classes": [
        {
          "name": "OptionResolver",
          "path": "res://addons/gut/gut_cmdln.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class OptionResolver",
          "description": " ------------------------------------------------------------------------------\r\n Helper class to resolve the various different places where an option can\r\n be set.  Using the get_value method will enforce the order of precedence of:\r\n \t1.  command line value\r\n\t2.  config file value\r\n\t3.  default value\r\n\r\n The idea is that you set the base_opts.  That will get you a copies of the\r\n hash with null values for the other types of values.  Lower precedented hashes\r\n will punch through null values of higher precedented hashes.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "base_opts",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var base_opts",
              "description": " ------------------------------------------------------------------------------\r\n Helper class to resolve the various different places where an option can\r\n be set.  Using the get_value method will enforce the order of precedence of:\r\n \t1.  command line value\r\n\t2.  config file value\r\n\t3.  default value\r\n\r\n The idea is that you set the base_opts.  That will get you a copies of the\r\n hash with null values for the other types of values.  Lower precedented hashes\r\n will punch through null values of higher precedented hashes.\r\n ------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "cmd_opts",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var cmd_opts",
              "description": ""
            },
            {
              "name": "config_opts",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var config_opts",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "get_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_value(key)",
              "description": "",
              "arguments": [
                {
                  "name": "key",
                  "type": "var"
                }
              ]
            },
            {
              "name": "set_base_opts",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func set_base_opts(opts)",
              "description": "",
              "arguments": [
                {
                  "name": "opts",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_null_copy",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _null_copy(h)",
              "description": " creates a copy of a hash with all values null.\r\n",
              "arguments": [
                {
                  "name": "h",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_nvl",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _nvl(a, b)",
              "description": "",
              "arguments": [
                {
                  "name": "a",
                  "type": "var"
                },
                {
                  "name": "b",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_string_it",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _string_it(h)",
              "description": "",
              "arguments": [
                {
                  "name": "h",
                  "type": "var"
                }
              ]
            },
            {
              "name": "to_s",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func to_s()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_resolved_values",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_resolved_values()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "to_s_verbose",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func to_s_verbose()",
              "description": "",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [

      ],
      "members": [
        {
          "name": "Optparse",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Optparse",
          "description": ""
        },
        {
          "name": "Gut",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Gut",
          "description": ""
        },
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": " ------------------------------------------------------------------------------\r\n Here starts the actual script that uses the Options class to kick off Gut\r\n and run your tests.\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_tester",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _tester",
          "description": " ------------------------------------------------------------------------------\r\n Here starts the actual script that uses the Options class to kick off Gut\r\n and run your tests.\r\n ------------------------------------------------------------------------------\r\n instance of gut\r\n"
        },
        {
          "name": "_final_opts",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _final_opts",
          "description": " ------------------------------------------------------------------------------\r\n Here starts the actual script that uses the Options class to kick off Gut\r\n and run your tests.\r\n ------------------------------------------------------------------------------\r\n instance of gut\r\n array of command line options specified\r\n"
        },
        {
          "name": "options",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var options",
          "description": " ------------------------------------------------------------------------------\r\n Here starts the actual script that uses the Options class to kick off Gut\r\n and run your tests.\r\n ------------------------------------------------------------------------------\r\n instance of gut\r\n array of command line options specified\r\n Hash for easier access to the options in the code.  Options will be\r\n extracted into this hash and then the hash will be used afterwards so\r\n that I don't make any dumb typos and get the neat code-sense when I\r\n type a dot.\r\n"
        },
        {
          "name": "valid_fonts",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var valid_fonts",
          "description": ""
        },
        {
          "name": "_run_single",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _run_single",
          "description": " flag to indicate if only a single script should be run.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "setup_options",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func setup_options()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "extract_command_line_options",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func extract_command_line_options(from, to)",
          "description": " Parses options, applying them to the _tester or setting values\r\n in the options struct.\r\n",
          "arguments": [
            {
              "name": "from",
              "type": "var"
            },
            {
              "name": "to",
              "type": "var"
            }
          ]
        },
        {
          "name": "load_options_from_config_file",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func load_options_from_config_file(file_path, into)",
          "description": "",
          "arguments": [
            {
              "name": "file_path",
              "type": "var"
            },
            {
              "name": "into",
              "type": "var"
            }
          ]
        },
        {
          "name": "apply_options",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func apply_options(opts)",
          "description": " Apply all the options specified to _tester.  This is where the rubber meets\r\n the road.\r\n",
          "arguments": [
            {
              "name": "opts",
              "type": "var"
            }
          ]
        },
        {
          "name": "_print_gutconfigs",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _print_gutconfigs(values)",
          "description": "",
          "arguments": [
            {
              "name": "values",
              "type": "var"
            }
          ]
        },
        {
          "name": "_run_gut",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _run_gut()",
          "description": " parse options and run Gut\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_tests_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_tests_finished(should_exit, should_exit_on_success)",
          "description": " exit if option is set.\r\n",
          "arguments": [
            {
              "name": "should_exit",
              "type": "var"
            },
            {
              "name": "should_exit_on_success",
              "type": "var"
            }
          ]
        },
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init()",
          "description": " ------------------------------------------------------------------------------\r\n MAIN\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "gut_plugin.gd",
      "path": "res://addons/gut/gut_plugin.gd",
      "extends_class": [
        "EditorPlugin"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class gut_plugin.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_enter_tree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _enter_tree()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_exit_tree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _exit_tree()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "hook_script.gd",
      "path": "res://addons/gut/hook_script.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class hook_script.gd",
      "description": " ------------------------------------------------------------------------------\r\n This script is the base for custom scripts to be used in pre and post\r\n run hooks.\r\n ------------------------------------------------------------------------------\r\n This is the instance of GUT that is running the tests.  You can get\r\n information about the run from this object.  This is set by GUT when the\r\n script is instantiated.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "gut",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var gut",
          "description": " ------------------------------------------------------------------------------\r\n This script is the base for custom scripts to be used in pre and post\r\n run hooks.\r\n ------------------------------------------------------------------------------\r\n This is the instance of GUT that is running the tests.  You can get\r\n information about the run from this object.  This is set by GUT when the\r\n script is instantiated.\r\n"
        },
        {
          "name": "_exit_code",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _exit_code",
          "description": " the exit code to be used by gut_cmdln.  See set method.\r\n"
        },
        {
          "name": "_should_abort",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _should_abort",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "run",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func run()",
          "description": " Virtual method that will be called by GUT after instantiating\r\n this script.\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_exit_code",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_exit_code(code)",
          "description": " Set the exit code when running from the command line.  If not set then the\r\n default exit code will be returned (0 when no tests fail, 1 when any tests\r\n fail).\r\n",
          "arguments": [
            {
              "name": "code",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_exit_code",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_exit_code()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "abort",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func abort()",
          "description": " Usable by pre-run script to cause the run to end AFTER the run() method\r\n finishes.  post-run script will not be ran.\r\n",
          "arguments": [

          ]
        },
        {
          "name": "should_abort",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func should_abort()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "logger.gd",
      "path": "res://addons/gut/logger.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class logger.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n This class wraps around the various printers and supplies formatting for the\r\n various message types (error, warning, etc).\r\n ##############################################################################\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "types",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var types",
          "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n This class wraps around the various printers and supplies formatting for the\r\n various message types (error, warning, etc).\r\n ##############################################################################\r\n"
        },
        {
          "name": "fmts",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var fmts",
          "description": ""
        },
        {
          "name": "_type_data",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _type_data",
          "description": ""
        },
        {
          "name": "_logs",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _logs",
          "description": ""
        },
        {
          "name": "_printers",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _printers",
          "description": ""
        },
        {
          "name": "_gut",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _gut",
          "description": ""
        },
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": ""
        },
        {
          "name": "_indent_level",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _indent_level",
          "description": ""
        },
        {
          "name": "_indent_string",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _indent_string",
          "description": ""
        },
        {
          "name": "_skip_test_name_for_testing",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _skip_test_name_for_testing",
          "description": ""
        },
        {
          "name": "_less_test_names",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _less_test_names",
          "description": ""
        },
        {
          "name": "_yield_calls",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _yield_calls",
          "description": ""
        },
        {
          "name": "_last_yield_text",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _last_yield_text",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_indent_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_indent_text()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_indent_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _indent_text(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "_should_print_to_printer",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _should_print_to_printer(key_name)",
          "description": "",
          "arguments": [
            {
              "name": "key_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_print_test_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _print_test_name()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_output",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _output(text, fmt = null)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "fmt",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "_log",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _log(text, fmt)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "fmt",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_warnings",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_warnings()",
          "description": " ---------------\r\n Get Methods\r\n ---------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_errors",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_errors()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_infos",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_infos()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_debugs",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_debugs()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_deprecated",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_deprecated()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_count(log_type = null)",
          "description": "",
          "arguments": [
            {
              "name": "log_type",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "get_log_entries",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_log_entries(log_type)",
          "description": "",
          "arguments": [
            {
              "name": "log_type",
              "type": "var"
            }
          ]
        },
        {
          "name": "_output_type",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _output_type(type, text)",
          "description": " ---------------\r\n Log methods\r\n ---------------\r\n",
          "arguments": [
            {
              "name": "type",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "debug",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func debug(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "deprecated",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func deprecated(text, alt_method = null)",
          "description": " supply some text or the name of the deprecated method and the replacement.\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "alt_method",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "error",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func error(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "failed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func failed(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "info",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func info(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "orphan",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func orphan(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "passed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func passed(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "pending",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func pending(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "warn",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func warn(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "log",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func log(text = \"\", fmt)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            },
            {
              "name": "fmt",
              "type": "var"
            }
          ]
        },
        {
          "name": "lograw",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func lograw(text, fmt)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "fmt",
              "type": "var"
            }
          ]
        },
        {
          "name": "log_test_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func log_test_name()",
          "description": " Print the test name if we aren't skipping names of tests that pass (basically\r\n what _less_test_names means))\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_gut",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_gut()",
          "description": " ---------------\r\n Misc\r\n ---------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_gut",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_gut(gut)",
          "description": "",
          "arguments": [
            {
              "name": "gut",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_indent_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_indent_level()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_indent_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_indent_level(indent_level)",
          "description": "",
          "arguments": [
            {
              "name": "indent_level",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_indent_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_indent_string()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_indent_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_indent_string(indent_string)",
          "description": "",
          "arguments": [
            {
              "name": "indent_string",
              "type": "var"
            }
          ]
        },
        {
          "name": "clear",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "inc_indent",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func inc_indent()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "dec_indent",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func dec_indent()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "is_type_enabled",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_type_enabled(type)",
          "description": "",
          "arguments": [
            {
              "name": "type",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_type_enabled",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_type_enabled(type, is_enabled)",
          "description": "",
          "arguments": [
            {
              "name": "type",
              "type": "var"
            },
            {
              "name": "is_enabled",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_less_test_names",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_less_test_names()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_less_test_names",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_less_test_names(less_test_names)",
          "description": "",
          "arguments": [
            {
              "name": "less_test_names",
              "type": "var"
            }
          ]
        },
        {
          "name": "disable_printer",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func disable_printer(name, is_disabled)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            },
            {
              "name": "is_disabled",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_printer_disabled",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_printer_disabled(name)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            }
          ]
        },
        {
          "name": "disable_formatting",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func disable_formatting(is_disabled)",
          "description": "",
          "arguments": [
            {
              "name": "is_disabled",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_printer",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_printer(printer_key)",
          "description": "",
          "arguments": [
            {
              "name": "printer_key",
              "type": "var"
            }
          ]
        },
        {
          "name": "_yield_text_terminal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _yield_text_terminal(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "_end_yield_terminal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _end_yield_terminal()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_yield_text_gui",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _yield_text_gui(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "_end_yield_gui",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _end_yield_gui()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "yield_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func yield_text(text)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "end_yield",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func end_yield()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "method_maker.gd",
      "path": "res://addons/gut/method_maker.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class method_maker.gd",
      "description": " This class will generate method declaration lines based on method meta\r\n data.  It will create defaults that match the method data.\r\n\r\n --------------------\r\n function meta data\r\n --------------------\r\n name:\r\n flags:\r\n args: [{\r\n \t(class_name:),\r\n \t(hint:0),\r\n \t(hint_string:),\r\n \t(name:),\r\n \t(type:4),\r\n \t(usage:7)\r\n }]\r\n default_args []\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "PARAM_PREFIX",
          "value": "p_",
          "data_type": "String",
          "signature": "const PARAM_PREFIX: String = \"p_\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": " This class will generate method declaration lines based on method meta\r\n data.  It will create defaults that match the method data.\r\n\r\n --------------------\r\n function meta data\r\n --------------------\r\n name:\r\n flags:\r\n args: [{\r\n \t(class_name:),\r\n \t(hint:0),\r\n \t(hint_string:),\r\n \t(name:),\r\n \t(type:4),\r\n \t(usage:7)\r\n }]\r\n default_args []\r\n"
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": ""
        },
        {
          "name": "_supported_defaults",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _supported_defaults",
          "description": " TYPE_TRANSFORM2D = 8 — Variable is of type Transform2D.\r\n TYPE_PLANE = 9 — Variable is of type Plane.\r\n TYPE_QUAT = 10 — Variable is of type Quat.\r\n TYPE_AABB = 11 — Variable is of type AABB.\r\n TYPE_BASIS = 12 — Variable is of type Basis.\r\n TYPE_TRANSFORM = 13 — Variable is of type Transform.\r\n TYPE_NODE_PATH = 15 — Variable is of type NodePath.\r\n TYPE_RID = 16 — Variable is of type RID.\r\n TYPE_RAW_ARRAY = 20 — Variable is of type PoolByteArray.\r\n TYPE_INT_ARRAY = 21 — Variable is of type PoolIntArray.\r\n TYPE_REAL_ARRAY = 22 — Variable is of type PoolRealArray.\r\n TYPE_STRING_ARRAY = 23 — Variable is of type PoolStringArray.\r\n TYPE_VECTOR3_ARRAY = 25 — Variable is of type PoolVector3Array.\r\n TYPE_COLOR_ARRAY = 26 — Variable is of type PoolColorArray.\r\n TYPE_MAX = 27 — Marker for end of type constants.\r\n ------------------------------------------------------\r\n"
        },
        {
          "name": "_func_text",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _func_text",
          "description": " ###############\r\n Private\r\n ###############\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_is_supported_default",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _is_supported_default(type_flag)",
          "description": "",
          "arguments": [
            {
              "name": "type_flag",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_arg_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_arg_text(method_meta)",
          "description": " Creates a list of parameters with defaults of null unless a default value is\r\n found in the metadata.  If a default is found in the meta then it is used if\r\n it is one we know how support.\r\n\r\n If a default is found that we don't know how to handle then this method will\r\n return null.\r\n",
          "arguments": [
            {
              "name": "method_meta",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_function_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_function_text(meta)",
          "description": " ###############\r\n Public\r\n ###############\r\n Creates a delceration for a function based off of function metadata.  All\r\n types whose defaults are supported will have their values.  If a datatype\r\n is not supported and the parameter has a default, a warning message will be\r\n printed and the declaration will return null.\r\n",
          "arguments": [
            {
              "name": "meta",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_super_call_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_super_call_text(meta)",
          "description": " creates a call to the function in meta in the super's class.\r\n",
          "arguments": [
            {
              "name": "meta",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_spy_call_parameters_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_spy_call_parameters_text(meta)",
          "description": "",
          "arguments": [
            {
              "name": "meta",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_logger(logger)",
          "description": "",
          "arguments": [
            {
              "name": "logger",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "one_to_many.gd",
      "path": "res://addons/gut/one_to_many.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class one_to_many.gd",
      "description": " ------------------------------------------------------------------------------\r\n This datastructure represents a simple one-to-many relationship.  It manages\r\n a dictionary of value/array pairs.  It ignores duplicates of both the \"one\"\r\n and the \"many\".\r\n ------------------------------------------------------------------------------\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_items",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _items",
          "description": " ------------------------------------------------------------------------------\r\n This datastructure represents a simple one-to-many relationship.  It manages\r\n a dictionary of value/array pairs.  It ignores duplicates of both the \"one\"\r\n and the \"many\".\r\n ------------------------------------------------------------------------------\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "size",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func size(one = null)",
          "description": " return the size of _items or the size of an element in _items if \"one\" was\r\n specified.\r\n",
          "arguments": [
            {
              "name": "one",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "add",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add(one, many_item)",
          "description": " Add an element to \"one\" if it does not already exist\r\n",
          "arguments": [
            {
              "name": "one",
              "type": "var"
            },
            {
              "name": "many_item",
              "type": "var"
            }
          ]
        },
        {
          "name": "clear",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "has",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func has(one, many_item)",
          "description": "",
          "arguments": [
            {
              "name": "one",
              "type": "var"
            },
            {
              "name": "many_item",
              "type": "var"
            }
          ]
        },
        {
          "name": "to_s",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func to_s()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "optparse.gd",
      "path": "res://addons/gut/optparse.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class optparse.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Description\r\n -----------\r\n Command line interface for the GUT unit testing tool.  Allows you to run tests\r\n from the command line instead of running a scene.  Place this script along with\r\n gut.gd into your scripts directory at the root of your project.  Once there you\r\n can run this script (from the root of your project) using the following command:\r\n \tgodot -s -d test/gut/gut_cmdln.gd\r\n\r\n See the readme for a list of options and examples.  You can also use the -gh\r\n option to get more information about how to use the command line interface.\r\n ##############################################################################\r\n-------------------------------------------------------------------------------\r\n Parses the command line arguments supplied into an array that can then be\r\n examined and parsed based on how the gut options work.\r\n-------------------------------------------------------------------------------\r\n",
      "sub_classes": [
        {
          "name": "CmdLineParser",
          "path": "res://addons/gut/optparse.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class CmdLineParser",
          "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Description\r\n -----------\r\n Command line interface for the GUT unit testing tool.  Allows you to run tests\r\n from the command line instead of running a scene.  Place this script along with\r\n gut.gd into your scripts directory at the root of your project.  Once there you\r\n can run this script (from the root of your project) using the following command:\r\n \tgodot -s -d test/gut/gut_cmdln.gd\r\n\r\n See the readme for a list of options and examples.  You can also use the -gh\r\n option to get more information about how to use the command line interface.\r\n ##############################################################################\r\n-------------------------------------------------------------------------------\r\n Parses the command line arguments supplied into an array that can then be\r\n examined and parsed based on how the gut options work.\r\n-------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "_used_options",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _used_options",
              "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Description\r\n -----------\r\n Command line interface for the GUT unit testing tool.  Allows you to run tests\r\n from the command line instead of running a scene.  Place this script along with\r\n gut.gd into your scripts directory at the root of your project.  Once there you\r\n can run this script (from the root of your project) using the following command:\r\n \tgodot -s -d test/gut/gut_cmdln.gd\r\n\r\n See the readme for a list of options and examples.  You can also use the -gh\r\n option to get more information about how to use the command line interface.\r\n ##############################################################################\r\n-------------------------------------------------------------------------------\r\n Parses the command line arguments supplied into an array that can then be\r\n examined and parsed based on how the gut options work.\r\n-------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "_opts",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _opts",
              "description": " an array of arrays.  Each element in this array will contain an option\r\n name and if that option contains a value then it will have a sedond\r\n element.  For example:\r\n \t[[-gselect, test.gd], [-gexit]]\r\n"
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "_parse_array_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _parse_array_value(full_option)",
              "description": " Parse out multiple comma delimited values from a command line\r\n option.  Values are separated from option name with \"=\" and\r\n additional values are comma separated.\r\n",
              "arguments": [
                {
                  "name": "full_option",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_parse_option_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _parse_option_value(full_option)",
              "description": " Parse out the value of an option.  Values are separated from\r\n the option name with \"=\"\r\n",
              "arguments": [
                {
                  "name": "full_option",
                  "type": "var"
                }
              ]
            },
            {
              "name": "find_option",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func find_option(name)",
              "description": " Search _opts for an element that starts with the option name\r\n specified.\r\n",
              "arguments": [
                {
                  "name": "name",
                  "type": "var"
                }
              ]
            },
            {
              "name": "get_array_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_array_value(option)",
              "description": "",
              "arguments": [
                {
                  "name": "option",
                  "type": "var"
                }
              ]
            },
            {
              "name": "get_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_value(option)",
              "description": " returns the value of an option if it was specified, null otherwise.  This\r\n used to return the default but that became problemnatic when trying to\r\n punch through the different places where values could be specified.\r\n",
              "arguments": [
                {
                  "name": "option",
                  "type": "var"
                }
              ]
            },
            {
              "name": "was_specified",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func was_specified(option)",
              "description": " returns true if it finds the option, false if not.\r\n",
              "arguments": [
                {
                  "name": "option",
                  "type": "var"
                }
              ]
            },
            {
              "name": "get_unused_options",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_unused_options()",
              "description": " Returns any unused command line options.  I found that only the -s and\r\n script name come through from godot, all other options that godot uses\r\n are not sent through OS.get_cmdline_args().\r\n\r\n This is a onetime thing b/c i kill all items in _used_options\r\n",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "Option",
          "path": "res://addons/gut/optparse.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class Option",
          "description": "-------------------------------------------------------------------------------\r\n Simple class to hold a command line option\r\n-------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "value",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var value",
              "description": "-------------------------------------------------------------------------------\r\n Simple class to hold a command line option\r\n-------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "option_name",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var option_name",
              "description": ""
            },
            {
              "name": "default",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var default",
              "description": ""
            },
            {
              "name": "description",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var description",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init(name, default_value, desc = \"\")",
              "description": "",
              "arguments": [
                {
                  "name": "name",
                  "type": "var"
                },
                {
                  "name": "default_value",
                  "type": "var"
                },
                {
                  "name": "desc",
                  "type": "var",
                  "default_value": ""
                }
              ]
            },
            {
              "name": "pad",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func pad(to_pad, size, pad_with = \" \")",
              "description": "",
              "arguments": [
                {
                  "name": "to_pad",
                  "type": "var"
                },
                {
                  "name": "size",
                  "type": "var"
                },
                {
                  "name": "pad_with",
                  "type": "var",
                  "default_value": " "
                }
              ]
            },
            {
              "name": "to_s",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func to_s(min_space = 0)",
              "description": "",
              "arguments": [
                {
                  "name": "min_space",
                  "type": "var",
                  "default_value": 0
                }
              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [

      ],
      "members": [
        {
          "name": "options",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var options",
          "description": "-------------------------------------------------------------------------------\r\n The high level interface between this script and the command line options\r\n supplied.  Uses Option class and CmdLineParser to extract information from\r\n the command line and make it easily accessible.\r\n-------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_opts",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _opts",
          "description": "-------------------------------------------------------------------------------\r\n The high level interface between this script and the command line options\r\n supplied.  Uses Option class and CmdLineParser to extract information from\r\n the command line and make it easily accessible.\r\n-------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_banner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _banner",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "add",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add(name, default, desc)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            },
            {
              "name": "default",
              "type": "var"
            },
            {
              "name": "desc",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_value",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_value(name)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_banner",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_banner(banner)",
          "description": "",
          "arguments": [
            {
              "name": "banner",
              "type": "var"
            }
          ]
        },
        {
          "name": "print_help",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func print_help()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "print_options",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func print_options()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "parse",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func parse()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "orphan_counter.gd",
      "path": "res://addons/gut/orphan_counter.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class orphan_counter.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n This is a utility for tracking changes in the orphan count.  Each time\r\n add_counter is called it adds/resets the value in the dictionary to the\r\n current number of orphans.  Each call to get_counter will return the change\r\n in orphans since add_counter was last called.\r\n ##############################################################################\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_counters",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _counters",
          "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n This is a utility for tracking changes in the orphan count.  Each time\r\n add_counter is called it adds/resets the value in the dictionary to the\r\n current number of orphans.  Each call to get_counter will return the change\r\n in orphans since add_counter was last called.\r\n ##############################################################################\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "orphan_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func orphan_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "add_counter",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_counter(name)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_counter",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_counter(name)",
          "description": " Returns the number of orphans created since add_counter was last called for\r\n the name.  Returns -1 to avoid blowing up with an invalid name but still\r\n be somewhat visible that we've done something wrong.\r\n",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            }
          ]
        },
        {
          "name": "print_orphans",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func print_orphans(name, lgr)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            },
            {
              "name": "lgr",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "parameter_factory.gd",
      "path": "res://addons/gut/parameter_factory.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class parameter_factory.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n This is the home for all parameter creation helpers.  These functions should\r\n all return an array of values to be used as parameters for parameterized\r\n tests.\r\n ##############################################################################\r\n ------------------------------------------------------------------------------\r\n Creates an array of dictionaries.  It pairs up the names array with each set\r\n of values in values.  If more names than values are specified then the missing\r\n values will be filled with nulls.  If more values than names are specified\r\n those values will be ignored.\r\n\r\n Example:\r\n \tcreate_named_parameters(['a', 'b'], [[1, 2], ['one', 'two']]) returns\r\n\t\t[{a:1, b:2}, {a:'one', b:'two'}]\r\n\r\n \tThis allows you to increase readability of your parameterized tests:\r\n\tvar params = create_named_parameters(['a', 'b'], [[1, 2], ['one', 'two']])\r\n\tfunc test_foo(p = use_parameters(params)):\r\n\t\tassert_eq(p.a, p.b)\r\n\r\n Parameters:\r\n \tnames:  an array of names to be used as keys in the dictionaries\r\n   values:  an array of arrays of values.\r\n ------------------------------------------------------------------------------\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [
        {
          "name": "named_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func named_parameters(names, values)",
          "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n This is the home for all parameter creation helpers.  These functions should\r\n all return an array of values to be used as parameters for parameterized\r\n tests.\r\n ##############################################################################\r\n ------------------------------------------------------------------------------\r\n Creates an array of dictionaries.  It pairs up the names array with each set\r\n of values in values.  If more names than values are specified then the missing\r\n values will be filled with nulls.  If more values than names are specified\r\n those values will be ignored.\r\n\r\n Example:\r\n \tcreate_named_parameters(['a', 'b'], [[1, 2], ['one', 'two']]) returns\r\n\t\t[{a:1, b:2}, {a:'one', b:'two'}]\r\n\r\n \tThis allows you to increase readability of your parameterized tests:\r\n\tvar params = create_named_parameters(['a', 'b'], [[1, 2], ['one', 'two']])\r\n\tfunc test_foo(p = use_parameters(params)):\r\n\t\tassert_eq(p.a, p.b)\r\n\r\n Parameters:\r\n \tnames:  an array of names to be used as keys in the dictionaries\r\n   values:  an array of arrays of values.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "names",
              "type": "var"
            },
            {
              "name": "values",
              "type": "var"
            }
          ]
        }
      ]
    },
    {
      "name": "parameter_handler.gd",
      "path": "res://addons/gut/parameter_handler.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class parameter_handler.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "class parameter_handler.gd",
          "description": ""
        },
        {
          "name": "_params",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _params",
          "description": ""
        },
        {
          "name": "_call_count",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _call_count",
          "description": ""
        },
        {
          "name": "_logger",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _logger",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init(params = null)",
          "description": "",
          "arguments": [
            {
              "name": "params",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "next_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func next_parameters()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_current_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_current_parameters()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "is_done",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_done()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_logger(logger)",
          "description": "",
          "arguments": [
            {
              "name": "logger",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_call_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_call_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_parameter_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_parameter_count()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "plugin_control.gd",
      "path": "res://addons/gut/plugin_control.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class plugin_control.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n This is the control that is added via the editor.  It exposes GUT settings\r\n through the editor and delays the creation of the GUT instance until\r\n Engine.get_main_loop() works as expected.\r\n ##############################################################################\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_font_name",
          "data_type": "var",
          "default_value": "AnonymousPro",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _font_name = \"AnonymousPro\"",
          "description": " ------------------------------------------------------------------------------\r\n GUT Settings\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_font_size",
          "data_type": "var",
          "default_value": 20,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _font_size = 20",
          "description": " ------------------------------------------------------------------------------\r\n GUT Settings\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_font_color",
          "data_type": "var",
          "default_value": "0.8,0.8,0.8,1",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _font_color = \"0.8,0.8,0.8,1\"",
          "description": ""
        },
        {
          "name": "_background_color",
          "data_type": "var",
          "default_value": "0.15,0.15,0.15,1",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _background_color = \"0.15,0.15,0.15,1\"",
          "description": ""
        },
        {
          "name": "_color_output",
          "data_type": "var",
          "default_value": true,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _color_output = true",
          "description": " Enable/Disable coloring of output.\r\n"
        },
        {
          "name": "_select_script",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _select_script = \"\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n"
        },
        {
          "name": "_tests_like",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _tests_like = \"\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n"
        },
        {
          "name": "_inner_class_name",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _inner_class_name = \"\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n"
        },
        {
          "name": "_run_on_load",
          "data_type": "var",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _run_on_load = false",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n"
        },
        {
          "name": "_should_maximize",
          "data_type": "var",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _should_maximize = false",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n"
        },
        {
          "name": "_should_print_to_console",
          "data_type": "var",
          "default_value": true,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _should_print_to_console = true",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n"
        },
        {
          "name": "_show_orphans",
          "data_type": "var",
          "default_value": true,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _show_orphans = true",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n"
        },
        {
          "name": "_log_level",
          "data_type": "var",
          "default_value": 1,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _log_level = 1",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n"
        },
        {
          "name": "_yield_between_tests",
          "data_type": "var",
          "default_value": true,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _yield_between_tests = true",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n"
        },
        {
          "name": "_disable_strict_datatype_checks",
          "data_type": "var",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _disable_strict_datatype_checks = false",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n"
        },
        {
          "name": "_test_prefix",
          "data_type": "var",
          "default_value": "test_",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _test_prefix = \"test_\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n"
        },
        {
          "name": "_file_prefix",
          "data_type": "var",
          "default_value": "test_",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _file_prefix = \"test_\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n The prefix used to find test scripts.\r\n"
        },
        {
          "name": "_file_extension",
          "data_type": "var",
          "default_value": ".gd",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _file_extension = \".gd\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n The prefix used to find test scripts.\r\n The file extension for test scripts (I don't think you can change this and\r\n everythign work).\r\n"
        },
        {
          "name": "_inner_class_prefix",
          "data_type": "var",
          "default_value": "Test",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _inner_class_prefix = \"Test\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n The prefix used to find test scripts.\r\n The file extension for test scripts (I don't think you can change this and\r\n everythign work).\r\n The prefix used to find Inner Test Classes.\r\n"
        },
        {
          "name": "_temp_directory",
          "data_type": "var",
          "default_value": "user://gut_temp_directory",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _temp_directory = \"user://gut_temp_directory\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n The prefix used to find test scripts.\r\n The file extension for test scripts (I don't think you can change this and\r\n everythign work).\r\n The prefix used to find Inner Test Classes.\r\n The directory GUT will use to write any temporary files.  This isn't used\r\n much anymore since there was a change to the double creation implementation.\r\n This will be removed in a later release.\r\n"
        },
        {
          "name": "_export_path",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _export_path = \"\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n The prefix used to find test scripts.\r\n The file extension for test scripts (I don't think you can change this and\r\n everythign work).\r\n The prefix used to find Inner Test Classes.\r\n The directory GUT will use to write any temporary files.  This isn't used\r\n much anymore since there was a change to the double creation implementation.\r\n This will be removed in a later release.\r\n The path and filename for exported test information.\r\n"
        },
        {
          "name": "_include_subdirectories",
          "data_type": "var",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _include_subdirectories = false",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n The prefix used to find test scripts.\r\n The file extension for test scripts (I don't think you can change this and\r\n everythign work).\r\n The prefix used to find Inner Test Classes.\r\n The directory GUT will use to write any temporary files.  This isn't used\r\n much anymore since there was a change to the double creation implementation.\r\n This will be removed in a later release.\r\n The path and filename for exported test information.\r\n When enabled, any directory added will also include its subdirectories when\r\n GUT looks for test scripts.\r\n"
        },
        {
          "name": "_directory1",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _directory1 = \"\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n The prefix used to find test scripts.\r\n The file extension for test scripts (I don't think you can change this and\r\n everythign work).\r\n The prefix used to find Inner Test Classes.\r\n The directory GUT will use to write any temporary files.  This isn't used\r\n much anymore since there was a change to the double creation implementation.\r\n This will be removed in a later release.\r\n The path and filename for exported test information.\r\n When enabled, any directory added will also include its subdirectories when\r\n GUT looks for test scripts.\r\n Allow user to add test directories via editor.  This is done with strings\r\n instead of an array because the interface for editing arrays is really\r\n cumbersome and complicates testing because arrays set through the editor\r\n apply to ALL instances.  This also allows the user to use the built in\r\n dialog to pick a directory.\r\n"
        },
        {
          "name": "_directory2",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _directory2 = \"\"",
          "description": " Enable/Disable coloring of output.\r\n The full/partial name of a script to select upon startup\r\n The full/partial name of a test.  All tests that contain the string will be\r\n run\r\n The full/partial name of an Inner Class to be run.  All Inner Classes that\r\n contain the string will be run.\r\n Start running tests when the scene finishes loading\r\n Maximize the GUT control on startup\r\n Print output to the consol as well\r\n Display orphan counts at the end of tests/scripts.\r\n The log level.\r\n When enabled GUT will yield between tests to give the GUI time to paint.\r\n Disabling this can make the program appear to hang and can have some\r\n unwanted consequences with the timing of freeing objects\r\n When GUT compares values it first checks the types to prevent runtime errors.\r\n This behavior can be disabled if desired.  This flag was added early in\r\n development to prevent any breaking changes and will likely be removed in\r\n the future.\r\n The prefix used to find test methods.\r\n The prefix used to find test scripts.\r\n The file extension for test scripts (I don't think you can change this and\r\n everythign work).\r\n The prefix used to find Inner Test Classes.\r\n The directory GUT will use to write any temporary files.  This isn't used\r\n much anymore since there was a change to the double creation implementation.\r\n This will be removed in a later release.\r\n The path and filename for exported test information.\r\n When enabled, any directory added will also include its subdirectories when\r\n GUT looks for test scripts.\r\n Allow user to add test directories via editor.  This is done with strings\r\n instead of an array because the interface for editing arrays is really\r\n cumbersome and complicates testing because arrays set through the editor\r\n apply to ALL instances.  This also allows the user to use the built in\r\n dialog to pick a directory.\r\n"
        },
        {
          "name": "_directory3",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _directory3 = \"\"",
          "description": ""
        },
        {
          "name": "_directory4",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _directory4 = \"\"",
          "description": ""
        },
        {
          "name": "_directory5",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _directory5 = \"\"",
          "description": ""
        },
        {
          "name": "_directory6",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _directory6 = \"\"",
          "description": ""
        },
        {
          "name": "_double_strategy",
          "data_type": "var",
          "default_value": 1,
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _double_strategy = 1",
          "description": " Must match the types in _utils for double strategy\r\n"
        },
        {
          "name": "_pre_run_script",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _pre_run_script = \"\"",
          "description": " Must match the types in _utils for double strategy\r\n Path and filename to the script to run before all tests are run.\r\n"
        },
        {
          "name": "_post_run_script",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var _post_run_script = \"\"",
          "description": " Must match the types in _utils for double strategy\r\n Path and filename to the script to run before all tests are run.\r\n Path and filename to the script to run after all tests are run.\r\n"
        },
        {
          "name": "_gut",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _gut",
          "description": " ------------------------------------------------------------------------------\r\n Private stuff.\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": " ------------------------------------------------------------------------------\r\n Private stuff.\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_cancel_import",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _cancel_import",
          "description": ""
        },
        {
          "name": "_placeholder",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _placeholder",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "tests_finished",
          "arguments": [

          ],
          "signature": "signal tests_finished()",
          "description": " ------------------------------------------------------------------------------\r\n Signals\r\n ------------------------------------------------------------------------------\r\n Emitted when all the tests have finished running.\r\n"
        },
        {
          "name": "gut_ready",
          "arguments": [

          ],
          "signature": "signal gut_ready()",
          "description": " ------------------------------------------------------------------------------\r\n Signals\r\n ------------------------------------------------------------------------------\r\n Emitted when all the tests have finished running.\r\n Emitted when GUT is ready to be interacted with, and before any tests are run.\r\n"
        }
      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_resized",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_resized()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_check_for_templates",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _check_for_templates()",
          "description": " Templates can be missing if tests are exported and the export config for the\r\n project does not include '*.txt' files.  This check and related flags make\r\n sure GUT does not blow up and that the error is not lost in all the import\r\n output that is generated as well as ensuring that no tests are run.\r\n\r\n Assumption:  This is only a concern when running from the scene since you\r\n cannot run GUT from the command line in an exported game.\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_setup_gut",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _setup_gut()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_is_ready_to_go",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _is_ready_to_go(action)",
          "description": "",
          "arguments": [
            {
              "name": "action",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_tests_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_tests_finished()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_gut",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_gut()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "export_if_tests_found",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func export_if_tests_found()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "import_tests_if_none_found",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func import_tests_if_none_found()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "printers.gd",
      "path": "res://addons/gut/printers.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class printers.gd",
      "description": " ------------------------------------------------------------------------------\r\n Interface and some basic functionality for all printers.\r\n ------------------------------------------------------------------------------\r\n",
      "sub_classes": [
        {
          "name": "Printer",
          "path": "res://addons/gut/printers.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class Printer",
          "description": " ------------------------------------------------------------------------------\r\n Interface and some basic functionality for all printers.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "_format_enabled",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _format_enabled",
              "description": " ------------------------------------------------------------------------------\r\n Interface and some basic functionality for all printers.\r\n ------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "_disabled",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _disabled",
              "description": ""
            },
            {
              "name": "_printer_name",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _printer_name",
              "description": ""
            },
            {
              "name": "_show_name",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _show_name",
              "description": " used for debugging, set manually\n"
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "get_format_enabled",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_format_enabled()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "set_format_enabled",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func set_format_enabled(format_enabled)",
              "description": "",
              "arguments": [
                {
                  "name": "format_enabled",
                  "type": "var"
                }
              ]
            },
            {
              "name": "send",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func send(text, fmt = null)",
              "description": "",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                },
                {
                  "name": "fmt",
                  "type": "var",
                  "default_value": null
                }
              ]
            },
            {
              "name": "get_disabled",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_disabled()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "set_disabled",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func set_disabled(disabled)",
              "description": "",
              "arguments": [
                {
                  "name": "disabled",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_output",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _output(text)",
              "description": " --------------------\r\n Virtual Methods (some have some default behavior)\r\n --------------------\r\n",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                }
              ]
            },
            {
              "name": "format_text",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func format_text(text, fmt)",
              "description": "",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                },
                {
                  "name": "fmt",
                  "type": "var"
                }
              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "GutGuiPrinter",
          "path": "res://addons/gut/printers.gd",
          "extends_class": [
            "Printer"
          ],
          "extends_file": "",
          "icon": "",
          "signature": "class GutGuiPrinter",
          "description": " ------------------------------------------------------------------------------\r\n Responsible for sending text to a GUT gui.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "_gut",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _gut",
              "description": ""
            },
            {
              "name": "_colors",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _colors",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "_wrap_with_tag",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _wrap_with_tag(text, tag)",
              "description": "",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                },
                {
                  "name": "tag",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_color_text",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _color_text(text, c_word)",
              "description": "",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                },
                {
                  "name": "c_word",
                  "type": "var"
                }
              ]
            },
            {
              "name": "format_text",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func format_text(text, fmt)",
              "description": "",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                },
                {
                  "name": "fmt",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_output",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _output(text)",
              "description": "",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                }
              ]
            },
            {
              "name": "get_gut",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_gut()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "set_gut",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func set_gut(gut)",
              "description": "",
              "arguments": [
                {
                  "name": "gut",
                  "type": "var"
                }
              ]
            },
            {
              "name": "clear_line",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func clear_line()",
              "description": " This can be very very slow when the box has a lot of text.\r\n",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "ConsolePrinter",
          "path": "res://addons/gut/printers.gd",
          "extends_class": [
            "Printer"
          ],
          "extends_file": "",
          "icon": "",
          "signature": "class ConsolePrinter",
          "description": " ------------------------------------------------------------------------------\r\n This AND TerminalPrinter should not be enabled at the same time since it will\r\n result in duplicate output.  printraw does not print to the console so i had\r\n to make another one.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "_buffer",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _buffer",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "_output",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _output(text)",
              "description": " suppresses output until it encounters a newline to keep things\r\n inline as much as possible.\r\n",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                }
              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "TerminalPrinter",
          "path": "res://addons/gut/printers.gd",
          "extends_class": [
            "Printer"
          ],
          "extends_file": "",
          "icon": "",
          "signature": "class TerminalPrinter",
          "description": " ------------------------------------------------------------------------------\r\n Prints text to terminal, formats some words.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "escape",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var escape",
              "description": ""
            },
            {
              "name": "cmd_colors",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var cmd_colors",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "_output",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _output(text)",
              "description": "",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                }
              ]
            },
            {
              "name": "format_text",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func format_text(text, fmt)",
              "description": "",
              "arguments": [
                {
                  "name": "text",
                  "type": "var"
                },
                {
                  "name": "fmt",
                  "type": "var"
                }
              ]
            },
            {
              "name": "clear_line",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func clear_line()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "back",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func back(n)",
              "description": "",
              "arguments": [
                {
                  "name": "n",
                  "type": "var"
                }
              ]
            },
            {
              "name": "forward",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func forward(n)",
              "description": "",
              "arguments": [
                {
                  "name": "n",
                  "type": "var"
                }
              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [

      ]
    },
    {
      "name": "signal_watcher.gd",
      "path": "res://addons/gut/signal_watcher.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class signal_watcher.gd",
      "description": " ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Some arbitrary string that should never show up by accident.  If it does, then\r\n shame on  you.\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "ARG_NOT_SET",
          "value": "_*_argument_*_is_*_not_set_*_",
          "data_type": "String",
          "signature": "const ARG_NOT_SET: String = \"_*_argument_*_is_*_not_set_*_\"",
          "description": " ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Some arbitrary string that should never show up by accident.  If it does, then\r\n shame on  you.\r\n"
        }
      ],
      "members": [
        {
          "name": "_watched_signals",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _watched_signals",
          "description": " This hash holds the objects that are being watched, the signals that are being\r\n watched, and an array of arrays that contains arguments that were passed\r\n each time the signal was emitted.\r\n\r\n For example:\r\n\t_watched_signals => {\r\n\t\tref1 => {\r\n\t\t\t'signal1' => [[], [], []],\r\n\t\t\t'signal2' => [[p1, p2]],\r\n\t\t\t'signal3' => [[p1]]\r\n\t\t},\r\n\t\tref2 => {\r\n\t\t\t'some_signal' => [],\r\n\t\t\t'other_signal' => [[p1, p2, p3], [p1, p2, p3], [p1, p2, p3]]\r\n\t\t}\r\n\t}\r\n\r\n In this sample:\r\n\t- signal1 on the ref1 object was emitted 3 times and each time, zero\r\n\t  parameters were passed.\r\n\t- signal3 on ref1 was emitted once and passed a single parameter\r\n\t- some_signal on ref2 was never emitted.\r\n\t- other_signal on ref2 was emitted 3 times, each time with 3 parameters.\r\n"
        },
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": " This hash holds the objects that are being watched, the signals that are being\r\n watched, and an array of arrays that contains arguments that were passed\r\n each time the signal was emitted.\r\n\r\n For example:\r\n\t_watched_signals => {\r\n\t\tref1 => {\r\n\t\t\t'signal1' => [[], [], []],\r\n\t\t\t'signal2' => [[p1, p2]],\r\n\t\t\t'signal3' => [[p1]]\r\n\t\t},\r\n\t\tref2 => {\r\n\t\t\t'some_signal' => [],\r\n\t\t\t'other_signal' => [[p1, p2, p3], [p1, p2, p3], [p1, p2, p3]]\r\n\t\t}\r\n\t}\r\n\r\n In this sample:\r\n\t- signal1 on the ref1 object was emitted 3 times and each time, zero\r\n\t  parameters were passed.\r\n\t- signal3 on ref1 was emitted once and passed a single parameter\r\n\t- some_signal on ref2 was never emitted.\r\n\t- other_signal on ref2 was emitted 3 times, each time with 3 parameters.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_add_watched_signal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _add_watched_signal(obj, name)",
          "description": "",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_watched_signal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_watched_signal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)",
          "description": " This handles all the signals that are watched.  It supports up to 9 parameters\r\n which could be emitted by the signal and the two parameters used when it is\r\n connected via watch_signal.  I chose 9 since you can only specify up to 9\r\n parameters when dynamically calling a method via call (per the Godot\r\n documentation, i.e. some_object.call('some_method', 1, 2, 3...)).\r\n\r\n Based on the documentation of emit_signal, it appears you can only pass up\r\n to 4 parameters when firing a signal.  I haven't verified this, but this should\r\n future proof this some if the value ever grows.\r\n",
          "arguments": [
            {
              "name": "arg1",
              "type": "var"
            },
            {
              "name": "arg2",
              "type": "var"
            },
            {
              "name": "arg3",
              "type": "var"
            },
            {
              "name": "arg4",
              "type": "var"
            },
            {
              "name": "arg5",
              "type": "var"
            },
            {
              "name": "arg6",
              "type": "var"
            },
            {
              "name": "arg7",
              "type": "var"
            },
            {
              "name": "arg8",
              "type": "var"
            },
            {
              "name": "arg9",
              "type": "var"
            },
            {
              "name": "arg10",
              "type": "var"
            },
            {
              "name": "arg11",
              "type": "var"
            }
          ]
        },
        {
          "name": "does_object_have_signal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func does_object_have_signal(object, signal_name)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "watch_signals",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func watch_signals(object)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            }
          ]
        },
        {
          "name": "watch_signal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func watch_signal(object, signal_name)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_emit_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_emit_count(object, signal_name)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "did_emit",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func did_emit(object, signal_name)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "print_object_signals",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func print_object_signals(object)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_signal_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_signal_parameters(object, signal_name, index = -1)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "index",
              "type": "var",
              "default_value": -1
            }
          ]
        },
        {
          "name": "is_watching_object",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_watching_object(object)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_watching",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_watching(object, signal_name)",
          "description": "",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "clear",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_signals_emitted",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_signals_emitted(obj)",
          "description": " Returns a list of all the signal names that were emitted by the object.\r\n If the object is not being watched then an empty list is returned.\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "spy.gd",
      "path": "res://addons/gut/spy.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class spy.gd",
      "description": " {\r\n   instance_id_or_path1:{\r\n       method1:[ [p1, p2], [p1, p2] ],\r\n       method2:[ [p1, p2], [p1, p2] ]\r\n   },\r\n   instance_id_or_path1:{\r\n       method1:[ [p1, p2], [p1, p2] ],\r\n       method2:[ [p1, p2], [p1, p2] ]\r\n   },\r\n }\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_calls",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _calls",
          "description": " {\r\n   instance_id_or_path1:{\r\n       method1:[ [p1, p2], [p1, p2] ],\r\n       method2:[ [p1, p2], [p1, p2] ]\r\n   },\r\n   instance_id_or_path1:{\r\n       method1:[ [p1, p2], [p1, p2] ],\r\n       method2:[ [p1, p2], [p1, p2] ]\r\n   },\r\n }\r\n"
        },
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": " {\r\n   instance_id_or_path1:{\r\n       method1:[ [p1, p2], [p1, p2] ],\r\n       method2:[ [p1, p2], [p1, p2] ]\r\n   },\r\n   instance_id_or_path1:{\r\n       method1:[ [p1, p2], [p1, p2] ],\r\n       method2:[ [p1, p2], [p1, p2] ]\r\n   },\r\n }\r\n"
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": ""
        },
        {
          "name": "_compare",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _compare",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_find_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _find_parameters(call_params, params_to_find)",
          "description": "",
          "arguments": [
            {
              "name": "call_params",
              "type": "var"
            },
            {
              "name": "params_to_find",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_params_as_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_params_as_string(params)",
          "description": "",
          "arguments": [
            {
              "name": "params",
              "type": "var"
            }
          ]
        },
        {
          "name": "add_call",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_call(variant, method_name, parameters = null)",
          "description": "",
          "arguments": [
            {
              "name": "variant",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "was_called",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func was_called(variant, method_name, parameters = null)",
          "description": "",
          "arguments": [
            {
              "name": "variant",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "get_call_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_call_parameters(variant, method_name, index = -1)",
          "description": "",
          "arguments": [
            {
              "name": "variant",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            },
            {
              "name": "index",
              "type": "var",
              "default_value": -1
            }
          ]
        },
        {
          "name": "call_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func call_count(instance, method_name, parameters = null)",
          "description": "",
          "arguments": [
            {
              "name": "instance",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "clear",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_call_list_as_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_call_list_as_string(instance)",
          "description": "",
          "arguments": [
            {
              "name": "instance",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_logger(logger)",
          "description": "",
          "arguments": [
            {
              "name": "logger",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "strutils.gd",
      "path": "res://addons/gut/strutils.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class strutils.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "class strutils.gd",
          "description": ""
        },
        {
          "name": "types",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var types",
          "description": " Hash containing all the built in types in Godot.  This provides an English\r\n name for the types that corosponds with the type constants defined in the\r\n engine.\r\n"
        },
        {
          "name": "_str_ignore_types",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _str_ignore_types",
          "description": " Types to not be formatted when using _str\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init_types_dictionary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init_types_dictionary()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_get_filename",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_filename(path)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_obj_filename",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_obj_filename(thing)",
          "description": " ------------------------------------------------------------------------------\r\n Gets the filename of an object passed in.  This does not return the\r\n full path to the object, just the filename.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "type2str",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func type2str(thing)",
          "description": " ------------------------------------------------------------------------------\r\n Better object/thing to string conversion.  Includes extra details about\r\n whatever is passed in when it can/should.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "truncate_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func truncate_string(src, max_size)",
          "description": " ------------------------------------------------------------------------------\r\n Returns the string truncated with an '...' in it.  Shows the start and last\r\n 10 chars.  If the string is  smaller than max_size the entire string is\r\n returned.  If max_size is -1 then truncation is skipped.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "src",
              "type": "var"
            },
            {
              "name": "max_size",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_indent_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_indent_text(times, pad)",
          "description": "",
          "arguments": [
            {
              "name": "times",
              "type": "var"
            },
            {
              "name": "pad",
              "type": "var"
            }
          ]
        },
        {
          "name": "indent_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func indent_text(text, times, pad)",
          "description": "",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "times",
              "type": "var"
            },
            {
              "name": "pad",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "stubber.gd",
      "path": "res://addons/gut/stubber.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class stubber.gd",
      "description": " {\r\n \tinst_id_or_path1:{\r\n \t\tmethod_name1: [StubParams, StubParams],\r\n \t\tmethod_name2: [StubParams, StubParams]\r\n \t},\r\n \tinst_id_or_path2:{\r\n \t\tmethod_name1: [StubParams, StubParams],\r\n \t\tmethod_name2: [StubParams, StubParams]\r\n \t}\r\n }\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "returns",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var returns",
          "description": " {\r\n \tinst_id_or_path1:{\r\n \t\tmethod_name1: [StubParams, StubParams],\r\n \t\tmethod_name2: [StubParams, StubParams]\r\n \t},\r\n \tinst_id_or_path2:{\r\n \t\tmethod_name1: [StubParams, StubParams],\r\n \t\tmethod_name2: [StubParams, StubParams]\r\n \t}\r\n }\r\n"
        },
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": " {\r\n \tinst_id_or_path1:{\r\n \t\tmethod_name1: [StubParams, StubParams],\r\n \t\tmethod_name2: [StubParams, StubParams]\r\n \t},\r\n \tinst_id_or_path2:{\r\n \t\tmethod_name1: [StubParams, StubParams],\r\n \t\tmethod_name2: [StubParams, StubParams]\r\n \t}\r\n }\r\n"
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": ""
        },
        {
          "name": "_strutils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _strutils",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_make_key_from_metadata",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _make_key_from_metadata(doubled)",
          "description": "",
          "arguments": [
            {
              "name": "doubled",
              "type": "var"
            }
          ]
        },
        {
          "name": "_make_key_from_variant",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _make_key_from_variant(obj, subpath = null)",
          "description": " Creates they key for the returns hash based on the type of object passed in\r\n obj could be a string of a path to a script with an optional subpath or\r\n it could be an instance of a doubled object.\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "subpath",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "_add_obj_method",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _add_obj_method(obj, method, subpath = null)",
          "description": "",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "method",
              "type": "var"
            },
            {
              "name": "subpath",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "set_return",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_return(obj, method, value, parameters = null)",
          "description": " ##############\r\n Public\r\n ##############\r\n TODO: This method is only used in tests and should be refactored out.  It\r\n does not support inner classes and isn't helpful.\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "method",
              "type": "var"
            },
            {
              "name": "value",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "add_stub",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_stub(stub_params)",
          "description": "",
          "arguments": [
            {
              "name": "stub_params",
              "type": "var"
            }
          ]
        },
        {
          "name": "_find_stub",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _find_stub(obj, method, parameters = null)",
          "description": " Searches returns for an entry that matches the instance or the class that\r\n passed in obj is.\r\n\r\n obj can be an instance, class, or a path.\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "method",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "get_return",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_return(obj, method, parameters = null)",
          "description": " Gets a stubbed return value for the object and method passed in.  If the\r\n instance was stubbed it will use that, otherwise it will use the path and\r\n subpath of the object to try to find a value.\r\n\r\n It will also use the optional list of parameter values to find a value.  If\r\n the object was stubbed with no parameters than any parameters will match.\r\n If it was stubbed with specific parameter values then it will try to match.\r\n If the parameters do not match BUT there was also an empty parameter list stub\r\n then it will return those.\r\n If it cannot find anything that matches then null is returned.for\r\n\r\n Parameters\r\n obj:  this should be an instance of a doubled object.\r\n method:  the method called\r\n parameters:  optional array of parameter vales to find a return value for.\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "method",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "should_call_super",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func should_call_super(obj, method, parameters = null)",
          "description": "",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "method",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "clear",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_logger(logger)",
          "description": "",
          "arguments": [
            {
              "name": "logger",
              "type": "var"
            }
          ]
        },
        {
          "name": "to_s",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func to_s()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "stub_params.gd",
      "path": "res://addons/gut/stub_params.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class stub_params.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "NOT_SET",
          "value": "|_1_this_is_not_set_1_|",
          "data_type": "String",
          "signature": "const NOT_SET: String = \"|_1_this_is_not_set_1_|\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "return_val",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "class stub_params.gd",
          "description": ""
        },
        {
          "name": "stub_target",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var stub_target",
          "description": ""
        },
        {
          "name": "target_subpath",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var target_subpath",
          "description": ""
        },
        {
          "name": "parameters",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var parameters",
          "description": ""
        },
        {
          "name": "stub_method",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var stub_method",
          "description": ""
        },
        {
          "name": "call_super",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var call_super",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init(target = null, method = null, subpath = null)",
          "description": "",
          "arguments": [
            {
              "name": "target",
              "type": "var",
              "default_value": null
            },
            {
              "name": "method",
              "type": "var",
              "default_value": null
            },
            {
              "name": "subpath",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "to_return",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func to_return(val)",
          "description": "",
          "arguments": [
            {
              "name": "val",
              "type": "var"
            }
          ]
        },
        {
          "name": "to_do_nothing",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func to_do_nothing()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "to_call_super",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func to_call_super()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "when_passed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func when_passed(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)",
          "description": "",
          "arguments": [
            {
              "name": "p1",
              "type": "var"
            },
            {
              "name": "p2",
              "type": "var"
            },
            {
              "name": "p3",
              "type": "var"
            },
            {
              "name": "p4",
              "type": "var"
            },
            {
              "name": "p5",
              "type": "var"
            },
            {
              "name": "p6",
              "type": "var"
            },
            {
              "name": "p7",
              "type": "var"
            },
            {
              "name": "p8",
              "type": "var"
            },
            {
              "name": "p9",
              "type": "var"
            },
            {
              "name": "p10",
              "type": "var"
            }
          ]
        },
        {
          "name": "to_s",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func to_s()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "summary.gd",
      "path": "res://addons/gut/summary.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class summary.gd",
      "description": " ------------------------------------------------------------------------------\r\n Contains all the results of a single test.  Allows for multiple asserts results\r\n and pending calls.\r\n ------------------------------------------------------------------------------\r\n",
      "sub_classes": [
        {
          "name": "Test",
          "path": "res://addons/gut/summary.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class Test",
          "description": " ------------------------------------------------------------------------------\r\n Contains all the results of a single test.  Allows for multiple asserts results\r\n and pending calls.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "pass_texts",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var pass_texts",
              "description": " ------------------------------------------------------------------------------\r\n Contains all the results of a single test.  Allows for multiple asserts results\r\n and pending calls.\r\n ------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "fail_texts",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var fail_texts",
              "description": ""
            },
            {
              "name": "pending_texts",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var pending_texts",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "to_s",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func to_s()",
              "description": " NOTE:  The \"failed\" and \"pending\" text must match what is outputted by\r\n the logger in order for text highlighting to occur in summary.\r\n",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "TestScript",
          "path": "res://addons/gut/summary.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class TestScript",
          "description": " ------------------------------------------------------------------------------\r\n Contains all the results for a single test-script/inner class.  Persists the\r\n names of the tests and results and the order in which  the tests were run.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "name",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var name",
              "description": " ------------------------------------------------------------------------------\r\n Contains all the results for a single test-script/inner class.  Persists the\r\n names of the tests and results and the order in which  the tests were run.\r\n ------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "_tests",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _tests",
              "description": ""
            },
            {
              "name": "_test_order",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _test_order",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init(script_name)",
              "description": "",
              "arguments": [
                {
                  "name": "script_name",
                  "type": "var"
                }
              ]
            },
            {
              "name": "get_pass_count",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_pass_count()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_fail_count",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_fail_count()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_pending_count",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_pending_count()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_test_obj",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_test_obj(obj_name)",
              "description": "",
              "arguments": [
                {
                  "name": "obj_name",
                  "type": "var"
                }
              ]
            },
            {
              "name": "add_pass",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func add_pass(test_name, reason)",
              "description": "",
              "arguments": [
                {
                  "name": "test_name",
                  "type": "var"
                },
                {
                  "name": "reason",
                  "type": "var"
                }
              ]
            },
            {
              "name": "add_fail",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func add_fail(test_name, reason)",
              "description": "",
              "arguments": [
                {
                  "name": "test_name",
                  "type": "var"
                },
                {
                  "name": "reason",
                  "type": "var"
                }
              ]
            },
            {
              "name": "add_pending",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func add_pending(test_name, reason)",
              "description": "",
              "arguments": [
                {
                  "name": "test_name",
                  "type": "var"
                },
                {
                  "name": "reason",
                  "type": "var"
                }
              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [

      ],
      "members": [
        {
          "name": "_scripts",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _scripts",
          "description": " ------------------------------------------------------------------------------\r\n Summary Class\r\n\r\n This class holds the results of all the test scripts and Inner Classes that\r\n were run.\r\n -------------------------------------------d-----------------------------------\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "add_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_script(name)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_scripts",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_scripts()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_current_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_current_script()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "add_test",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_test(test_name)",
          "description": "",
          "arguments": [
            {
              "name": "test_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "add_pass",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_pass(test_name, reason = \"\")",
          "description": "",
          "arguments": [
            {
              "name": "test_name",
              "type": "var"
            },
            {
              "name": "reason",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_fail",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_fail(test_name, reason = \"\")",
          "description": "",
          "arguments": [
            {
              "name": "test_name",
              "type": "var"
            },
            {
              "name": "reason",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "add_pending",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_pending(test_name, reason = \"\")",
          "description": "",
          "arguments": [
            {
              "name": "test_name",
              "type": "var"
            },
            {
              "name": "reason",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_test_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_test_text(test_name)",
          "description": "",
          "arguments": [
            {
              "name": "test_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_non_inner_class_script_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_non_inner_class_script_count()",
          "description": " Gets the count of unique script names minus the .<Inner Class Name> at the\r\n end.  Used for displaying the number of scripts without including all the\r\n Inner Classes.\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_totals",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_totals()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "log_summary_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func log_summary_text(lgr)",
          "description": "",
          "arguments": [
            {
              "name": "lgr",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test.gd",
      "path": "res://addons/gut/test.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class test.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n View readme for usage details.\r\n\r\n Version - see gut.gd\r\n ##############################################################################\r\n Class that all test scripts must extend.\r\n\r\n This provides all the asserts and other testing features.  Test scripts are\r\n run by the Gut class in gut.gd\r\n ##############################################################################\r\n",
      "sub_classes": [
        {
          "name": "DoubleInfo",
          "path": "res://addons/gut/test.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class DoubleInfo",
          "description": " ------------------------------------------------------------------------------\r\n Helper class to hold info for objects to double.  This extracts info and has\r\n some convenience methods.  This is key in being able to make the \"smart double\"\r\n method which makes doubling much easier for the user.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "path",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var path",
              "description": " ------------------------------------------------------------------------------\r\n Helper class to hold info for objects to double.  This extracts info and has\r\n some convenience methods.  This is key in being able to make the \"smart double\"\r\n method which makes doubling much easier for the user.\r\n ------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "subpath",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var subpath",
              "description": ""
            },
            {
              "name": "strategy",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var strategy",
              "description": ""
            },
            {
              "name": "make_partial",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var make_partial",
              "description": ""
            },
            {
              "name": "extension",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var extension",
              "description": ""
            },
            {
              "name": "_utils",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _utils",
              "description": ""
            },
            {
              "name": "_is_native",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _is_native",
              "description": ""
            },
            {
              "name": "is_valid",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var is_valid",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init(thing, p2 = null, p3 = null)",
              "description": " Flexible init method.  p2 can be subpath or stategy unless p3 is\r\n specified, then p2 must be subpath and p3 is strategy.\r\n\r\n Examples:\r\n   (object_to_double)\r\n   (object_to_double, subpath)\r\n   (object_to_double, strategy)\r\n   (object_to_double, subpath, strategy)\r\n",
              "arguments": [
                {
                  "name": "thing",
                  "type": "var"
                },
                {
                  "name": "p2",
                  "type": "var",
                  "default_value": null
                },
                {
                  "name": "p3",
                  "type": "var",
                  "default_value": null
                }
              ]
            },
            {
              "name": "is_scene",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func is_scene()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "is_script",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func is_script()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "is_native",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func is_native()",
              "description": "",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [
        {
          "name": "DEFAULT_SETTER_GETTER",
          "value": 0,
          "data_type": "int",
          "signature": "const DEFAULT_SETTER_GETTER: int = 0",
          "description": " Used with assert_setget\r\n"
        },
        {
          "name": "VARIABLE_PROPERTY",
          "value": 8192,
          "data_type": "int",
          "signature": "const VARIABLE_PROPERTY: int = 8192",
          "description": ""
        },
        {
          "name": "SETTER_ONLY",
          "value": 1,
          "data_type": "int",
          "signature": "const SETTER_ONLY: int = 1",
          "description": ""
        },
        {
          "name": "EDITOR_PROPERTY",
          "value": 8199,
          "data_type": "int",
          "signature": "const EDITOR_PROPERTY: int = 8199",
          "description": ""
        },
        {
          "name": "YIELD",
          "value": "timeout",
          "data_type": "String",
          "signature": "const YIELD: String = \"timeout\"",
          "description": " constant for signal when calling yield_for\r\n"
        },
        {
          "name": "GETTER_ONLY",
          "value": 2,
          "data_type": "int",
          "signature": "const GETTER_ONLY: int = 2",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": " ------------------------------------------------------------------------------\r\n Begin test.gd\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_compare",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _compare",
          "description": " ------------------------------------------------------------------------------\r\n Begin test.gd\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "gut",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var gut",
          "description": " Need a reference to the instance that is running the tests.  This\r\n is set by the gut class when it runs the tests.  This gets you\r\n access to the asserts in the tests you write.\r\n"
        },
        {
          "name": "_disable_strict_datatype_checks",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _disable_strict_datatype_checks",
          "description": ""
        },
        {
          "name": "_fail_pass_text",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _fail_pass_text",
          "description": " Holds all the text for a test's fail/pass.  This is used for testing purposes\r\n to see the text of a failed sub-test in test_test.gd\r\n"
        },
        {
          "name": "_summary",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _summary",
          "description": " Summary counts for the test.\r\n"
        },
        {
          "name": "_signal_watcher",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _signal_watcher",
          "description": " This is used to watch signals so we can make assertions about them.\r\n"
        },
        {
          "name": "DOUBLE_STRATEGY",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var DOUBLE_STRATEGY",
          "description": " Convenience copy of _utils.DOUBLE_STRATEGY\r\n"
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": " Convenience copy of _utils.DOUBLE_STRATEGY\r\n"
        },
        {
          "name": "_strutils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _strutils",
          "description": ""
        },
        {
          "name": "ParameterFactory",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ParameterFactory",
          "description": " syntax sugar\r\n"
        },
        {
          "name": "CompareResult",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var CompareResult",
          "description": " syntax sugar\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _init()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_str",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _str(thing)",
          "description": "",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "_fail",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _fail(text)",
          "description": " ------------------------------------------------------------------------------\r\n Fail an assertion.  Causes test and script to fail as well.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "_pass",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _pass(text)",
          "description": " ------------------------------------------------------------------------------\r\n Pass an assertion.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "_do_datatypes_match__fail_if_not",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _do_datatypes_match__fail_if_not(got, expected, text)",
          "description": " ------------------------------------------------------------------------------\r\n Checks if the datatypes passed in match.  If they do not then this will cause\r\n a fail to occur.  If they match then TRUE is returned, FALSE if not.  This is\r\n used in all the assertions that compare values.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "expected",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_desc_of_calls_to_instance",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_desc_of_calls_to_instance(inst)",
          "description": " ------------------------------------------------------------------------------\r\n Create a string that lists all the methods that were called on an spied\r\n instance.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "inst",
              "type": "var"
            }
          ]
        },
        {
          "name": "_fail_if_does_not_have_signal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _fail_if_does_not_have_signal(object, signal_name)",
          "description": " ------------------------------------------------------------------------------\r\n Signal assertion helper.  Do not call directly, use _can_make_signal_assertions\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_fail_if_not_watching",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _fail_if_not_watching(object)",
          "description": " ------------------------------------------------------------------------------\r\n Signal assertion helper.  Do not call directly, use _can_make_signal_assertions\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_fail_msg_including_emitted_signals",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_fail_msg_including_emitted_signals(text, object)",
          "description": " ------------------------------------------------------------------------------\r\n Returns text that contains original text and a list of all the signals that\r\n were emitted for the passed in object.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "object",
              "type": "var"
            }
          ]
        },
        {
          "name": "_fail_if_parameters_not_array",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _fail_if_parameters_not_array(parameters)",
          "description": " ------------------------------------------------------------------------------\r\n This validates that parameters is an array and generates a specific error\r\n and a failure with a specific message\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "parameters",
              "type": "var"
            }
          ]
        },
        {
          "name": "_create_obj_from_type",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _create_obj_from_type(type)",
          "description": "",
          "arguments": [
            {
              "name": "type",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_type_from_obj",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_type_from_obj(obj)",
          "description": "",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            }
          ]
        },
        {
          "name": "before_all",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_all()",
          "description": " #######################\r\n Virtual Methods\r\n #######################\r\n alias for prerun_setup\r\n",
          "arguments": [

          ]
        },
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": " alias for setup\r\n",
          "arguments": [

          ]
        },
        {
          "name": "after_all",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_all()",
          "description": " alias for postrun_teardown\r\n",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": " alias for teardown\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": " #######################\r\n Public\r\n #######################\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_logger(logger)",
          "description": "",
          "arguments": [
            {
              "name": "logger",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_eq",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_eq(got, expected, text = \"\")",
          "description": " #######################\r\n Asserts\r\n #######################\r\n ------------------------------------------------------------------------------\r\n Asserts that the expected value equals the value got.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "expected",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_ne",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_ne(got, not_expected, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that the value got does not equal the \"not expected\" value.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "not_expected",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_almost_eq",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_almost_eq(got, expected, error_interval, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that the expected value almost equals the value got.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "expected",
              "type": "var"
            },
            {
              "name": "error_interval",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_almost_ne",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_almost_ne(got, not_expected, error_interval, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that the expected value does not almost equal the value got.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "not_expected",
              "type": "var"
            },
            {
              "name": "error_interval",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_gt",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_gt(got, expected, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts got is greater than expected\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "expected",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_lt",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_lt(got, expected, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts got is less than expected\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "expected",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_true",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_true(got, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n asserts that got is true\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_false",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_false(got, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that got is false\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_between",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_between(got, expect_low, expect_high, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts value is between (inclusive) the two expected values.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "expect_low",
              "type": "var"
            },
            {
              "name": "expect_high",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_not_between",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_not_between(got, expect_low, expect_high, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts value is not between (exclusive) the two expected values.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "expect_low",
              "type": "var"
            },
            {
              "name": "expect_high",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_has",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_has(obj, element, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Uses the 'has' method of the object passed in to determine if it contains\r\n the passed in element.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "element",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_does_not_have",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_does_not_have(obj, element, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "element",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_file_exists",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_file_exists(file_path)",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that a file exists\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "file_path",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_file_does_not_exist",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_file_does_not_exist(file_path)",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that a file should not exist\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "file_path",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_file_empty",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_file_empty(file_path)",
          "description": " ------------------------------------------------------------------------------\r\n Asserts the specified file is empty\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "file_path",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_file_not_empty",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_file_not_empty(file_path)",
          "description": " ------------------------------------------------------------------------------\r\n Asserts the specified file is not empty\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "file_path",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_has_method",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_has_method(obj, method)",
          "description": " ------------------------------------------------------------------------------\r\n Asserts the object has the specified method\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "method",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_get_set_methods",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_get_set_methods(obj, property, default, set_to)",
          "description": " Old deprecated method name\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "property",
              "type": "var"
            },
            {
              "name": "default",
              "type": "var"
            },
            {
              "name": "set_to",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_accessors",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_accessors(obj, property, default, set_to)",
          "description": " ------------------------------------------------------------------------------\r\n Verifies the object has get and set methods for the property passed in.  The\r\n property isn't tied to anything, just a name to be appended to the end of\r\n get_ and set_.  Asserts the get_ and set_ methods exist, if not, it stops there.\r\n If they exist then it asserts get_ returns the expected default then calls\r\n set_ and asserts get_ has the value it was set to.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "property",
              "type": "var"
            },
            {
              "name": "default",
              "type": "var"
            },
            {
              "name": "set_to",
              "type": "var"
            }
          ]
        },
        {
          "name": "_find_object_property",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _find_object_property(obj, property_name, property_usage = null)",
          "description": " ---------------------------------------------------------------------------\r\n Property search helper.  Used to retrieve Dictionary of specified property\r\n from passed object. Returns null if not found.\r\n If provided, property_usage constrains the type of property returned by\r\n passing either:\r\n EDITOR_PROPERTY for properties defined as: export(int) var some_value\r\n VARIABLE_PROPERTY for properties defined as: var another_value\r\n ---------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "property_name",
              "type": "var"
            },
            {
              "name": "property_usage",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "assert_exports",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_exports(obj, property_name, type)",
          "description": " ------------------------------------------------------------------------------\r\n Asserts a class exports a variable.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "property_name",
              "type": "var"
            },
            {
              "name": "type",
              "type": "var"
            }
          ]
        },
        {
          "name": "_can_make_signal_assertions",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _can_make_signal_assertions(object, signal_name)",
          "description": " ------------------------------------------------------------------------------\r\n Signal assertion helper.\r\n\r\n Verifies that the object and signal are valid for making signal assertions.\r\n This will fail with specific messages that indicate why they are not valid.\r\n This returns true/false to indicate if the object and signal are valid.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "_is_connected",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _is_connected(signaler_obj, connect_to_obj, signal_name, method_name = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Check if an object is connected to a signal on another object. Returns True\r\n if it is and false otherwise\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "signaler_obj",
              "type": "var"
            },
            {
              "name": "connect_to_obj",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "watch_signals",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func watch_signals(object)",
          "description": " ------------------------------------------------------------------------------\r\n Watch the signals for an object.  This must be called before you can make\r\n any assertions about the signals themselves.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_connected",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_connected(signaler_obj, connect_to_obj, signal_name, method_name = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that an object is connected to a signal on another object\r\n\r\n This will fail with specific messages if the target object is not connected\r\n to the specified signal on the source object.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "signaler_obj",
              "type": "var"
            },
            {
              "name": "connect_to_obj",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_not_connected",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_not_connected(signaler_obj, connect_to_obj, signal_name, method_name = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that an object is not connected to a signal on another object\r\n\r\n This will fail with specific messages if the target object is connected\r\n to the specified signal on the source object.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "signaler_obj",
              "type": "var"
            },
            {
              "name": "connect_to_obj",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_signal_emitted",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_signal_emitted(object, signal_name, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that a signal has been emitted at least once.\r\n\r\n This will fail with specific messages if the object is not being watched or\r\n the object does not have the specified signal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_signal_not_emitted",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_signal_not_emitted(object, signal_name, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that a signal has not been emitted.\r\n\r\n This will fail with specific messages if the object is not being watched or\r\n the object does not have the specified signal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_signal_emitted_with_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_signal_emitted_with_parameters(object, signal_name, parameters, index = -1)",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that a signal was fired with the specified parameters.  The expected\r\n parameters should be passed in as an array.  An optional index can be passed\r\n when a signal has fired more than once.  The default is to retrieve the most\r\n recent emission of the signal.\r\n\r\n This will fail with specific messages if the object is not being watched or\r\n the object does not have the specified signal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var"
            },
            {
              "name": "index",
              "type": "var",
              "default_value": -1
            }
          ]
        },
        {
          "name": "assert_signal_emit_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_signal_emit_count(object, signal_name, times, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Assert that a signal has been emitted a specific number of times.\r\n\r\n This will fail with specific messages if the object is not being watched or\r\n the object does not have the specified signal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "times",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_has_signal",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_has_signal(object, signal_name, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Assert that the passed in object has the specified signal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_signal_emit_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_signal_emit_count(object, signal_name)",
          "description": " ------------------------------------------------------------------------------\r\n Returns the number of times a signal was emitted.  -1 returned if the object\r\n is not being watched.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_signal_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_signal_parameters(object, signal_name, index = -1)",
          "description": " ------------------------------------------------------------------------------\r\n Get the parmaters of a fired signal.  If the signal was not fired null is\r\n returned.  You can specify an optional index (use get_signal_emit_count to\r\n determine the number of times it was emitted).  The default index is the\r\n latest time the signal was fired (size() -1 insetead of 0).  The parameters\r\n returned are in an array.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "index",
              "type": "var",
              "default_value": -1
            }
          ]
        },
        {
          "name": "get_call_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_call_parameters(object, method_name, index = -1)",
          "description": " ------------------------------------------------------------------------------\r\n Get the parameters for a method call to a doubled object.  By default it will\r\n return the most recent call.  You can optionally specify an index.\r\n\r\n Returns:\r\n * an array of parameter values if a call the method was found\r\n * null when a call to the method was not found or the index specified was\r\n   invalid.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            },
            {
              "name": "index",
              "type": "var",
              "default_value": -1
            }
          ]
        },
        {
          "name": "assert_extends",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_extends(object, a_class, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Assert that object is an instance of a_class\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "a_class",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_is",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_is(object, a_class, text = \"\")",
          "description": " Alias for assert_extends\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "a_class",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_get_typeof_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_typeof_string(the_type)",
          "description": "",
          "arguments": [
            {
              "name": "the_type",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_typeof",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_typeof(object, type, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "type",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_not_typeof",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_not_typeof(object, type, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "object",
              "type": "var"
            },
            {
              "name": "type",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_string_contains",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_string_contains(text, search, match_case = true)",
          "description": " ------------------------------------------------------------------------------\r\n Assert that text contains given search string.\r\n The match_case flag determines case sensitivity.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "search",
              "type": "var"
            },
            {
              "name": "match_case",
              "type": "var",
              "default_value": true
            }
          ]
        },
        {
          "name": "assert_string_starts_with",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_string_starts_with(text, search, match_case = true)",
          "description": " ------------------------------------------------------------------------------\r\n Assert that text starts with given search string.\r\n match_case flag determines case sensitivity.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "search",
              "type": "var"
            },
            {
              "name": "match_case",
              "type": "var",
              "default_value": true
            }
          ]
        },
        {
          "name": "assert_string_ends_with",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_string_ends_with(text, search, match_case = true)",
          "description": " ------------------------------------------------------------------------------\r\n Assert that text ends with given search string.\r\n match_case flag determines case sensitivity.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            },
            {
              "name": "search",
              "type": "var"
            },
            {
              "name": "match_case",
              "type": "var",
              "default_value": true
            }
          ]
        },
        {
          "name": "assert_called",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_called(inst, method_name, parameters = null)",
          "description": " ------------------------------------------------------------------------------\r\n Assert that a method was called on an instance of a doubled class.  If\r\n parameters are supplied then the params passed in when called must match.\r\n TODO make 3rd parameter \"param_or_text\" and add fourth parameter of \"text\" and\r\n      then work some magic so this can have a \"text\" parameter without being\r\n      annoying.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "inst",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "assert_not_called",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_not_called(inst, method_name, parameters = null)",
          "description": " ------------------------------------------------------------------------------\r\n Assert that a method was not called on an instance of a doubled class.  If\r\n parameters are specified then this will only fail if it finds a call that was\r\n sent matching parameters.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "inst",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "assert_call_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_call_count(inst, method_name, expected_count, parameters = null)",
          "description": " ------------------------------------------------------------------------------\r\n Assert that a method on an instance of a doubled class was called a number\r\n of times.  If parameters are specified then only calls with matching\r\n parameter values will be counted.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "inst",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            },
            {
              "name": "expected_count",
              "type": "var"
            },
            {
              "name": "parameters",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "assert_null",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_null(got, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts the passed in value is null\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_not_null",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_not_null(got, text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts the passed in value is null\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_freed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_freed(obj, title)",
          "description": " -----------------------------------------------------------------------------\r\n Asserts object has been freed from memory\r\n We pass in a title (since if it is freed, we lost all identity data)\r\n -----------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "title",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_not_freed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_not_freed(obj, title)",
          "description": " ------------------------------------------------------------------------------\r\n Asserts Object has not been freed from memory\r\n -----------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "title",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_no_new_orphans",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_no_new_orphans(text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts that the current test has not introduced any new orphans.  This only\r\n applies to the test code that preceedes a call to this method so it should be\r\n the last thing your test does.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "_validate_assert_setget_called_input",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _validate_assert_setget_called_input(type, name_property, name_setter, name_getter)",
          "description": " ------------------------------------------------------------------------------\r\n Returns a dictionary that contains\r\n - an is_valid flag whether validation was successful or not and\r\n - a message that gives some information about the validation errors.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "type",
              "type": "var"
            },
            {
              "name": "name_property",
              "type": "var"
            },
            {
              "name": "name_setter",
              "type": "var"
            },
            {
              "name": "name_getter",
              "type": "var"
            }
          ]
        },
        {
          "name": "_assert_setget_called",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _assert_setget_called(type, name_property, setter = \"\", getter = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Asserts the given setter and getter methods are called when the given property\r\n is accessed.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "type",
              "type": "var"
            },
            {
              "name": "name_property",
              "type": "var"
            },
            {
              "name": "setter",
              "type": "var",
              "default_value": ""
            },
            {
              "name": "getter",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "assert_setget",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_setget(instance, name_property, const_or_setter, getter = \"__not_set__\")",
          "description": " ------------------------------------------------------------------------------\r\n Wrapper: invokes assert_setget_called but provides a slightly more convenient\r\n signature\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "instance",
              "type": "var"
            },
            {
              "name": "name_property",
              "type": "var"
            },
            {
              "name": "const_or_setter",
              "type": "var"
            },
            {
              "name": "getter",
              "type": "var",
              "default_value": "__not_set__"
            }
          ]
        },
        {
          "name": "assert_property",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func assert_property(instance, name_property, default_value, new_value) -> null",
          "description": " ------------------------------------------------------------------------------\r\n Wrapper: asserts if the property exists, the accessor methods exist and the\r\n setget keyword is set for accessor methods\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "instance",
              "type": "var"
            },
            {
              "name": "name_property",
              "type": "var"
            },
            {
              "name": "default_value",
              "type": "var"
            },
            {
              "name": "new_value",
              "type": "var"
            }
          ]
        },
        {
          "name": "pending",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func pending(text = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Mark the current test as pending.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "yield_for",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func yield_for(time, msg = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Returns the number of times a signal was emitted.  -1 returned if the object\r\n is not being watched.\r\n ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n Yield for the time sent in.  The optional message will be printed when\r\n Gut detects the yield.  When the time expires the YIELD signal will be\r\n emitted.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "time",
              "type": "var"
            },
            {
              "name": "msg",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "yield_to",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func yield_to(obj, signal_name, max_wait, msg = \"\")",
          "description": " ------------------------------------------------------------------------------\r\n Yield to a signal or a maximum amount of time, whichever comes first.  When\r\n the conditions are met the YIELD signal will be emitted.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "signal_name",
              "type": "var"
            },
            {
              "name": "max_wait",
              "type": "var"
            },
            {
              "name": "msg",
              "type": "var",
              "default_value": ""
            }
          ]
        },
        {
          "name": "end_test",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func end_test()",
          "description": " ------------------------------------------------------------------------------\r\n Ends a test that had a yield in it.  You only need to use this if you do\r\n not make assertions after a yield.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_summary",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_summary()",
          "description": "gut.end_yielded_test()\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_fail_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_fail_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_pass_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_pass_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_pending_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_pending_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_assert_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_assert_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "clear_signal_watcher",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear_signal_watcher()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_double_strategy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_double_strategy()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_double_strategy",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_double_strategy(double_strategy)",
          "description": "",
          "arguments": [
            {
              "name": "double_strategy",
              "type": "var"
            }
          ]
        },
        {
          "name": "pause_before_teardown",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func pause_before_teardown()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_summary_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_summary_text()",
          "description": " ------------------------------------------------------------------------------\r\n Convert the _summary dictionary into text\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_smart_double",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _smart_double(double_info)",
          "description": " ------------------------------------------------------------------------------\r\n Double a script, inner class, or scene using a path or a loaded script/scene.\r\n\r\n\r\n ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "double_info",
              "type": "var"
            }
          ]
        },
        {
          "name": "double",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func double(thing, p2 = null, p3 = null)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            },
            {
              "name": "p2",
              "type": "var",
              "default_value": null
            },
            {
              "name": "p3",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "partial_double",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func partial_double(thing, p2 = null, p3 = null)",
          "description": " ------------------------------------------------------------------------------\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            },
            {
              "name": "p2",
              "type": "var",
              "default_value": null
            },
            {
              "name": "p3",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "double_scene",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func double_scene(path, strategy = null)",
          "description": " ------------------------------------------------------------------------------\r\n Specifically double a scene\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "double_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func double_script(path, strategy = null)",
          "description": " ------------------------------------------------------------------------------\r\n Specifically double a script\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "double_inner",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func double_inner(path, subpath, strategy = null)",
          "description": " ------------------------------------------------------------------------------\r\n Specifically double an Inner class in a a script\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "subpath",
              "type": "var"
            },
            {
              "name": "strategy",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "ignore_method_when_doubling",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func ignore_method_when_doubling(thing, method_name)",
          "description": " ------------------------------------------------------------------------------\r\n Add a method that the doubler will ignore.  You can pass this the path to a\r\n script or scene or a loaded script or scene.  When running tests, these\r\n ignores are cleared after every test.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            },
            {
              "name": "method_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "stub",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func stub(thing, p2, p3 = null)",
          "description": " ------------------------------------------------------------------------------\r\n Stub something.\r\n\r\n Parameters\r\n 1: the thing to stub, a file path or a instance or a class\r\n 2: either an inner class subpath or the method name\r\n 3: the method name if an inner class subpath was specified\r\n NOTE:  right now we cannot stub inner classes at the path level so this should\r\n        only be called with two parameters.  I did the work though so I'm going\r\n        to leave it but not update the wiki.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            },
            {
              "name": "p2",
              "type": "var"
            },
            {
              "name": "p3",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "simulate",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func simulate(obj, times, delta)",
          "description": " ------------------------------------------------------------------------------\r\n convenience wrapper.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            },
            {
              "name": "times",
              "type": "var"
            },
            {
              "name": "delta",
              "type": "var"
            }
          ]
        },
        {
          "name": "replace_node",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func replace_node(base_node, path_or_node, with_this)",
          "description": " ------------------------------------------------------------------------------\r\n Replace the node at base_node.get_node(path) with with_this.  All references\r\n to the node via $ and get_node(...) will now return with_this.  with_this will\r\n get all the groups that the node that was replaced had.\r\n\r\n The node that was replaced is queued to be freed.\r\n\r\n TODO see replace_by method, this could simplify the logic here.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "base_node",
              "type": "var"
            },
            {
              "name": "path_or_node",
              "type": "var"
            },
            {
              "name": "with_this",
              "type": "var"
            }
          ]
        },
        {
          "name": "use_parameters",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func use_parameters(params)",
          "description": " ------------------------------------------------------------------------------\r\n This method does a somewhat complicated dance with Gut.  It assumes that Gut\r\n will clear its parameter handler after it finishes calling a parameterized test\r\n enough times.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "params",
              "type": "var"
            }
          ]
        },
        {
          "name": "autofree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func autofree(thing)",
          "description": " ------------------------------------------------------------------------------\r\n Marks whatever is passed in to be freed after the test finishes.  It also\r\n returns what is passed in so you can save a line of code.\r\n   var thing = autofree(Thing.new())\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "autoqfree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func autoqfree(thing)",
          "description": " ------------------------------------------------------------------------------\r\n Works the same as autofree except queue_free will be called on the object\r\n instead.  This also imparts a brief pause after the test finishes so that\r\n the queued object has time to free.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "add_child_autofree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_child_autofree(node, legible_unique_name = false)",
          "description": " ------------------------------------------------------------------------------\r\n The same as autofree but it also adds the object as a child of the test.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "node",
              "type": "var"
            },
            {
              "name": "legible_unique_name",
              "type": "var",
              "default_value": false
            }
          ]
        },
        {
          "name": "add_child_autoqfree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_child_autoqfree(node, legible_unique_name = false)",
          "description": " ------------------------------------------------------------------------------\r\n The same as autoqfree but it also adds the object as a child of the test.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "node",
              "type": "var"
            },
            {
              "name": "legible_unique_name",
              "type": "var",
              "default_value": false
            }
          ]
        },
        {
          "name": "is_passing",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_passing()",
          "description": " ------------------------------------------------------------------------------\r\n Returns true if the test is passing as of the time of this call.  False if not.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "is_failing",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_failing()",
          "description": " ------------------------------------------------------------------------------\r\n Returns true if the test is failing as of the time of this call.  False if not.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "pass_test",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func pass_test(text)",
          "description": " ------------------------------------------------------------------------------\r\n Marks the test as passing.  Does not override any failing asserts or calls to\r\n fail_test.  Same as a passing assert.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "fail_test",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func fail_test(text)",
          "description": " ------------------------------------------------------------------------------\r\n Marks the test as failing.  Same as a failing assert.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "compare_deep",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func compare_deep(v1, v2, max_differences = null)",
          "description": " ------------------------------------------------------------------------------\r\n Peforms a deep compare on both values, a CompareResult instnace is returned.\r\n The optional max_differences paramter sets the max_differences to be displayed.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            },
            {
              "name": "max_differences",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "compare_shallow",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func compare_shallow(v1, v2, max_differences = null)",
          "description": " ------------------------------------------------------------------------------\r\n Peforms a shallow compare on both values, a CompareResult instnace is returned.\r\n The optional max_differences paramter sets the max_differences to be displayed.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            },
            {
              "name": "max_differences",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "assert_eq_deep",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_eq_deep(v1, v2)",
          "description": " ------------------------------------------------------------------------------\r\n Performs a deep compare and asserts the  values are equal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_ne_deep",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_ne_deep(v1, v2)",
          "description": " ------------------------------------------------------------------------------\r\n Performs a deep compare and asserts the values are not equal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_eq_shallow",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_eq_shallow(v1, v2)",
          "description": " ------------------------------------------------------------------------------\r\n Performs a shallow compare and asserts the values are equal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            }
          ]
        },
        {
          "name": "assert_ne_shallow",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func assert_ne_shallow(v1, v2)",
          "description": " ------------------------------------------------------------------------------\r\n Performs a shallow compare and asserts the values are not equal\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "v1",
              "type": "var"
            },
            {
              "name": "v2",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_collector.gd",
      "path": "res://addons/gut/test_collector.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class test_collector.gd",
      "description": " ------------------------------------------------------------------------------\r\n Used to keep track of info about each test ran.\r\n ------------------------------------------------------------------------------\r\n indicator if it passed or not.  defaults to true since it takes only\r\n one failure to make it not pass.  _fail in gut will set this.\r\n the name of the function\r\n flag to know if the name has been printed yet.\r\n the number of arguments the method has\r\n The number of asserts in the test\r\n if the test has been marked pending at anypont during\r\n execution.\r\n",
      "sub_classes": [
        {
          "name": "Test",
          "path": "res://addons/gut/test_collector.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class Test",
          "description": " ------------------------------------------------------------------------------\r\n Used to keep track of info about each test ran.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "passed",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var passed",
              "description": " ------------------------------------------------------------------------------\r\n Used to keep track of info about each test ran.\r\n ------------------------------------------------------------------------------\r\n indicator if it passed or not.  defaults to true since it takes only\r\n one failure to make it not pass.  _fail in gut will set this.\r\n"
            },
            {
              "name": "name",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var name",
              "description": " ------------------------------------------------------------------------------\r\n Used to keep track of info about each test ran.\r\n ------------------------------------------------------------------------------\r\n indicator if it passed or not.  defaults to true since it takes only\r\n one failure to make it not pass.  _fail in gut will set this.\r\n the name of the function\r\n"
            },
            {
              "name": "has_printed_name",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var has_printed_name",
              "description": " ------------------------------------------------------------------------------\r\n Used to keep track of info about each test ran.\r\n ------------------------------------------------------------------------------\r\n indicator if it passed or not.  defaults to true since it takes only\r\n one failure to make it not pass.  _fail in gut will set this.\r\n the name of the function\r\n flag to know if the name has been printed yet.\r\n"
            },
            {
              "name": "arg_count",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var arg_count",
              "description": " ------------------------------------------------------------------------------\r\n Used to keep track of info about each test ran.\r\n ------------------------------------------------------------------------------\r\n indicator if it passed or not.  defaults to true since it takes only\r\n one failure to make it not pass.  _fail in gut will set this.\r\n the name of the function\r\n flag to know if the name has been printed yet.\r\n the number of arguments the method has\r\n"
            },
            {
              "name": "assert_count",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var assert_count",
              "description": " ------------------------------------------------------------------------------\r\n Used to keep track of info about each test ran.\r\n ------------------------------------------------------------------------------\r\n indicator if it passed or not.  defaults to true since it takes only\r\n one failure to make it not pass.  _fail in gut will set this.\r\n the name of the function\r\n flag to know if the name has been printed yet.\r\n the number of arguments the method has\r\n The number of asserts in the test\r\n"
            },
            {
              "name": "pending",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var pending",
              "description": " ------------------------------------------------------------------------------\r\n Used to keep track of info about each test ran.\r\n ------------------------------------------------------------------------------\r\n indicator if it passed or not.  defaults to true since it takes only\r\n one failure to make it not pass.  _fail in gut will set this.\r\n the name of the function\r\n flag to know if the name has been printed yet.\r\n the number of arguments the method has\r\n The number of asserts in the test\r\n if the test has been marked pending at anypont during\r\n execution.\r\n"
            }
          ],
          "signals": [

          ],
          "methods": [

          ],
          "static_functions": [

          ]
        },
        {
          "name": "TestScript",
          "path": "res://addons/gut/test_collector.gd",
          "extends_class": [

          ],
          "extends_file": "",
          "icon": "",
          "signature": "class TestScript",
          "description": " ------------------------------------------------------------------------------\r\n This holds all the meta information for a test script.  It contains the\r\n name of the inner class and an array of Test \"structs\".\r\n\r\n This class also facilitates all the exporting and importing of tests.\r\n ------------------------------------------------------------------------------\r\n",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [
            {
              "name": "inner_class_name",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var inner_class_name",
              "description": " ------------------------------------------------------------------------------\r\n This holds all the meta information for a test script.  It contains the\r\n name of the inner class and an array of Test \"structs\".\r\n\r\n This class also facilitates all the exporting and importing of tests.\r\n ------------------------------------------------------------------------------\r\n"
            },
            {
              "name": "tests",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var tests",
              "description": ""
            },
            {
              "name": "path",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var path",
              "description": ""
            },
            {
              "name": "_utils",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _utils",
              "description": ""
            },
            {
              "name": "_lgr",
              "data_type": "var",
              "default_value": null,
              "setter": "",
              "getter": "",
              "export": false,
              "signature": "var _lgr",
              "description": ""
            }
          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "_init",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _init(utils = null, logger = null)",
              "description": "",
              "arguments": [
                {
                  "name": "utils",
                  "type": "var",
                  "default_value": null
                },
                {
                  "name": "logger",
                  "type": "var",
                  "default_value": null
                }
              ]
            },
            {
              "name": "to_s",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func to_s()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_new",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_new()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "load_script",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func load_script()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_filename_and_inner",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_filename_and_inner()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_full_name",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_full_name()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "get_filename",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_filename()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "has_inner_class",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func has_inner_class()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "export_to",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func export_to(config_file, section)",
              "description": " Note:  although this no longer needs to export the inner_class names since\r\n        they are pulled from metadata now, it is easier to leave that in\r\n        so we don't have to cut the export down to unique script names.\r\n",
              "arguments": [
                {
                  "name": "config_file",
                  "type": "var"
                },
                {
                  "name": "section",
                  "type": "var"
                }
              ]
            },
            {
              "name": "_remap_path",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func _remap_path(source_path)",
              "description": "",
              "arguments": [
                {
                  "name": "source_path",
                  "type": "var"
                }
              ]
            },
            {
              "name": "import_from",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func import_from(config_file, section)",
              "description": "",
              "arguments": [
                {
                  "name": "config_file",
                  "type": "var"
                },
                {
                  "name": "section",
                  "type": "var"
                }
              ]
            },
            {
              "name": "get_test_named",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func get_test_named(name)",
              "description": "",
              "arguments": [
                {
                  "name": "name",
                  "type": "var"
                }
              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scripts",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scripts",
          "description": " ------------------------------------------------------------------------------\r\n start test_collector, I don't think I like the name.\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_test_prefix",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _test_prefix",
          "description": " ------------------------------------------------------------------------------\r\n start test_collector, I don't think I like the name.\r\n ------------------------------------------------------------------------------\r\n"
        },
        {
          "name": "_test_class_prefix",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _test_class_prefix",
          "description": ""
        },
        {
          "name": "_utils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _utils",
          "description": ""
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_does_inherit_from_test",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _does_inherit_from_test(thing)",
          "description": "",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "_populate_tests",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _populate_tests(test_script)",
          "description": "",
          "arguments": [
            {
              "name": "test_script",
              "type": "var"
            }
          ]
        },
        {
          "name": "_get_inner_test_class_names",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_inner_test_class_names(loaded)",
          "description": "",
          "arguments": [
            {
              "name": "loaded",
              "type": "var"
            }
          ]
        },
        {
          "name": "_parse_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _parse_script(test_script)",
          "description": "",
          "arguments": [
            {
              "name": "test_script",
              "type": "var"
            }
          ]
        },
        {
          "name": "add_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_script(path)",
          "description": " -----------------\r\n Public\r\n -----------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "clear",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "has_script",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func has_script(path)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "export_tests",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func export_tests(path)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "import_tests",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func import_tests(path)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_script_named",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_script_named(name)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_test_named",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_test_named(script_name, test_name)",
          "description": "",
          "arguments": [
            {
              "name": "script_name",
              "type": "var"
            },
            {
              "name": "test_name",
              "type": "var"
            }
          ]
        },
        {
          "name": "to_s",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func to_s()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": " ---------------------\r\n Accessors\r\n ---------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "set_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_logger(logger)",
          "description": "",
          "arguments": [
            {
              "name": "logger",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_test_prefix",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_test_prefix()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_test_prefix",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_test_prefix(test_prefix)",
          "description": "",
          "arguments": [
            {
              "name": "test_prefix",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_test_class_prefix",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_test_class_prefix()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "set_test_class_prefix",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_test_class_prefix(test_class_prefix)",
          "description": "",
          "arguments": [
            {
              "name": "test_class_prefix",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "thing_counter.gd",
      "path": "res://addons/gut/thing_counter.gd",
      "extends_class": [

      ],
      "extends_file": "",
      "icon": "",
      "signature": "class thing_counter.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "things",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "class thing_counter.gd",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_unique_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_unique_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "add",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add(thing)",
          "description": "",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "has",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func has(thing)",
          "description": "",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "get",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get(thing)",
          "description": "",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "sum",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func sum()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "to_s",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func to_s()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_max_count",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_max_count()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "add_array_items",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_array_items(array)",
          "description": "",
          "arguments": [
            {
              "name": "array",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "UserFileViewer.gd",
      "path": "res://addons/gut/UserFileViewer.gd",
      "extends_class": [
        "WindowDialog"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class UserFileViewer.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "rtl",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var rtl",
          "description": ""
        },
        {
          "name": "_has_opened_file",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _has_opened_file",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_get_file_as_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_file_as_text(path)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_OpenFile_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_OpenFile_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_FileDialog_file_selected",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FileDialog_file_selected(path)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_Close_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Close_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "show_file",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func show_file(path)",
          "description": "",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "show_open",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func show_open()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_FileDialog_popup_hide",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FileDialog_popup_hide()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "get_rich_text_label",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_rich_text_label()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_Home_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Home_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_End_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_End_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_on_Copy_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Copy_pressed()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "utils.gd",
      "path": "res://addons/gut/utils.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class utils.gd",
      "description": " ##############################################################################\r\n(G)odot (U)nit (T)est class\r\n\r\n ##############################################################################\r\n The MIT License (MIT)\r\n =====================\r\n\r\n Copyright (c) 2020 Tom \"Butch\" Wesley\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n ##############################################################################\r\n Description\r\n -----------\r\n This class is a PSUEDO SINGLETON.  You should not make instances of it but use\r\n the get_instance static method.\r\n ##############################################################################\r\n",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "DIFF",
          "value": {
            "DEEP": 0,
            "SHALLOW": 1,
            "SIMPLE": 2
          },
          "data_type": "Dictionary",
          "signature": "const DIFF: Dictionary = {\"DEEP\":0,\"SHALLOW\":1,\"SIMPLE\":2}",
          "description": ""
        },
        {
          "name": "DOUBLE_STRATEGY",
          "value": {
            "FULL": 0,
            "PARTIAL": 1
          },
          "data_type": "Dictionary",
          "signature": "const DOUBLE_STRATEGY: Dictionary = {\"FULL\":0,\"PARTIAL\":1}",
          "description": ""
        },
        {
          "name": "GUT_METADATA",
          "value": "__gut_metadata_",
          "data_type": "String",
          "signature": "const GUT_METADATA: String = \"__gut_metadata_\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "Logger",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Logger",
          "description": " everything should use get_logger\n"
        },
        {
          "name": "_lgr",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _lgr",
          "description": ""
        },
        {
          "name": "_test_mode",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _test_mode",
          "description": ""
        },
        {
          "name": "AutoFree",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var AutoFree",
          "description": ""
        },
        {
          "name": "Comparator",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Comparator",
          "description": ""
        },
        {
          "name": "CompareResult",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var CompareResult",
          "description": ""
        },
        {
          "name": "DiffTool",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var DiffTool",
          "description": ""
        },
        {
          "name": "Doubler",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Doubler",
          "description": ""
        },
        {
          "name": "Gut",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Gut",
          "description": ""
        },
        {
          "name": "HookScript",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var HookScript",
          "description": ""
        },
        {
          "name": "MethodMaker",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var MethodMaker",
          "description": ""
        },
        {
          "name": "OneToMany",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var OneToMany",
          "description": ""
        },
        {
          "name": "OrphanCounter",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var OrphanCounter",
          "description": ""
        },
        {
          "name": "ParameterFactory",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ParameterFactory",
          "description": ""
        },
        {
          "name": "ParameterHandler",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ParameterHandler",
          "description": ""
        },
        {
          "name": "Printers",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Printers",
          "description": ""
        },
        {
          "name": "Spy",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Spy",
          "description": ""
        },
        {
          "name": "Strutils",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Strutils",
          "description": ""
        },
        {
          "name": "Stubber",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Stubber",
          "description": ""
        },
        {
          "name": "StubParams",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var StubParams",
          "description": ""
        },
        {
          "name": "Summary",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Summary",
          "description": ""
        },
        {
          "name": "Test",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Test",
          "description": ""
        },
        {
          "name": "TestCollector",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var TestCollector",
          "description": ""
        },
        {
          "name": "ThingCounter",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ThingCounter",
          "description": ""
        },
        {
          "name": "version",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var version",
          "description": " Source of truth for the GUT version\r\n"
        },
        {
          "name": "req_godot",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var req_godot",
          "description": " Source of truth for the GUT version\r\n The required Godot version as an array.\r\n"
        },
        {
          "name": "_file_checker",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _file_checker",
          "description": " Source of truth for the GUT version\r\n The required Godot version as an array.\r\n Used for doing file manipulation stuff so as to not keep making File instances.\r\n could be a bit of overkill but who cares.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_version_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_version_text()",
          "description": " ------------------------------------------------------------------------------\r\n Blurb of text with GUT and Godot versions.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_bad_version_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_bad_version_text()",
          "description": " ------------------------------------------------------------------------------\r\n Returns a nice string for erroring out when we have a bad Godot version.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "is_version_ok",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_version_ok(engine_info, required)",
          "description": " ------------------------------------------------------------------------------\r\n Checks the Godot version against req_godot array.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "engine_info",
              "type": "var"
            },
            {
              "name": "required",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_logger",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_logger()",
          "description": " ------------------------------------------------------------------------------\r\n Everything should get a logger through this.\r\n\r\n When running in test mode this will always return a new logger so that errors\r\n are not caused by getting bad warn/error/etc counts.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "split_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func split_string(to_split, delim)",
          "description": " ------------------------------------------------------------------------------\r\n Returns an array created by splitting the string by the delimiter\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "to_split",
              "type": "var"
            },
            {
              "name": "delim",
              "type": "var"
            }
          ]
        },
        {
          "name": "join_array",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func join_array(a, delim)",
          "description": " ------------------------------------------------------------------------------\r\n Returns a string containing all the elements in the array separated by delim\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "a",
              "type": "var"
            },
            {
              "name": "delim",
              "type": "var"
            }
          ]
        },
        {
          "name": "nvl",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func nvl(value, if_null)",
          "description": " ------------------------------------------------------------------------------\r\n return if_null if value is null otherwise return value\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            },
            {
              "name": "if_null",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_freed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_freed(obj)",
          "description": " ------------------------------------------------------------------------------\r\n returns true if the object has been freed, false if not\r\n\r\n From what i've read, the weakref approach should work.  It seems to work most\r\n of the time but sometimes it does not catch it.  The str comparison seems to\r\n fill in the gaps.  I've not seen any errors after adding that check.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_not_freed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_not_freed(obj)",
          "description": " ------------------------------------------------------------------------------\r\n Pretty self explanitory.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_double",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_double(obj)",
          "description": " ------------------------------------------------------------------------------\r\n Checks if the passed in object is a GUT Double or Partial Double.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_instance",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_instance(obj)",
          "description": " ------------------------------------------------------------------------------\r\n Checks if the passed in is an instance of a class\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "obj",
              "type": "var"
            }
          ]
        },
        {
          "name": "extract_property_from_array",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func extract_property_from_array(source, property)",
          "description": " ------------------------------------------------------------------------------\r\n Returns an array of values by calling get(property) on each element in source\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "source",
              "type": "var"
            },
            {
              "name": "property",
              "type": "var"
            }
          ]
        },
        {
          "name": "file_exists",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func file_exists(path)",
          "description": " ------------------------------------------------------------------------------\r\n true if file exists, false if not.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "write_file",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func write_file(path, content)",
          "description": " ------------------------------------------------------------------------------\r\n Write a file.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            },
            {
              "name": "content",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_null_or_empty",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_null_or_empty(text)",
          "description": " ------------------------------------------------------------------------------\r\n true if what is passed in is null or an empty string.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "text",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_native_class_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_native_class_name(thing)",
          "description": " ------------------------------------------------------------------------------\r\n Get the name of a native class or null if the object passed in is not a\r\n native class.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_native_class",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func is_native_class(thing)",
          "description": " ------------------------------------------------------------------------------\r\n Checks an object to see if it is a GDScriptNativeClass\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "thing",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_file_as_text",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_file_as_text(path)",
          "description": " ------------------------------------------------------------------------------\r\n Returns the text of a file or an empty string if the file could not be opened.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "path",
              "type": "var"
            }
          ]
        },
        {
          "name": "search_array",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func search_array(ar, prop_method, value)",
          "description": " ------------------------------------------------------------------------------\r\n Loops through an array of things and calls a method or checks a property on\r\n each element until it finds the returned value.  The item in the array is\r\n returned or null if it is not found.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [
            {
              "name": "ar",
              "type": "var"
            },
            {
              "name": "prop_method",
              "type": "var"
            },
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "are_datatypes_same",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func are_datatypes_same(got, expected)",
          "description": "",
          "arguments": [
            {
              "name": "got",
              "type": "var"
            },
            {
              "name": "expected",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [
        {
          "name": "INSTANCE_NAME",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func INSTANCE_NAME()",
          "description": " ------------------------------------------------------------------------------\r\n The instance name as a function since you can't have static variables.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_root_node",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_root_node()",
          "description": " ------------------------------------------------------------------------------\r\n Gets the root node without having to be in the tree and pushing out an error\r\n if we don't have a main loop ready to go yet.\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_instance",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_instance()",
          "description": " ------------------------------------------------------------------------------\r\n Get the ONE instance of utils\r\n ------------------------------------------------------------------------------\r\n",
          "arguments": [

          ]
        }
      ]
    },
    {
      "name": "HTTPSSEClient.gd",
      "path": "res://addons/http-sse-client/HTTPSSEClient.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class HTTPSSEClient.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "data_tag",
          "value": "data:",
          "data_type": "String",
          "signature": "const data_tag: String = \"data:\"",
          "description": ""
        },
        {
          "name": "continue_internal",
          "value": "continue_internal",
          "data_type": "String",
          "signature": "const continue_internal: String = \"continue_internal\"",
          "description": ""
        },
        {
          "name": "event_tag",
          "value": "event:",
          "data_type": "String",
          "signature": "const event_tag: String = \"event:\"",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "httpclient",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var httpclient",
          "description": ""
        },
        {
          "name": "is_connected",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_connected",
          "description": ""
        },
        {
          "name": "domain",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var domain",
          "description": ""
        },
        {
          "name": "url_after_domain",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var url_after_domain",
          "description": ""
        },
        {
          "name": "port",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var port",
          "description": ""
        },
        {
          "name": "use_ssl",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var use_ssl",
          "description": ""
        },
        {
          "name": "verify_host",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var verify_host",
          "description": ""
        },
        {
          "name": "told_to_connect",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var told_to_connect",
          "description": ""
        },
        {
          "name": "connection_in_progress",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var connection_in_progress",
          "description": ""
        },
        {
          "name": "request_in_progress",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var request_in_progress",
          "description": ""
        },
        {
          "name": "is_requested",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_requested",
          "description": ""
        },
        {
          "name": "response_body",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var response_body",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "new_sse_event",
          "arguments": [
            "headers",
            "event",
            "data"
          ],
          "signature": "signal new_sse_event(headers, event, data)",
          "description": ""
        },
        {
          "name": "connected",
          "arguments": [

          ],
          "signature": "signal connected()",
          "description": ""
        },
        {
          "name": "connection_error",
          "arguments": [
            "error"
          ],
          "signature": "signal connection_error(error)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "connect_to_host",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func connect_to_host(domain: String, url_after_domain: String, port: int = -1, use_ssl: bool = false, verify_host: bool = true)",
          "description": "",
          "arguments": [
            {
              "name": "domain",
              "type": "String"
            },
            {
              "name": "url_after_domain",
              "type": "String"
            },
            {
              "name": "port",
              "type": "int",
              "default_value": -1
            },
            {
              "name": "use_ssl",
              "type": "bool",
              "default_value": false
            },
            {
              "name": "verify_host",
              "type": "bool",
              "default_value": true
            }
          ]
        },
        {
          "name": "attempt_to_connect",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func attempt_to_connect()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "attempt_to_request",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func attempt_to_request(httpclient_status)",
          "description": "",
          "arguments": [
            {
              "name": "httpclient_status",
              "type": "var"
            }
          ]
        },
        {
          "name": "_process",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _process(delta)",
          "description": "",
          "arguments": [
            {
              "name": "delta",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_event_data",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func get_event_data(body: String) -> Dictionary",
          "description": "",
          "arguments": [
            {
              "name": "body",
              "type": "String"
            }
          ]
        },
        {
          "name": "_exit_tree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _exit_tree()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "httpsseclient_plugin.gd",
      "path": "res://addons/http-sse-client/httpsseclient_plugin.gd",
      "extends_class": [
        "EditorPlugin"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class httpsseclient_plugin.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_enter_tree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _enter_tree()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "_exit_tree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _exit_tree()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "class_doc_generator.gd",
      "path": "res://addons/silicon.util.custom_docs/class_doc_generator.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class class_doc_generator.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [
        {
          "name": "_GD_TYPES",
          "value": [
            "",
            "bool",
            "int",
            "float",
            "String",
            "Vector2",
            "Rect2",
            "Vector3",
            "Transform2D",
            "Plane",
            "Quat",
            "AABB",
            "Basis",
            "Transform",
            "Color",
            "NodePath",
            "RID",
            "Object",
            "Dictionary",
            "Array",
            "PoolByteArray",
            "PoolIntArray",
            "PoolRealArray",
            "PoolStringArray",
            "PoolVector2Array",
            "PoolVector3Array",
            "PoolColorArray"
          ],
          "data_type": "Array",
          "signature": "const _GD_TYPES: Array = [\"\",\"bool\",\"int\",\"float\",\"String\",\"Vector2\",\"Rect2\",\"Vector3\",\"Transform2D\",\"Plane\",\"Quat\",\"AABB\",\"Basis\",\"Transform\",\"Color\",\"NodePath\",\"RID\",\"Object\",\"Dictionary\",\"Array\",\"PoolByteArray\",\"PoolIntArray\",\"PoolRealArray\",\"PoolStringArray\",\"PoolVector2Array\",\"PoolVector3Array\",\"PoolColorArray\"]",
          "description": ""
        }
      ],
      "members": [
        {
          "name": "_pending_docs",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _pending_docs: Dictionary",
          "description": ""
        },
        {
          "name": "_docs_queue",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _docs_queue: Array",
          "description": ""
        },
        {
          "name": "plugin",
          "data_type": "EditorPlugin",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var plugin: EditorPlugin",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_update",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _update() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "generate",
          "return_type": "ClassDocItem",
          "rpc_mode": 0,
          "signature": "func generate(name: String, base: String, script_path: String) -> ClassDocItem",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "base",
              "type": "String"
            },
            {
              "name": "script_path",
              "type": "String"
            }
          ]
        },
        {
          "name": "_generate",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _generate(doc: ClassDocItem) -> String",
          "description": "",
          "arguments": [
            {
              "name": "doc",
              "type": "ClassDocItem"
            }
          ]
        },
        {
          "name": "_create_method_doc",
          "return_type": "MethodDocItem",
          "rpc_mode": 0,
          "signature": "func _create_method_doc(name: String, script: Script = null, method: Dictionary) -> MethodDocItem",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "script",
              "type": "Script",
              "default_value": null
            },
            {
              "name": "method",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_create_property_doc",
          "return_type": "PropertyDocItem",
          "rpc_mode": 0,
          "signature": "func _create_property_doc(name: String, script: Script = null, property: Dictionary) -> PropertyDocItem",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "script",
              "type": "Script",
              "default_value": null
            },
            {
              "name": "property",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_type_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _type_string(type: int, _class_name: String) -> String",
          "description": "",
          "arguments": [
            {
              "name": "type",
              "type": "int"
            },
            {
              "name": "_class_name",
              "type": "String"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "DocExporter",
      "path": "res://addons/silicon.util.custom_docs/doc_exporter/doc_exporter.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class DocExporter",
      "description": "# The base class for every document exporter.\r\n# @contribute https://placeholder_contribute.com\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_generate",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _generate(doc: ClassDocItem) -> String",
          "description": "# @virtual\r\n# @args doc\r\n# @arg-types ClassDocItem\r\n# This function gets called to generate a document string from a [ClassDocItem].\r\n",
          "arguments": [
            {
              "name": "doc",
              "type": "ClassDocItem"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "editor_help_doc_exporter.gd",
      "path": "res://addons/silicon.util.custom_docs/doc_exporter/editor_help_doc_exporter.gd",
      "extends_class": [
        "DocExporter"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class editor_help_doc_exporter.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "plugin",
          "data_type": "EditorPlugin",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var plugin: EditorPlugin",
          "description": ""
        },
        {
          "name": "label",
          "data_type": "RichTextLabel",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var label: RichTextLabel",
          "description": ""
        },
        {
          "name": "class_docs",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var class_docs: Dictionary",
          "description": ""
        },
        {
          "name": "editor_settings",
          "data_type": "EditorSettings",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var editor_settings: EditorSettings",
          "description": ""
        },
        {
          "name": "theme",
          "data_type": "Theme",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var theme: Theme",
          "description": ""
        },
        {
          "name": "class_list",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var class_list: Array",
          "description": ""
        },
        {
          "name": "section_lines",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var section_lines: Array",
          "description": ""
        },
        {
          "name": "description_line",
          "data_type": "int",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var description_line: int",
          "description": ""
        },
        {
          "name": "signal_line",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var signal_line: Dictionary",
          "description": ""
        },
        {
          "name": "method_line",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var method_line: Dictionary",
          "description": ""
        },
        {
          "name": "property_line",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var property_line: Dictionary",
          "description": ""
        },
        {
          "name": "enum_line",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var enum_line: Dictionary",
          "description": ""
        },
        {
          "name": "constant_line",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var constant_line: Dictionary",
          "description": ""
        },
        {
          "name": "doc_font",
          "data_type": "Font",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var doc_font: Font",
          "description": ""
        },
        {
          "name": "doc_bold_font",
          "data_type": "Font",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var doc_bold_font: Font",
          "description": ""
        },
        {
          "name": "doc_title_font",
          "data_type": "Font",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var doc_title_font: Font",
          "description": ""
        },
        {
          "name": "doc_code_font",
          "data_type": "Font",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var doc_code_font: Font",
          "description": ""
        },
        {
          "name": "title_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var title_color: Color",
          "description": ""
        },
        {
          "name": "text_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var text_color: Color",
          "description": ""
        },
        {
          "name": "headline_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var headline_color: Color",
          "description": ""
        },
        {
          "name": "base_type_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var base_type_color: Color",
          "description": ""
        },
        {
          "name": "comment_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var comment_color: Color",
          "description": ""
        },
        {
          "name": "symbol_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var symbol_color: Color",
          "description": ""
        },
        {
          "name": "value_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var value_color: Color",
          "description": ""
        },
        {
          "name": "qualifier_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var qualifier_color: Color",
          "description": ""
        },
        {
          "name": "type_color",
          "data_type": "Color",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var type_color: Color",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_generate",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _generate(doc: ClassDocItem) -> String",
          "description": "",
          "arguments": [
            {
              "name": "doc",
              "type": "ClassDocItem"
            }
          ]
        },
        {
          "name": "update_theme_vars",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func update_theme_vars() -> null",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "add_type",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_type(type: String, _enum: String)",
          "description": "",
          "arguments": [
            {
              "name": "type",
              "type": "String"
            },
            {
              "name": "_enum",
              "type": "String"
            }
          ]
        },
        {
          "name": "add_method",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func add_method(method: MethodDocItem, overview: bool) -> null",
          "description": "",
          "arguments": [
            {
              "name": "method",
              "type": "MethodDocItem"
            },
            {
              "name": "overview",
              "type": "bool"
            }
          ]
        },
        {
          "name": "add_text",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func add_text(bbcode: String) -> null",
          "description": "",
          "arguments": [
            {
              "name": "bbcode",
              "type": "String"
            }
          ]
        },
        {
          "name": "sort_methods",
          "return_type": "bool",
          "rpc_mode": 0,
          "signature": "func sort_methods(a: Dictionary, b: Dictionary) -> bool",
          "description": "",
          "arguments": [
            {
              "name": "a",
              "type": "Dictionary"
            },
            {
              "name": "b",
              "type": "Dictionary"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ArgumentDocItem",
      "path": "res://addons/silicon.util.custom_docs/doc_item/argument_doc_item.gd",
      "extends_class": [
        "DocItem"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ArgumentDocItem",
      "description": "# An object that contains documentation data about an argument of a signal or method.\r\n# @contribute https://placeholder_contribute.com\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "default",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var default: String",
          "description": "# @default \"\"\r\n# The default value of the argument.\r\n"
        },
        {
          "name": "enumeration",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var enumeration: String",
          "description": "# @default \"\"\r\n# The enumeration of [member default].\r\n"
        },
        {
          "name": "type",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var type: String",
          "description": "# @default \"\"\r\n# The class/built-in type of [member default].\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(args: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "args",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ClassDocItem",
      "path": "res://addons/silicon.util.custom_docs/doc_item/class_doc_item.gd",
      "extends_class": [
        "DocItem"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ClassDocItem",
      "description": "# An object that contains documentation data about a class.\r\n# @contribute https://placeholder_contribute.com\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "base",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var base: String",
          "description": "# The base class this class extends from.\n"
        },
        {
          "name": "path",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var path: String",
          "description": "# The file location of this class' script.\n"
        },
        {
          "name": "brief",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var brief: String",
          "description": "# A brief description of the class.\n"
        },
        {
          "name": "description",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var description: String",
          "description": "# A full description of the class.\n"
        },
        {
          "name": "methods",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var methods: Array",
          "description": "# A list of method documents.\n"
        },
        {
          "name": "properties",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var properties: Array",
          "description": "# A list of property documents.\n"
        },
        {
          "name": "signals",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var signals: Array",
          "description": "# A list of signal documents.\n"
        },
        {
          "name": "constants",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var constants: Array",
          "description": "# A list of constant documents, including enumerators.\n"
        },
        {
          "name": "tutorials",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var tutorials: Array",
          "description": "# A list of tutorials that helps to understand this class.\n"
        },
        {
          "name": "contriute_url",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var contriute_url: String",
          "description": "# @default \"\"\r\n# A link to where the user can contribute to the class' documentation.\r\n"
        },
        {
          "name": "is_singleton",
          "data_type": "bool",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_singleton: bool",
          "description": "# @default false\r\n# Whether the class is a singleton.\r\n"
        },
        {
          "name": "icon",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var icon: String",
          "description": "# @default false\r\n# Whether the class is a singleton.\r\n# A path to the class icon if any.\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(args: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "args",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "get_method_doc",
          "return_type": "MethodDocItem",
          "rpc_mode": 0,
          "signature": "func get_method_doc(name: String) -> MethodDocItem",
          "description": "# @args name\r\n# @return MethodDocItem\r\n# Gets a method document called [code]name[/code].\r\n",
          "arguments": [
            {
              "name": "name",
              "type": "String"
            }
          ]
        },
        {
          "name": "get_property_doc",
          "return_type": "PropertyDocItem",
          "rpc_mode": 0,
          "signature": "func get_property_doc(name: String) -> PropertyDocItem",
          "description": "# @args name\r\n# @return PropertyDocItem\r\n# Gets a signal document called [code]name[/code].\r\n",
          "arguments": [
            {
              "name": "name",
              "type": "String"
            }
          ]
        },
        {
          "name": "get_signal_doc",
          "return_type": "SignalDocItem",
          "rpc_mode": 0,
          "signature": "func get_signal_doc(name: String) -> SignalDocItem",
          "description": "# @args name\r\n# @return SignalDocItem\r\n# Gets a signal document called [code]name[/code].\r\n",
          "arguments": [
            {
              "name": "name",
              "type": "String"
            }
          ]
        },
        {
          "name": "get_constant_doc",
          "return_type": "ConstantDocItem",
          "rpc_mode": 0,
          "signature": "func get_constant_doc(name: String) -> ConstantDocItem",
          "description": "# @args name\r\n# @return ConstantlDocItem\r\n# Gets a signal document called [code]name[/code].\r\n",
          "arguments": [
            {
              "name": "name",
              "type": "String"
            }
          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ConstantDocItem",
      "path": "res://addons/silicon.util.custom_docs/doc_item/constant_doc_item.gd",
      "extends_class": [
        "DocItem"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ConstantDocItem",
      "description": "# An object that contains documentation data about a constant.\r\n# @contribute https://placeholder_contribute.com\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "description",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var description: String",
          "description": "# @default \"\"\r\n# A description of the constant.\r\n"
        },
        {
          "name": "value",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var value: String",
          "description": "# @default \"\"\r\n# The value of the constant in a string form.\r\n"
        },
        {
          "name": "enumeration",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var enumeration: String",
          "description": "# @default \"\"\r\n# The [member value]'s enumeration.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(args: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "args",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "DocItem",
      "path": "res://addons/silicon.util.custom_docs/doc_item/doc_item.gd",
      "extends_class": [
        "Reference"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class DocItem",
      "description": "# The base class for all documentation items.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "name",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var name: String",
          "description": "# @default \"\"\r\n# The name of the documentation item.\r\n"
        },
        {
          "name": "meta",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var meta: Dictionary",
          "description": "# @default {}\r\n# The item's metadata.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [

      ]
    },
    {
      "name": "MethodDocItem",
      "path": "res://addons/silicon.util.custom_docs/doc_item/method_doc_item.gd",
      "extends_class": [
        "DocItem"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class MethodDocItem",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "description",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var description: String",
          "description": "# @default \"\"\r\n# A description of the method.\r\n"
        },
        {
          "name": "return_type",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var return_type: String",
          "description": "# @default \"\"\r\n# The return type of the method.\r\n"
        },
        {
          "name": "return_enum",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var return_enum: String",
          "description": "# @default \"\"\r\n# The enumerator of [member return_type].\r\n"
        },
        {
          "name": "args",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var args: Array",
          "description": "# @default []\r\n# A list of arguments the method takes in.\r\n"
        },
        {
          "name": "is_virtual",
          "data_type": "bool",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_virtual: bool",
          "description": "# @default false\r\n# Whether the method is to be overriden in an extended class, similar to [Node._ready].\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(args: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "args",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "PropertyDocItem",
      "path": "res://addons/silicon.util.custom_docs/doc_item/property_doc_item.gd",
      "extends_class": [
        "DocItem"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class PropertyDocItem",
      "description": "# An object that contains documentation data about a property.\r\n# @contribute https://placeholder_contribute.com\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "description",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var description: String",
          "description": "# @default \"\"\r\n# A description of the property.\r\n"
        },
        {
          "name": "default",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var default: String",
          "description": "# @default \"\"\r\n# The default of the property in string form.\r\n"
        },
        {
          "name": "enumeration",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var enumeration: String",
          "description": "# @default \"\"\r\n# The enumeration of [member default].\r\n"
        },
        {
          "name": "type",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var type: String",
          "description": "# @default \"\"\r\n# The class/built-in type of [member default].\r\n"
        },
        {
          "name": "setter",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var setter: String",
          "description": "# @default \"\"\r\n# The setter method of the property.\r\n"
        },
        {
          "name": "getter",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var getter: String",
          "description": "# @default \"\"\r\n# The getter method of the property.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(args: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "args",
              "type": "Dictionary"
            }
          ]
        },
        {
          "name": "_to_string",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func _to_string() -> String",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "SignalDocItem",
      "path": "res://addons/silicon.util.custom_docs/doc_item/signal_doc_item.gd",
      "extends_class": [
        "DocItem"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class SignalDocItem",
      "description": "# An object that contains documentation data about a signal.\r\n# @contribute https://placeholder_contribute.com\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "description",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var description: String",
          "description": "# @default \"\"\r\n# A description of the signal.\r\n"
        },
        {
          "name": "args",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var args: Array",
          "description": "# @default []\r\n# A list of arguments the signal carries.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init(args: Dictionary) -> null",
          "description": "",
          "arguments": [
            {
              "name": "args",
              "type": "Dictionary"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "plugin.gd",
      "path": "res://addons/silicon.util.custom_docs/plugin.gd",
      "extends_class": [
        "EditorPlugin"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class plugin.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [

      ]
    },
    {
      "name": "Collector.gd",
      "path": "res://Collector.gd",
      "extends_class": [
        "SceneTree"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Collector.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "find_files",
          "return_type": "PoolStringArray",
          "rpc_mode": 0,
          "signature": "func find_files(dirpath: String = \"\", patterns: PoolStringArray = [], is_recursive: bool = false, do_skip_hidden: bool = true) -> PoolStringArray",
          "description": " Returns a list of file paths found in the directory.\n\n **Arguments**\n\n - dirpath: path to the directory from which to search files.\n - patterns: an array of string match patterns, where \"*\" matches zero or more\n   arbitrary characters and \"?\" matches any single character except a period\n   (\".\"). You can use it to find files by extensions. To find only GDScript\n   files, [\"*.gd\"]\n - is_recursive: if `true`, walks over subdirectories recursively, returning all\n   files in the tree.\n",
          "arguments": [
            {
              "name": "dirpath",
              "type": "String",
              "default_value": ""
            },
            {
              "name": "patterns",
              "type": "PoolStringArray",
              "default_value": [

              ]
            },
            {
              "name": "is_recursive",
              "type": "bool",
              "default_value": false
            },
            {
              "name": "do_skip_hidden",
              "type": "bool",
              "default_value": true
            }
          ]
        },
        {
          "name": "save_text",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func save_text(path: String = \"\", content: String = \"\") -> null",
          "description": " Saves text to a file.\n",
          "arguments": [
            {
              "name": "path",
              "type": "String",
              "default_value": ""
            },
            {
              "name": "content",
              "type": "String",
              "default_value": ""
            }
          ]
        },
        {
          "name": "get_reference",
          "return_type": "Dictionary",
          "rpc_mode": 0,
          "signature": "func get_reference(files: PoolStringArray = [], refresh_cache: bool = false) -> Dictionary",
          "description": " Parses a list of GDScript files and returns a list of dictionaries with the\n code reference data.\n\n If `refresh_cache` is true, will refresh Godot's cache and get fresh symbols.\n",
          "arguments": [
            {
              "name": "files",
              "type": "PoolStringArray",
              "default_value": [

              ]
            },
            {
              "name": "refresh_cache",
              "type": "bool",
              "default_value": false
            }
          ]
        },
        {
          "name": "print_pretty_json",
          "return_type": "String",
          "rpc_mode": 0,
          "signature": "func print_pretty_json(reference: Dictionary) -> String",
          "description": "",
          "arguments": [
            {
              "name": "reference",
              "type": "Dictionary"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "BaseCodeBlock",
      "path": "res://DungeonCrawler/CodeBlocks/BaseCodeBlock.gd",
      "extends_class": [
        "NinePatchRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class BaseCodeBlock",
      "description": " This is the base class that all code blocks will inherit from.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "is_code_block_wrapper",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_code_block_wrapper: bool = false",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_instruction()",
          "description": " To be overridden by code blks that inherit this script\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "CollectCodeBlock.gd",
      "path": "res://DungeonCrawler/CodeBlocks/CollectCodeBlock.gd",
      "extends_class": [
        "BaseCodeBlock"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class CollectCodeBlock.gd",
      "description": " Allows player to collect key\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "label",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var label: Label",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_instruction()",
          "description": " Gets instruction\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ElseCodeBlock.gd",
      "path": "res://DungeonCrawler/CodeBlocks/ElseCodeBlock.gd",
      "extends_class": [
        "BaseCodeBlock"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ElseCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "indented_space",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var indented_space = \"[Object:null]\"",
          "description": ""
        },
        {
          "name": "label",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var label: Label",
          "description": ""
        },
        {
          "name": "spaces",
          "data_type": "VBoxContainer",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var spaces: VBoxContainer",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "created_new_space_in_code_block_wrapper",
          "arguments": [
            "added_code_blk_wrapper"
          ],
          "signature": "signal created_new_space_in_code_block_wrapper(added_code_blk_wrapper)",
          "description": ""
        },
        {
          "name": "deleted_new_space_in_code_block_wrapper",
          "arguments": [
            "rect_min_size_to_delete"
          ],
          "signature": "signal deleted_new_space_in_code_block_wrapper(rect_min_size_to_delete)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": " Runs on load\n",
          "arguments": [

          ]
        },
        {
          "name": "create_new_space",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func create_new_space(added_code_blk_wrapper: bool) -> null",
          "description": " Creates new space\n",
          "arguments": [
            {
              "name": "added_code_blk_wrapper",
              "type": "bool"
            }
          ]
        },
        {
          "name": "delete_space_which_discarded_block_originated",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func delete_space_which_discarded_block_originated(data_dict_of_discarded_block) -> null",
          "description": " Deletes space of the discarded block\n",
          "arguments": [
            {
              "name": "data_dict_of_discarded_block",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_instruction()",
          "description": " Gets instruction\n",
          "arguments": [

          ]
        },
        {
          "name": "get_reference_to_occupied_code_block_based_on_space_index",
          "return_type": "Node",
          "rpc_mode": 0,
          "signature": "func get_reference_to_occupied_code_block_based_on_space_index(space_index: int) -> Node",
          "description": " This function is to read the instructions of the code blocks within this repeat code block\n",
          "arguments": [
            {
              "name": "space_index",
              "type": "int"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "IfCodeBlock.gd",
      "path": "res://DungeonCrawler/CodeBlocks/IfCodeBlock.gd",
      "extends_class": [
        "BaseCodeBlock"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class IfCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "indented_space",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var indented_space = \"[Object:null]\"",
          "description": ""
        },
        {
          "name": "label",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var label: Label",
          "description": ""
        },
        {
          "name": "can_option_button",
          "data_type": "OptionButton",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var can_option_button: OptionButton",
          "description": ""
        },
        {
          "name": "walk_direction_option_button",
          "data_type": "OptionButton",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var walk_direction_option_button: OptionButton",
          "description": ""
        },
        {
          "name": "spaces",
          "data_type": "VBoxContainer",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var spaces: VBoxContainer",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "created_new_space_in_code_block_wrapper",
          "arguments": [
            "added_code_blk_wrapper"
          ],
          "signature": "signal created_new_space_in_code_block_wrapper(added_code_blk_wrapper)",
          "description": ""
        },
        {
          "name": "deleted_new_space_in_code_block_wrapper",
          "arguments": [
            "rect_min_size_to_delete"
          ],
          "signature": "signal deleted_new_space_in_code_block_wrapper(rect_min_size_to_delete)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": " Runs on load\r\n",
          "arguments": [

          ]
        },
        {
          "name": "create_new_space",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func create_new_space(added_code_blk_wrapper: bool) -> null",
          "description": " Creates new space\r\n",
          "arguments": [
            {
              "name": "added_code_blk_wrapper",
              "type": "bool"
            }
          ]
        },
        {
          "name": "delete_space_which_discarded_block_originated",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func delete_space_which_discarded_block_originated(data_dict_of_discarded_block) -> null",
          "description": " Delete space of the discarded block\r\n",
          "arguments": [
            {
              "name": "data_dict_of_discarded_block",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_instruction()",
          "description": " Get instructions in if code block\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_reference_to_occupied_code_block_based_on_space_index",
          "return_type": "Node",
          "rpc_mode": 0,
          "signature": "func get_reference_to_occupied_code_block_based_on_space_index(space_index: int) -> Node",
          "description": " Reads the instructions of the code blks within this If code blk\r\n",
          "arguments": [
            {
              "name": "space_index",
              "type": "int"
            }
          ]
        },
        {
          "name": "get_no_of_code_blocks",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_no_of_code_blocks()",
          "description": " Gets number of code blocks\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "OptionButton.gd",
      "path": "res://DungeonCrawler/CodeBlocks/OptionButton.gd",
      "extends_class": [
        "OptionButton"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class OptionButton.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\r\n",
          "arguments": [

          ]
        },
        {
          "name": "hide_dropdown_arrow",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func hide_dropdown_arrow() -> null",
          "description": " Hides dropdown arrow\r\n",
          "arguments": [

          ]
        },
        {
          "name": "make_option_button_items_non_radio_checkable",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func make_option_button_items_non_radio_checkable() -> null",
          "description": " Makes option button item not checkable, for nicer UI\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "PanelToDropCodeBlocks.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Panels/SidePanel/PanelToDropCodeBlocks.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class PanelToDropCodeBlocks.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "space",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var space = \"[Object:null]\"",
          "description": ""
        },
        {
          "name": "spaces",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var spaces",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "notify_sprite",
          "arguments": [
            "list_of_movements"
          ],
          "signature": "signal notify_sprite(list_of_movements)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": " Called when loaded\r\n",
          "arguments": [

          ]
        },
        {
          "name": "create_new_space",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func create_new_space() -> null",
          "description": " Create new space to drop code blocks\r\n",
          "arguments": [

          ]
        },
        {
          "name": "delete_space_which_discarded_block_originated",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func delete_space_which_discarded_block_originated(data_dict_of_discarded_block) -> null",
          "description": " Delete space occupied previously after a code block has been discarded\r\n",
          "arguments": [
            {
              "name": "data_dict_of_discarded_block",
              "type": "var"
            }
          ]
        },
        {
          "name": "read_code_blocks",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func read_code_blocks() -> null",
          "description": " Reads and converts the information in code blocks into a list of instructions for the player\r\n",
          "arguments": [

          ]
        },
        {
          "name": "count_code_blocks",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func count_code_blocks()",
          "description": " Get the count of the number of code blocks in the panel\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "RunCodeButton.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Panels/SidePanel/RunCodeButton.gd",
      "extends_class": [
        "Button"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class RunCodeButton.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [
        {
          "name": "pressed_run_code",
          "arguments": [

          ],
          "signature": "signal pressed_run_code()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_on_RunCodeButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_RunCodeButton_pressed()",
          "description": " Emit signal when run code button is pressed. Disables run button\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ScrollContainer.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Panels/SidePanel/ScrollContainer.gd",
      "extends_class": [
        "ScrollContainer"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ScrollContainer.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "SidePanel.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Panels/SidePanel/SidePanel.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class SidePanel.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "panel_to_drop_code_blocks",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var panel_to_drop_code_blocks",
          "description": ""
        },
        {
          "name": "run_code_button",
          "data_type": "Button",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var run_code_button: Button",
          "description": ""
        },
        {
          "name": "reset_button",
          "data_type": "TextureButton",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var reset_button: TextureButton",
          "description": ""
        },
        {
          "name": "stop_button",
          "data_type": "TextureButton",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var stop_button: TextureButton",
          "description": ""
        },
        {
          "name": "trash_bin",
          "data_type": "TextureRect",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var trash_bin: TextureRect",
          "description": ""
        },
        {
          "name": "speed_button",
          "data_type": "Button",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var speed_button: Button",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "pressed_reset_button",
          "arguments": [

          ],
          "signature": "signal pressed_reset_button()",
          "description": ""
        },
        {
          "name": "pressed_stop_button",
          "arguments": [

          ],
          "signature": "signal pressed_stop_button()",
          "description": ""
        },
        {
          "name": "pressed_back_button",
          "arguments": [

          ],
          "signature": "signal pressed_back_button()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": " Loads at start\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_ResetButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ResetButton_pressed()",
          "description": " Emits signal when reset button is pressed\n",
          "arguments": [

          ]
        },
        {
          "name": "enable_reset_button",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func enable_reset_button()",
          "description": " Enables reset button\n",
          "arguments": [

          ]
        },
        {
          "name": "disable_reset_button",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func disable_reset_button()",
          "description": " Disables reset button\n",
          "arguments": [

          ]
        },
        {
          "name": "enable_stop_button",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func enable_stop_button()",
          "description": " Enables stop button\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_StopButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_StopButton_pressed()",
          "description": " Emits signal when stop button is pressed\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_BackButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_BackButton_pressed()",
          "description": " Emits signal when back button is pressed\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "SpeedButton.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Panels/SidePanel/SpeedButton.gd",
      "extends_class": [
        "Button"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class SpeedButton.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "possible_speeds",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var possible_speeds: Array",
          "description": ""
        },
        {
          "name": "number_of_times_pressed",
          "data_type": "int",
          "default_value": 0,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var number_of_times_pressed: int = 0",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "toggled_speed_button",
          "arguments": [

          ],
          "signature": "signal toggled_speed_button()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Runs on load\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_SpeedButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_SpeedButton_pressed()",
          "description": " Emits signal when speed button is pressed\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "TrashBin.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Panels/SidePanel/TrashBin.gd",
      "extends_class": [
        "TextureRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class TrashBin.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "tween",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var tween",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "discarded_code_block",
          "arguments": [
            "data_dict"
          ],
          "signature": "signal discarded_code_block(data_dict)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Emits signal to drop data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_TrashBin_mouse_entered",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_TrashBin_mouse_entered()",
          "description": " Expands when item is dragged to trashbin\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_TrashBin_mouse_exited",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_TrashBin_mouse_exited()",
          "description": " Contracts when item is dragged out of trashbin\r\n",
          "arguments": [

          ]
        },
        {
          "name": "expand",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func expand() -> null",
          "description": " Expands trash bin\r\n",
          "arguments": [

          ]
        },
        {
          "name": "contract",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func contract() -> null",
          "description": " Contracts trash bin\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "IndentedSpaceToDropCodeBlock.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Panels/Spaces/IndentedSpaceToDropCodeBlock.gd",
      "extends_class": [
        "TextureRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class IndentedSpaceToDropCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "visual_aid",
          "data_type": "ColorRect",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var visual_aid: ColorRect",
          "description": ""
        },
        {
          "name": "occupied_code_block",
          "data_type": "Control",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var occupied_code_block: Control",
          "description": ""
        },
        {
          "name": "is_original_space",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_original_space: bool = false",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "occupied_space",
          "arguments": [
            "added_code_blk_wrapper"
          ],
          "signature": "signal occupied_space(added_code_blk_wrapper)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "get_drag_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_drag_data(position)",
          "description": " Retrieves info about the item we are dragging\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            }
          ]
        },
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Drops data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_occupied",
          "return_type": "bool",
          "rpc_mode": 0,
          "signature": "func is_occupied() -> bool",
          "description": " Checks occupied\r\n",
          "arguments": [

          ]
        },
        {
          "name": "increase_rect_min_size",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func increase_rect_min_size(added_code_blk_wrapper: bool) -> null",
          "description": " Increases rectangle minimum size\r\n",
          "arguments": [
            {
              "name": "added_code_blk_wrapper",
              "type": "bool"
            }
          ]
        },
        {
          "name": "decrease_rect_min_size",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func decrease_rect_min_size(rect_min_size_to_decrease: float) -> null",
          "description": " Decreases rectangle minimum size\r\n",
          "arguments": [
            {
              "name": "rect_min_size_to_decrease",
              "type": "float"
            }
          ]
        },
        {
          "name": "get_occupied_code_block",
          "return_type": "Node",
          "rpc_mode": 0,
          "signature": "func get_occupied_code_block() -> Node",
          "description": " Gets occupied code block\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_reference_to_parent_space",
          "return_type": "Node",
          "rpc_mode": 0,
          "signature": "func get_reference_to_parent_space() -> Node",
          "description": " Gets reference to parent space\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_index_of_parent_space",
          "return_type": "int",
          "rpc_mode": 0,
          "signature": "func get_index_of_parent_space(parent_space: Node) -> int",
          "description": " Gets idex of parent space\r\n",
          "arguments": [
            {
              "name": "parent_space",
              "type": "Node"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "SpaceToDropCodeBlock.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Panels/Spaces/SpaceToDropCodeBlock.gd",
      "extends_class": [
        "TextureRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class SpaceToDropCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "visual_aid",
          "data_type": "ColorRect",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var visual_aid: ColorRect",
          "description": ""
        },
        {
          "name": "occupied_code_block",
          "data_type": "Control",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var occupied_code_block: Control",
          "description": ""
        },
        {
          "name": "is_original_space",
          "data_type": "bool",
          "default_value": true,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_original_space: bool = true",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "occupied_space",
          "arguments": [

          ],
          "signature": "signal occupied_space()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "get_drag_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_drag_data(position)",
          "description": " Retrieve info about the item we are dragging\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            }
          ]
        },
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Checks for drop data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "is_occupied",
          "return_type": "bool",
          "rpc_mode": 0,
          "signature": "func is_occupied() -> bool",
          "description": " Checks if occupied\r\n",
          "arguments": [

          ]
        },
        {
          "name": "increase_rect_min_size",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func increase_rect_min_size(added_code_blk_wrapper: bool) -> null",
          "description": " Increases rectangle minimum size\r\n",
          "arguments": [
            {
              "name": "added_code_blk_wrapper",
              "type": "bool"
            }
          ]
        },
        {
          "name": "decrease_rect_min_size",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func decrease_rect_min_size(rect_min_size_to_decrease: float) -> null",
          "description": " Decreases rectangle minimum size\r\n",
          "arguments": [
            {
              "name": "rect_min_size_to_decrease",
              "type": "float"
            }
          ]
        },
        {
          "name": "get_occupied_code_block",
          "return_type": "Node",
          "rpc_mode": 0,
          "signature": "func get_occupied_code_block() -> Node",
          "description": " Gets occupied code block\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "RepeatCodeBlock.gd",
      "path": "res://DungeonCrawler/CodeBlocks/RepeatCodeBlock.gd",
      "extends_class": [
        "BaseCodeBlock"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class RepeatCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "indented_space",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var indented_space = \"[Object:null]\"",
          "description": ""
        },
        {
          "name": "label",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var label: Label",
          "description": ""
        },
        {
          "name": "line_edit",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var line_edit: LineEdit",
          "description": ""
        },
        {
          "name": "spaces",
          "data_type": "VBoxContainer",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var spaces: VBoxContainer",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "created_new_space_in_code_block_wrapper",
          "arguments": [
            "added_code_blk_wrapper"
          ],
          "signature": "signal created_new_space_in_code_block_wrapper(added_code_blk_wrapper)",
          "description": ""
        },
        {
          "name": "deleted_new_space_in_code_block_wrapper",
          "arguments": [
            "rect_min_size_to_delete"
          ],
          "signature": "signal deleted_new_space_in_code_block_wrapper(rect_min_size_to_delete)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": " Loads on startup\r\n",
          "arguments": [

          ]
        },
        {
          "name": "create_new_space",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func create_new_space(added_code_blk_wrapper: bool) -> null",
          "description": " Creates new space\r\n",
          "arguments": [
            {
              "name": "added_code_blk_wrapper",
              "type": "bool"
            }
          ]
        },
        {
          "name": "delete_space_which_discarded_block_originated",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func delete_space_which_discarded_block_originated(data_dict_of_discarded_block) -> null",
          "description": " Deletes space of the discarded block\r\n",
          "arguments": [
            {
              "name": "data_dict_of_discarded_block",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_instruction()",
          "description": " Gets instructions in repeat code block\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_reference_to_occupied_code_block_based_on_space_index",
          "return_type": "Node",
          "rpc_mode": 0,
          "signature": "func get_reference_to_occupied_code_block_based_on_space_index(space_index: int) -> Node",
          "description": " Reads the instructions of the code blks within this repeat code blk\r\n",
          "arguments": [
            {
              "name": "space_index",
              "type": "int"
            }
          ]
        },
        {
          "name": "get_no_of_code_blocks",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_no_of_code_blocks()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "RepeatLineEdit.gd",
      "path": "res://DungeonCrawler/CodeBlocks/RepeatLineEdit.gd",
      "extends_class": [
        "LineEdit"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class RepeatLineEdit.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "regex",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var regex",
          "description": ""
        },
        {
          "name": "oldtext",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var oldtext",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Runs on load\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_LineEdit_text_changed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_LineEdit_text_changed(new_text)",
          "description": " Runs on text change\r\n",
          "arguments": [
            {
              "name": "new_text",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "CollectCodeBlockSpawner.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Spawner/CollectCodeBlockSpawner.gd",
      "extends_class": [
        "NinePatchRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class CollectCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "block_to_spawn",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var block_to_spawn = \"[Object:null]\"",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_drag_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_drag_data(position)",
          "description": " Retrieve info about the item we are dragging\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            }
          ]
        },
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Checks for drop data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ElseCodeBlockSpawner.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Spawner/ElseCodeBlockSpawner.gd",
      "extends_class": [
        "NinePatchRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ElseCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "block_to_spawn",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var block_to_spawn = \"[Object:null]\"",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_drag_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_drag_data(position)",
          "description": " Retrieves info about the item we are dragging\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            }
          ]
        },
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Drops data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "IfCodeBlockSpawner.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Spawner/IfCodeBlockSpawner.gd",
      "extends_class": [
        "NinePatchRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class IfCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Called when the node enters the scene tree for the first time.\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "RepeatCodeBlockSpawner.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Spawner/RepeatCodeBlockSpawner.gd",
      "extends_class": [
        "NinePatchRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class RepeatCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "block_to_spawn",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var block_to_spawn = \"[Object:null]\"",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_drag_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_drag_data(position)",
          "description": " Retrieves info about the item we are dragging\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            }
          ]
        },
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Drops data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "WalkCodeBlockSpawner.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Spawner/WalkCodeBlockSpawner.gd",
      "extends_class": [
        "NinePatchRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class WalkCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "block_to_spawn",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var block_to_spawn = \"[Object:null]\"",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_drag_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_drag_data(position)",
          "description": " Retrieves info about the item we are dragging\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            }
          ]
        },
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Drops data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "WhileCodeBlockSpawner.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Spawner/WhileCodeBlockSpawner.gd",
      "extends_class": [
        "NinePatchRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class WhileCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "block_to_spawn",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var block_to_spawn = \"[Object:null]\"",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_drag_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_drag_data(position)",
          "description": " Retrieves info about the item we are dragging\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            }
          ]
        },
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Drops data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ItemToDrag.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Test/Tutorial/ItemToDrag.gd",
      "extends_class": [
        "TextureRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ItemToDrag.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_drag_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_drag_data(position)",
          "description": " Retrieves info about the item we are dragging\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            }
          ]
        },
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Drops data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "PanelToDropItem.gd",
      "path": "res://DungeonCrawler/CodeBlocks/Test/Tutorial/PanelToDropItem.gd",
      "extends_class": [
        "TextureRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class PanelToDropItem.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Drops data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "WalkCodeBlock.gd",
      "path": "res://DungeonCrawler/CodeBlocks/WalkCodeBlock.gd",
      "extends_class": [
        "BaseCodeBlock"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class WalkCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "label",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var label: Label",
          "description": ""
        },
        {
          "name": "option_button",
          "data_type": "OptionButton",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var option_button: OptionButton",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_instruction()",
          "description": " Gets instruction\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "WhileCodeBlock.gd",
      "path": "res://DungeonCrawler/CodeBlocks/WhileCodeBlock.gd",
      "extends_class": [
        "BaseCodeBlock"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class WhileCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "indented_space",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var indented_space = \"[Object:null]\"",
          "description": ""
        },
        {
          "name": "label",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var label: Label",
          "description": ""
        },
        {
          "name": "can_option_button",
          "data_type": "OptionButton",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var can_option_button: OptionButton",
          "description": ""
        },
        {
          "name": "walk_direction_option_button",
          "data_type": "OptionButton",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var walk_direction_option_button: OptionButton",
          "description": ""
        },
        {
          "name": "spaces",
          "data_type": "VBoxContainer",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var spaces: VBoxContainer",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "created_new_space_in_code_block_wrapper",
          "arguments": [
            "added_code_blk_wrapper"
          ],
          "signature": "signal created_new_space_in_code_block_wrapper(added_code_blk_wrapper)",
          "description": ""
        },
        {
          "name": "deleted_new_space_in_code_block_wrapper",
          "arguments": [
            "rect_min_size_to_delete"
          ],
          "signature": "signal deleted_new_space_in_code_block_wrapper(rect_min_size_to_delete)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": " Runs on load\r\n",
          "arguments": [

          ]
        },
        {
          "name": "create_new_space",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func create_new_space(added_code_blk_wrapper: bool) -> null",
          "description": " Creates new space\r\n",
          "arguments": [
            {
              "name": "added_code_blk_wrapper",
              "type": "bool"
            }
          ]
        },
        {
          "name": "delete_space_which_discarded_block_originated",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func delete_space_which_discarded_block_originated(data_dict_of_discarded_block) -> null",
          "description": " Deletes space of the discarded block\r\n",
          "arguments": [
            {
              "name": "data_dict_of_discarded_block",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_instruction()",
          "description": " Gets instructions in while code block\r\n",
          "arguments": [

          ]
        },
        {
          "name": "get_reference_to_occupied_code_block_based_on_space_index",
          "return_type": "Node",
          "rpc_mode": 0,
          "signature": "func get_reference_to_occupied_code_block_based_on_space_index(space_index: int) -> Node",
          "description": " Reads the instructions of the code bloks within this while code block\r\n",
          "arguments": [
            {
              "name": "space_index",
              "type": "int"
            }
          ]
        },
        {
          "name": "get_no_of_code_blocks",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_no_of_code_blocks()",
          "description": " Gets number of code blocks\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "DataOutputButton.gd",
      "path": "res://DungeonCrawler/DataOutput/DataOutputButton.gd",
      "extends_class": [
        "TextureButton"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class DataOutputButton.gd",
      "description": " This manages the outputting of data into csv and Json for data analysis.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _pressed()",
          "description": " Gets statistics when pressed\r\n",
          "arguments": [

          ]
        },
        {
          "name": "save_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func save_data(data, file_open = true)",
          "description": " Saves data to csv/json\r\n",
          "arguments": [
            {
              "name": "data",
              "type": "var"
            },
            {
              "name": "file_open",
              "type": "var",
              "default_value": true
            }
          ]
        },
        {
          "name": "parse_dict_to_csv",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func parse_dict_to_csv(data)",
          "description": " Parses dictionary to csv\r\n",
          "arguments": [
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "unpack_student_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func unpack_student_data(student, student_data, max_num_levels, columns)",
          "description": " Unpacks student data\r\n",
          "arguments": [
            {
              "name": "student",
              "type": "var"
            },
            {
              "name": "student_data",
              "type": "var"
            },
            {
              "name": "max_num_levels",
              "type": "var"
            },
            {
              "name": "columns",
              "type": "var"
            }
          ]
        },
        {
          "name": "unpack_columns",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func unpack_columns(data_dict, columns)",
          "description": " Unpacks columns\r\n",
          "arguments": [
            {
              "name": "data_dict",
              "type": "var"
            },
            {
              "name": "columns",
              "type": "var"
            }
          ]
        },
        {
          "name": "generate_header",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func generate_header(num_levels, column_names)",
          "description": " Generates header\r\n",
          "arguments": [
            {
              "name": "num_levels",
              "type": "var"
            },
            {
              "name": "column_names",
              "type": "var"
            }
          ]
        },
        {
          "name": "generate_level_data_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func generate_level_data_string(level_num, columns)",
          "description": " Generates level data string\r\n",
          "arguments": [
            {
              "name": "level_num",
              "type": "var"
            },
            {
              "name": "columns",
              "type": "var"
            }
          ]
        },
        {
          "name": "join_str",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func join_str(str1, str2, sep = \",\")",
          "description": " Joins string\r\n",
          "arguments": [
            {
              "name": "str1",
              "type": "var"
            },
            {
              "name": "str2",
              "type": "var"
            },
            {
              "name": "sep",
              "type": "var",
              "default_value": ","
            }
          ]
        },
        {
          "name": "get_datetime_as_string",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_datetime_as_string()",
          "description": " Converts current datetime to string\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "AudioManager.gd",
      "path": "res://DungeonCrawler/GlobalScripts/AudioManager.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class AudioManager.gd",
      "description": " This manages background music and sfx.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "music",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var music",
          "description": ""
        },
        {
          "name": "sfx",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var sfx",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Runs on load\r\n",
          "arguments": [

          ]
        },
        {
          "name": "play_music",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func play_music(music_to_play: String) -> null",
          "description": " Plays music\r\n",
          "arguments": [
            {
              "name": "music_to_play",
              "type": "String"
            }
          ]
        },
        {
          "name": "play_sfx",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func play_sfx(sfx_to_play: String) -> null",
          "description": " Plays sound effect\r\n",
          "arguments": [
            {
              "name": "sfx_to_play",
              "type": "String"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Music.gd",
      "path": "res://DungeonCrawler/GlobalScripts/Music.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Music.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "currently_playing",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var currently_playing: String",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "play_sound",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func play_sound(sound_to_play: String) -> null",
          "description": " Plays sound. Stops current music\r\n",
          "arguments": [
            {
              "name": "sound_to_play",
              "type": "String"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Sfx.gd",
      "path": "res://DungeonCrawler/GlobalScripts/Sfx.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Sfx.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "play_sound",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func play_sound(sound_to_play: String) -> null",
          "description": " Plays sound\r\n",
          "arguments": [
            {
              "name": "sound_to_play",
              "type": "String"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Background.gd",
      "path": "res://DungeonCrawler/Levels/Background.gd",
      "extends_class": [
        "ColorRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Background.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [
        {
          "name": "discarded_code_block",
          "arguments": [
            "data_dict"
          ],
          "signature": "signal discarded_code_block(data_dict)",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func can_drop_data(position, data)",
          "description": " Checks if data can be dropped\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        },
        {
          "name": "drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func drop_data(position, data)",
          "description": " Drops data\r\n",
          "arguments": [
            {
              "name": "position",
              "type": "var"
            },
            {
              "name": "data",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "EndGoal.gd",
      "path": "res://DungeonCrawler/Levels/InteractiveEnvironments/EndGoal.gd",
      "extends_class": [
        "Area2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class EndGoal.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [
        {
          "name": "player_reached_end_goal",
          "arguments": [

          ],
          "signature": "signal player_reached_end_goal()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_on_EndGoal_body_entered",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_EndGoal_body_entered(body) -> null",
          "description": " Triggers when end goal is reached \r\n",
          "arguments": [
            {
              "name": "body",
              "type": "var"
            }
          ]
        },
        {
          "name": "turn_on_monitoring",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func turn_on_monitoring() -> null",
          "description": " Turns on monitoring\r\n",
          "arguments": [

          ]
        },
        {
          "name": "turn_off_monitoring",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func turn_off_monitoring() -> null",
          "description": " Turns off monitoring\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "LevelManager.gd",
      "path": "res://DungeonCrawler/Levels/LevelManager.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class LevelManager.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "background",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var background",
          "description": ""
        },
        {
          "name": "panel_to_drop_code_blocks",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var panel_to_drop_code_blocks",
          "description": ""
        },
        {
          "name": "side_panel",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var side_panel",
          "description": ""
        },
        {
          "name": "level_node_path",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var level_node_path = \"\"",
          "description": ""
        },
        {
          "name": "next_level",
          "data_type": "var",
          "default_value": "[Object:null]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var next_level = \"[Object:null]\"",
          "description": ""
        },
        {
          "name": "level",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var level",
          "description": ""
        },
        {
          "name": "end_goal",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var end_goal",
          "description": ""
        },
        {
          "name": "player",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var player",
          "description": ""
        },
        {
          "name": "level_complete_pop_up",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var level_complete_pop_up",
          "description": ""
        },
        {
          "name": "quit_level_pop_up",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var quit_level_pop_up",
          "description": ""
        },
        {
          "name": "level_statistics",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var level_statistics",
          "description": ""
        },
        {
          "name": "no_of_code_blocks",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var no_of_code_blocks",
          "description": ""
        },
        {
          "name": "stopped_code_execution",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var stopped_code_execution",
          "description": ""
        },
        {
          "name": "steps",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var steps",
          "description": " level completion variables\r\n"
        },
        {
          "name": "collisions",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var collisions",
          "description": " level completion variables\r\n"
        },
        {
          "name": "codeblocks",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var codeblocks",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "statistics_ready",
          "arguments": [

          ],
          "signature": "signal statistics_ready()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": " Runs on load\r\n",
          "arguments": [

          ]
        },
        {
          "name": "on_stopped_code_execution",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func on_stopped_code_execution()",
          "description": " Stops code execution\r\n",
          "arguments": [

          ]
        },
        {
          "name": "on_reset_stopped_code_execution",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func on_reset_stopped_code_execution()",
          "description": " Resets code execution\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_input",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _input(event) -> null",
          "description": " Checks if input is R. If so, reset.\r\n For debugging purposes.\r\n",
          "arguments": [
            {
              "name": "event",
              "type": "var"
            }
          ]
        },
        {
          "name": "reset_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func reset_level()",
          "description": " Resets everything (player position, code blocks, gold)\r\n",
          "arguments": [

          ]
        },
        {
          "name": "calculate_no_of_code_blocks",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func calculate_no_of_code_blocks(list_of_instructions)",
          "description": " Gets the number of code blocks used\r\n",
          "arguments": [
            {
              "name": "list_of_instructions",
              "type": "var"
            }
          ]
        },
        {
          "name": "on_player_reached_end_goal",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func on_player_reached_end_goal() -> null",
          "description": " Triggers when end goal is reached\r\n",
          "arguments": [

          ]
        },
        {
          "name": "on_finished_executing_code",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func on_finished_executing_code(statistics) -> null",
          "description": " The code for the pop up appearing needs to be here to tell player they failed lvl\r\n Triggers when code finishes executing\r\n",
          "arguments": [
            {
              "name": "statistics",
              "type": "var"
            }
          ]
        },
        {
          "name": "update_statistics",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func update_statistics(statistics)",
          "description": " Updates statistics\r\n",
          "arguments": [
            {
              "name": "statistics",
              "type": "var"
            }
          ]
        },
        {
          "name": "restart_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func restart_level()",
          "description": " Restarts level\r\n",
          "arguments": [

          ]
        },
        {
          "name": "go_back_to_level_selection",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func go_back_to_level_selection()",
          "description": " Goes back to level selection\r\n",
          "arguments": [

          ]
        },
        {
          "name": "go_to_next_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func go_to_next_level()",
          "description": " Goes to next level\r\n",
          "arguments": [

          ]
        },
        {
          "name": "show_quit_dialog",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func show_quit_dialog()",
          "description": " Shows quit dialog\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "TestLevel.gd",
      "path": "res://DungeonCrawler/Levels/TestLevel.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class TestLevel.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "key_left",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var key_left",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "there_is_no_key_left",
          "return_type": "bool",
          "rpc_mode": 0,
          "signature": "func there_is_no_key_left() -> bool",
          "description": " Checks if there is key left\r\n",
          "arguments": [

          ]
        },
        {
          "name": "reset_keys",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func reset_keys()",
          "description": " Resets key\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "AnimatedSprite.gd",
      "path": "res://DungeonCrawler/Player/AnimatedSprite.gd",
      "extends_class": [
        "AnimatedSprite"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class AnimatedSprite.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "update_sprite_based_on_direction",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func update_sprite_based_on_direction(direction: Vector2) -> null",
          "description": " Updates sprite based on direction\r\n",
          "arguments": [
            {
              "name": "direction",
              "type": "Vector2"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "AreaToCollect.gd",
      "path": "res://DungeonCrawler/Player/AreaToCollect.gd",
      "extends_class": [
        "Area2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class AreaToCollect.gd",
      "description": " This manages the area2d attached to the player.\r\n It is used to detect if a key is on top of the player\r\n when the collect code block is executed.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "timer",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var timer",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "collect",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func collect() -> null",
          "description": " Checks input, collects if P\r\n For debug purposes\r\nfunc _input(event) -> void:\r\n\tif event is InputEventKey:\r\n\t\tif event.scancode == KEY_P:\r\n\t\t\tcollect()\r\n Collects key if possible\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_AreaToCollect_area_entered",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_AreaToCollect_area_entered(area)",
          "description": " Triggers when key enters AreaToCollect,\r\n this will trigger if collect() is called beforehand\r\n",
          "arguments": [
            {
              "name": "area",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_Timer_timeout",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Timer_timeout()",
          "description": " Triggers on timer timeout\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ExclamationMark.gd",
      "path": "res://DungeonCrawler/Player/ExclamationMark.gd",
      "extends_class": [
        "Sprite"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ExclamationMark.gd",
      "description": " This manages the visibility of player's exclamation mark. \r\n Visibility is usually only toggled when player collides into something.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "tween",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var tween",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "appear",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func appear() -> null",
          "description": " Appears on screen\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_Tween_tween_all_completed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Tween_tween_all_completed()",
          "description": " Disappears from screen\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Player.gd",
      "path": "res://DungeonCrawler/Player/Player.gd",
      "extends_class": [
        "KinematicBody2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Player.gd",
      "description": " This manages anything that has to do with controlling the player.\r\n Use cases include:\r\n what the player will do based on executing code blocks\r\n reseting player's position back to it's initial starting position\r\n what the player will do when the execution of code blocks is terminated\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "starting_direction",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var starting_direction = \"\"",
          "description": ""
        },
        {
          "name": "animated_sprite",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var animated_sprite",
          "description": ""
        },
        {
          "name": "ray",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ray",
          "description": ""
        },
        {
          "name": "tween",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var tween",
          "description": ""
        },
        {
          "name": "exclamation_mark",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var exclamation_mark",
          "description": ""
        },
        {
          "name": "area_to_collect",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var area_to_collect",
          "description": ""
        },
        {
          "name": "starting_position",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var starting_position",
          "description": ""
        },
        {
          "name": "no_of_collisions",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var no_of_collisions",
          "description": ""
        },
        {
          "name": "no_of_steps",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var no_of_steps",
          "description": ""
        },
        {
          "name": "to_terminate",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var to_terminate",
          "description": ""
        },
        {
          "name": "inputs",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var inputs",
          "description": ""
        },
        {
          "name": "grid_size",
          "data_type": "int",
          "default_value": 16,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var grid_size: int = 16",
          "description": ""
        },
        {
          "name": "can_move",
          "data_type": "bool",
          "default_value": true,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var can_move: bool = true",
          "description": ""
        },
        {
          "name": "default_sprite_animation_duration",
          "data_type": "float",
          "default_value": 0.5,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var default_sprite_animation_duration: float = 0.5",
          "description": ""
        },
        {
          "name": "sprite_animation_duration",
          "data_type": "float",
          "default_value": 0.5,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var sprite_animation_duration: float = 0.5",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "finished_executing_code",
          "arguments": [

          ],
          "signature": "signal finished_executing_code()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Testing movement with keyboard inputs\r\n func _unhandled_input(event) -> void:\r\n\tfor dir in inputs.keys():\r\n\t\tif event.is_action_pressed(dir):\r\n\t\t\tmove(dir)\r\n Loads on startup\r\n",
          "arguments": [

          ]
        },
        {
          "name": "reset_sprite_position",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func reset_sprite_position() -> null",
          "description": " Resets sprite position to starting position\r\n",
          "arguments": [

          ]
        },
        {
          "name": "move",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func move(dir: String) -> null",
          "description": " Moves sprite according to direction given\r\n Also checks for collision so that Sprite cannot walk into walls\r\n",
          "arguments": [
            {
              "name": "dir",
              "type": "String"
            }
          ]
        },
        {
          "name": "able_to_move",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func able_to_move(dir: String)",
          "description": " Casts a ray to check if Sprite is able to move in the given direction\r\n Returns true if movement in given direction will not result in collision\r\n Returns false if movement in given direction will result in collision\r\n",
          "arguments": [
            {
              "name": "dir",
              "type": "String"
            }
          ]
        },
        {
          "name": "_on_Tween_tween_all_completed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_Tween_tween_all_completed() -> null",
          "description": " Sets can_move to true\r\n",
          "arguments": [

          ]
        },
        {
          "name": "exclaim",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func exclaim() -> null",
          "description": " Shows Pop-up when sprite collides\r\n",
          "arguments": [

          ]
        },
        {
          "name": "collect",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func collect() -> null",
          "description": " Collects item\r\n",
          "arguments": [

          ]
        },
        {
          "name": "terminate",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func terminate()",
          "description": " Terminates\r\n",
          "arguments": [

          ]
        },
        {
          "name": "unterminate",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func unterminate()",
          "description": " Undo terminate\r\n",
          "arguments": [

          ]
        },
        {
          "name": "toggle_speed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func toggle_speed(speed)",
          "description": " Toggles speed\r\n",
          "arguments": [
            {
              "name": "speed",
              "type": "var"
            }
          ]
        },
        {
          "name": "check_conditions",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func check_conditions(movement_details)",
          "description": " Checks for IF/WHILE condition in code blocks\r\n",
          "arguments": [
            {
              "name": "movement_details",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_RunCodeButton_move_sprite",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_RunCodeButton_move_sprite(list_of_movements)",
          "description": " Runs sprite animation given code blocks in the side panel and emits signal that counts statistics\r\n",
          "arguments": [
            {
              "name": "list_of_movements",
              "type": "var"
            }
          ]
        },
        {
          "name": "single_action",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func single_action(movement_details)",
          "description": " Execution of Walk and Collect code blocks\r\n",
          "arguments": [
            {
              "name": "movement_details",
              "type": "var"
            }
          ]
        },
        {
          "name": "nested_action",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func nested_action(movement_details)",
          "description": " Execution of Repeat, While and If code blocks\r\n",
          "arguments": [
            {
              "name": "movement_details",
              "type": "var"
            }
          ]
        },
        {
          "name": "iterate_thru_nested_blk",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func iterate_thru_nested_blk(instructions: Array)",
          "description": " Iterate through instructions in nested blocks\r\n",
          "arguments": [
            {
              "name": "instructions",
              "type": "Array"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "fade_in.gd",
      "path": "res://DungeonCrawler/UI/Animation/fade_in.gd",
      "extends_class": [
        "ColorRect"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class fade_in.gd",
      "description": " This manages the fading in effect when transitioning between scenes.\r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [
        {
          "name": "fade_finished",
          "arguments": [

          ],
          "signature": "signal fade_finished()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "fade_in",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func fade_in()",
          "description": " Fades in\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_AnimationPlayer_animation_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_AnimationPlayer_animation_finished(_fade_in)",
          "description": " Finishes fading\r\n",
          "arguments": [
            {
              "name": "_fade_in",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Game Intro.gd",
      "path": "res://DungeonCrawler/UI/Game Intro/Game Intro.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Game Intro.gd",
      "description": " This manages the boot splash screen \r\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Called when the node enters the scene tree for the first time.\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Leaderboard.gd",
      "path": "res://DungeonCrawler/UI/Leaderboard/Leaderboard.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Leaderboard.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        },
        {
          "name": "column",
          "data_type": "VBoxContainer",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var column: VBoxContainer",
          "description": ""
        },
        {
          "name": "dropdown",
          "data_type": "OptionButton",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var dropdown: OptionButton",
          "description": ""
        },
        {
          "name": "score_row",
          "data_type": "PackedScene",
          "default_value": "[PackedScene:19467]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var score_row: PackedScene = \"[PackedScene:19467]\"",
          "description": ""
        },
        {
          "name": "title_row",
          "data_type": "PackedScene",
          "default_value": "[PackedScene:19473]",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var title_row: PackedScene = \"[PackedScene:19473]\"",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "leaderboard",
          "arguments": [

          ],
          "signature": "signal leaderboard()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\r\n Default leaderboard will be retrieved\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_BackButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_BackButton_pressed()",
          "description": "$Leaderboard.get_v_scrollbar().modulate = Color(0, 0, 0, 0)\r\n Signal after back button pressed\r\n User will be redirected to main menu\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_Button_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Button_pressed(scene_to_load)",
          "description": " Signal after button pressed\r\n User will be redirected to corresponding scene\r\n",
          "arguments": [
            {
              "name": "scene_to_load",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\r\n User will be redirected accordingly\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_LevelSelector_item_selected",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_LevelSelector_item_selected(index)",
          "description": " Signal after item select\r\n Leaderboard will be retrieved accordingly\r\n",
          "arguments": [
            {
              "name": "index",
              "type": "var"
            }
          ]
        },
        {
          "name": "delete_current_rows",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func delete_current_rows() -> null",
          "description": " Clears current leaderboard\r\n",
          "arguments": [

          ]
        },
        {
          "name": "add_new_rows",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func add_new_rows(users: Array) -> null",
          "description": " Adds row to leaderboard\r\n",
          "arguments": [
            {
              "name": "users",
              "type": "Array"
            }
          ]
        },
        {
          "name": "get_leaderboard",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_leaderboard(level)",
          "description": " Gets entire leaderboard\r\n",
          "arguments": [
            {
              "name": "level",
              "type": "var"
            }
          ]
        },
        {
          "name": "refresh_leaderboard",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func refresh_leaderboard(result)",
          "description": " Refreshes leaderboard\r\n",
          "arguments": [
            {
              "name": "result",
              "type": "var"
            }
          ]
        },
        {
          "name": "add_title_row",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_title_row()",
          "description": " Add the top row of leaderboard\r\n",
          "arguments": [

          ]
        },
        {
          "name": "add_dropdown_options",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_dropdown_options(max_level)",
          "description": " Add leaderboard display options\r\n",
          "arguments": [
            {
              "name": "max_level",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "LevelSelector.gd",
      "path": "res://DungeonCrawler/UI/Leaderboard/LevelSelector.gd",
      "extends_class": [
        "OptionButton"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class LevelSelector.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "make_option_button_items_non_radio_checkable",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func make_option_button_items_non_radio_checkable() -> null",
          "description": " Removes the default radio buttons\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ScoreRow",
      "path": "res://DungeonCrawler/UI/Leaderboard/ScoreRow.gd",
      "extends_class": [
        "HBoxContainer"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ScoreRow",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "username",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var username: Label",
          "description": ""
        },
        {
          "name": "score",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var score: Label",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Called when the node enters the scene tree for the first time.\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "TitleRow",
      "path": "res://DungeonCrawler/UI/Leaderboard/TitleRow.gd",
      "extends_class": [
        "HBoxContainer"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class TitleRow",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "username",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var username: Label",
          "description": ""
        },
        {
          "name": "score",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var score: Label",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Called when the node enters the scene tree for the first time.\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "LevelSelection.gd",
      "path": "res://DungeonCrawler/UI/LevelSelection/LevelSelection.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class LevelSelection.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\n Levels will be locked accordingly\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_BackButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_BackButton_pressed(scene_to_load)",
          "description": " Signal after back button pressed\n User will be redirected to main menu\n",
          "arguments": [
            {
              "name": "scene_to_load",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_Button_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Button_pressed(scene_to_load, level = null)",
          "description": "",
          "arguments": [
            {
              "name": "scene_to_load",
              "type": "var"
            },
            {
              "name": "level",
              "type": "var",
              "default_value": null
            }
          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\n User will be redirected accordingly\n",
          "arguments": [

          ]
        },
        {
          "name": "lock_levels",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func lock_levels(unlocked_level)",
          "description": "",
          "arguments": [
            {
              "name": "unlocked_level",
              "type": "var"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ForgetPassword.gd",
      "path": "res://DungeonCrawler/UI/Login/ForgetPassword.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ForgetPassword.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        },
        {
          "name": "email",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var email: LineEdit",
          "description": ""
        },
        {
          "name": "notification",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var notification: Label",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Runs on load\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_BackButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_BackButton_pressed()",
          "description": " Signal after back button pressed\n User will be redirected to previous page\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_SubmitButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_SubmitButton_pressed()",
          "description": " Triggers on pressing submit button\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_SuccessNotification_confirmed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_SuccessNotification_confirmed()",
          "description": " Triggers on successful notification\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\n User will be redirected accordingly\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Login.gd",
      "path": "res://DungeonCrawler/UI/Login/Login.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Login.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "email",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var email: LineEdit",
          "description": ""
        },
        {
          "name": "password",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var password: LineEdit",
          "description": ""
        },
        {
          "name": "notification",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var notification: Label",
          "description": ""
        },
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "set_user",
          "arguments": [

          ],
          "signature": "signal set_user()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _ready() -> null",
          "description": " Loads on startup\r\n Email will be on focus\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_LoginButton_pressed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_LoginButton_pressed() -> null",
          "description": " Signal after pressing login button\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_RegisterButton_pressed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_RegisterButton_pressed() -> null",
          "description": " Signal after pressing register button\r\n User will be redirected to register page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_FirebaseAuth_login_succeeded",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_login_succeeded(auth)",
          "description": " Signal after successful login\r\n User will be redirected to main menu\r\n",
          "arguments": [
            {
              "name": "auth",
              "type": "var"
            }
          ]
        },
        {
          "name": "on_login_failed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func on_login_failed(_error_code, message)",
          "description": " Signal after failed login\r\n User will be shown the error\r\n",
          "arguments": [
            {
              "name": "_error_code",
              "type": "var"
            },
            {
              "name": "message",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_ForgetPasswordButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ForgetPasswordButton_pressed()",
          "description": " Signal after pressing forgot password\r\n User will be redirected to reset password page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\r\n User will be redirected accordingly\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "LogoutConfirmation.gd",
      "path": "res://DungeonCrawler/UI/MenuPage/LogoutConfirmation.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class LogoutConfirmation.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [
        {
          "name": "clear_user",
          "arguments": [

          ],
          "signature": "signal clear_user()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_LogoutConfirmationDialog_confirmed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_LogoutConfirmationDialog_confirmed()",
          "description": " Clears user from client, and logs out\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "MainMenu.gd",
      "path": "res://DungeonCrawler/UI/MenuPage/MainMenu.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class MainMenu.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_Button_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Button_pressed(scene_to_load)",
          "description": " Changing scene\r\n",
          "arguments": [
            {
              "name": "scene_to_load",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\r\n User will be redirected accordingly\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_TutorialButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_TutorialButton_pressed()",
          "description": " Tutorial pop up \r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_LogoutButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_LogoutButton_pressed()",
          "description": " Triggers after logout button is pressed\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "MainMenuButton.gd",
      "path": "res://DungeonCrawler/UI/MenuPage/MainMenuButton.gd",
      "extends_class": [
        "TextureButton"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class MainMenuButton.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scene_to_load",
          "data_type": "var",
          "default_value": "",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var scene_to_load = \"\"",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [

      ]
    },
    {
      "name": "PageTemplate.gd",
      "path": "res://DungeonCrawler/UI/PageTemplate.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class PageTemplate.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [

      ]
    },
    {
      "name": "LevelCompletePop.gd",
      "path": "res://DungeonCrawler/UI/Pop-up/LevelCompletePop.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class LevelCompletePop.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "step_count_label",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var step_count_label",
          "description": ""
        },
        {
          "name": "collision_label",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var collision_label",
          "description": ""
        },
        {
          "name": "codeblocks_label",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var codeblocks_label",
          "description": ""
        },
        {
          "name": "star1",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var star1",
          "description": ""
        },
        {
          "name": "star2",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var star2",
          "description": ""
        },
        {
          "name": "star3",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var star3",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "pressed_level_selection_button",
          "arguments": [

          ],
          "signature": "signal pressed_level_selection_button()",
          "description": ""
        },
        {
          "name": "pressed_restart_button",
          "arguments": [

          ],
          "signature": "signal pressed_restart_button()",
          "description": ""
        },
        {
          "name": "pressed_next_button",
          "arguments": [

          ],
          "signature": "signal pressed_next_button()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Runs on load\n",
          "arguments": [

          ]
        },
        {
          "name": "set_stars",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_stars(level_statistics)",
          "description": " Sets stars on level complete popup\n",
          "arguments": [
            {
              "name": "level_statistics",
              "type": "var"
            }
          ]
        },
        {
          "name": "setstepVar",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func setstepVar(value)",
          "description": " Sets step var\n",
          "arguments": [
            {
              "name": "value",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_LevelSelectionButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_LevelSelectionButton_pressed()",
          "description": " Triggers when level selection is pressed\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_RestartButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_RestartButton_pressed()",
          "description": " Triggers when restart is pressed\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_NextButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_NextButton_pressed()",
          "description": " Triggers when next is pressed\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "LevelPopup.gd",
      "path": "res://DungeonCrawler/UI/Pop-up/LevelPopup.gd",
      "extends_class": [
        "Popup"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class LevelPopup.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Called when the node enters the scene tree for the first time.\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_ToolButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ToolButton_pressed()",
          "description": " Triggers when tool button is pressed\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "QuitLevelConfirmation.gd",
      "path": "res://DungeonCrawler/UI/Pop-up/QuitLevelConfirmation.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class QuitLevelConfirmation.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "confirmation_dialog",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var confirmation_dialog",
          "description": ""
        }
      ],
      "signals": [
        {
          "name": "quit_level",
          "arguments": [

          ],
          "signature": "signal quit_level()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Runs on load\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_QuitLevelConfirmationDialog_confirmed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_QuitLevelConfirmationDialog_confirmed()",
          "description": " Triggers when quit level is confirmed\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Register.gd",
      "path": "res://DungeonCrawler/UI/Register/Register.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Register.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "email",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var email: LineEdit",
          "description": ""
        },
        {
          "name": "username",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var username: LineEdit",
          "description": ""
        },
        {
          "name": "password",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var password: LineEdit",
          "description": ""
        },
        {
          "name": "confirm",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var confirm: LineEdit",
          "description": ""
        },
        {
          "name": "notification",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var notification: Label",
          "description": ""
        },
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\n Email will be on focus\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_RegisterButton_pressed",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _on_RegisterButton_pressed() -> null",
          "description": " Signal after pressing register button\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_FirebaseAuth_register_succeeded",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FirebaseAuth_register_succeeded(auth)",
          "description": " Signal after successful registration\n User will be redirected to login page\n",
          "arguments": [
            {
              "name": "auth",
              "type": "var"
            }
          ]
        },
        {
          "name": "on_signup_failed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func on_signup_failed(error_code, message)",
          "description": " Signal after failed registration\n User will show a notification text on failure\n",
          "arguments": [
            {
              "name": "error_code",
              "type": "var"
            },
            {
              "name": "message",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_BackButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_BackButton_pressed()",
          "description": " Signal after back button pressed\n User will be redirected to login screen\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\n User will be redirected accordingly\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ChangeDisplayName.gd",
      "path": "res://DungeonCrawler/UI/Settings/ChangeDisplayName.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ChangeDisplayName.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "username",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var username: LineEdit",
          "description": ""
        },
        {
          "name": "current_username",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var current_username: Label",
          "description": ""
        },
        {
          "name": "notification",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var notification: Label",
          "description": ""
        },
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_BackButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_BackButton_pressed()",
          "description": " Redirects back to setting page\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\n User will be redirected accordingly\n",
          "arguments": [

          ]
        },
        {
          "name": "show_current_username",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func show_current_username(db_username)",
          "description": " Shows current display name\n",
          "arguments": [
            {
              "name": "db_username",
              "type": "var"
            }
          ]
        },
        {
          "name": "_on_SubmitButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_SubmitButton_pressed()",
          "description": " Triggers when submit button is pressed\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_SuccessNotification_confirmed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_SuccessNotification_confirmed()",
          "description": " Redirects user back to main menu\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ChangePassword.gd",
      "path": "res://DungeonCrawler/UI/Settings/ChangePassword.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ChangePassword.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        },
        {
          "name": "password",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var password: LineEdit",
          "description": ""
        },
        {
          "name": "confirm_password",
          "data_type": "LineEdit",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var confirm_password: LineEdit",
          "description": ""
        },
        {
          "name": "notification",
          "data_type": "Label",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var notification: Label",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Loads on startup\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_BackButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_BackButton_pressed()",
          "description": " Signal after back button pressed\r\n User will be redirected to previous page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\r\n User will be redirected accordingly\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_SubmitButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_SubmitButton_pressed()",
          "description": " Triggers when submit button is pressed\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_ChangePwConfirmation_confirmed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ChangePwConfirmation_confirmed()",
          "description": " Changes user password\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_SuccessNotification_confirmed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_SuccessNotification_confirmed()",
          "description": " Redirects back to main menu\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Settings.gd",
      "path": "res://DungeonCrawler/UI/Settings/Settings.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Settings.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "scene_path_to_load",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_path_to_load",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_on_ChangePasswordButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ChangePasswordButton_pressed()",
          "description": " Redirects to change password screen\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_ChangeDisplayNameButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_ChangeDisplayNameButton_pressed()",
          "description": " Redirects to change display name screen\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_BackButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_BackButton_pressed()",
          "description": " Redirects to change back button screen\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_FadeIn_fade_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_FadeIn_fade_finished()",
          "description": " Signal after fade finishes\r\n User will be redirected accordingly\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "PopupTut.gd",
      "path": "res://DungeonCrawler/UI/Tutorial/PopupTut.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class PopupTut.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_on_CloseButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_CloseButton_pressed()",
          "description": " Triggers when close button is pressed\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_NextButton1_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_NextButton1_pressed()",
          "description": " Moves to the DeleteCodeBlocks tutorial page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_NextButton2_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_NextButton2_pressed()",
          "description": " Moves to the Run Code Block tutorial page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_NextButton3_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_NextButton3_pressed()",
          "description": " Moves to the ResetAndStop Completion tutorial page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_NextButton4_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_NextButton4_pressed()",
          "description": " Moves to LevelCompletion tutorial page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_PrevButton2_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_PrevButton2_pressed()",
          "description": " Moves back to DragCodeBlock tutorial page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_PrevButton3_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_PrevButton3_pressed()",
          "description": " Moves back to the DeleteCodeBlocks Code Block tutorial page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_PrevButton4_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_PrevButton4_pressed()",
          "description": " Moves back to RunCodeBlocks tutorial page\r\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_PrevButton5_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_PrevButton5_pressed()",
          "description": " Moves back to the ResetAndStop Code Block tutorial page\r\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "ReferenceCollectorCLI.gd",
      "path": "res://ReferenceCollectorCLI.gd",
      "extends_class": [
        "SceneTree"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class ReferenceCollectorCLI.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "Collector",
          "data_type": "SceneTree",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Collector: SceneTree",
          "description": ""
        },
        {
          "name": "directories",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var directories: Array",
          "description": " A list of directories to collect files from.\r\n"
        },
        {
          "name": "is_recursive",
          "data_type": "bool",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_recursive: bool",
          "description": " A list of directories to collect files from.\r\n If true, explore each directory recursively\r\n"
        },
        {
          "name": "patterns",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var patterns: Array",
          "description": " A list of directories to collect files from.\r\n If true, explore each directory recursively\r\n A list of patterns to filter files.\r\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_init",
          "return_type": "null",
          "rpc_mode": 0,
          "signature": "func _init() -> null",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Backend.gd",
      "path": "res://static/Backend.gd",
      "extends_class": [
        "Node"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Backend.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "user_info",
          "data_type": "Dictionary",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var user_info: Dictionary",
          "description": " User information\n"
        },
        {
          "name": "level",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var level",
          "description": " User information\n"
        }
      ],
      "signals": [
        {
          "name": "show_leaderboard",
          "arguments": [

          ],
          "signature": "signal show_leaderboard()",
          "description": ""
        },
        {
          "name": "unlocked_levels",
          "arguments": [

          ],
          "signature": "signal unlocked_levels()",
          "description": ""
        },
        {
          "name": "display_username",
          "arguments": [

          ],
          "signature": "signal display_username()",
          "description": ""
        },
        {
          "name": "levels_list",
          "arguments": [

          ],
          "signature": "signal levels_list()",
          "description": ""
        },
        {
          "name": "teacher_statistics",
          "arguments": [

          ],
          "signature": "signal teacher_statistics()",
          "description": ""
        }
      ],
      "methods": [
        {
          "name": "set_user_info",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_user_info(result)",
          "description": " Sets user's information on client from the database\n",
          "arguments": [
            {
              "name": "result",
              "type": "var"
            }
          ]
        },
        {
          "name": "clear_user_info",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func clear_user_info()",
          "description": " Clears user's information on client\n",
          "arguments": [

          ]
        },
        {
          "name": "upload_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func upload_level(file_path)",
          "description": " Uploads level (Upcoming feature)\n",
          "arguments": [
            {
              "name": "file_path",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_sprites",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_sprites()",
          "description": " Gets Sprites (Upcoming feature)\n",
          "arguments": [

          ]
        },
        {
          "name": "upload_sprite",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func upload_sprite(file_path)",
          "description": " Uploads Sprites (Upcoming feature)\n",
          "arguments": [
            {
              "name": "file_path",
              "type": "var"
            }
          ]
        },
        {
          "name": "create_document",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func create_document(result, username)",
          "description": " Creates document on database after registration\n",
          "arguments": [
            {
              "name": "result",
              "type": "var"
            },
            {
              "name": "username",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_statistics",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_statistics()",
          "description": " Gets statistics for teacher\n",
          "arguments": [

          ]
        },
        {
          "name": "get_leaderboard",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_leaderboard(score_field)",
          "description": " Gets leaderboard for viewing\n",
          "arguments": [
            {
              "name": "score_field",
              "type": "var"
            }
          ]
        },
        {
          "name": "upload_statistics",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func upload_statistics(level_statistics)",
          "description": " Uploads new statistics\n",
          "arguments": [
            {
              "name": "level_statistics",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_max_level",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_max_level()",
          "description": " Gets unlocked level\n",
          "arguments": [

          ]
        },
        {
          "name": "change_display_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func change_display_name(username)",
          "description": " Changes display name\n",
          "arguments": [
            {
              "name": "username",
              "type": "var"
            }
          ]
        },
        {
          "name": "get_display_name",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_display_name()",
          "description": " Gets display name\n",
          "arguments": [

          ]
        },
        {
          "name": "get_levels",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func get_levels()",
          "description": " Gets levels\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "firestore_test.gd",
      "path": "res://test/firestore_test.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class firestore_test.gd",
      "description": " Taken from https://github.com/GodotNuts/GodotFirebase/blob/main/test/firestore_test.gd\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "email",
          "data_type": "String",
          "default_value": "tanjunhong.undergrounds@8shield.net",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var email: String = \"tanjunhong.undergrounds@8shield.net\"",
          "description": ""
        },
        {
          "name": "password",
          "data_type": "String",
          "default_value": "111111",
          "setter": "",
          "getter": "",
          "export": true,
          "signature": "export var password: String = \"111111\"",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready() -> var",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "TestUtils",
      "path": "res://test/TestUtils.gd",
      "extends_class": [
        "Object"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class TestUtils",
      "description": " Taken from https://github.com/GodotNuts/GodotFirebase/blob/main/test/TestUtils.gd\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [
        {
          "name": "instantiate",
          "return_type": "Node",
          "rpc_mode": 0,
          "signature": "func instantiate(clazz: Script) -> Node",
          "description": "",
          "arguments": [
            {
              "name": "clazz",
              "type": "Script"
            }
          ]
        }
      ]
    },
    {
      "name": "test_AnimatedSprite.gd",
      "path": "res://test/unit/test_AnimatedSprite.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_AnimatedSprite.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "AnimatedSprite",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var AnimatedSprite",
          "description": ""
        },
        {
          "name": "_animatedSprite",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _animatedSprite",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_update_sprite_based_on_direction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_update_sprite_based_on_direction()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_AreaToCollect.gd",
      "path": "res://test/unit/test_AreaToCollect.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_AreaToCollect.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "AreaToCollect",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var AreaToCollect",
          "description": ""
        },
        {
          "name": "_areaToCollect",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _areaToCollect",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__on_Timer_timeout",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__on_Timer_timeout()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_Backend.gd",
      "path": "res://test/unit/test_Backend.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_Backend.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "Backend",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Backend",
          "description": ""
        },
        {
          "name": "_backend",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _backend",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_Background.gd",
      "path": "res://test/unit/test_Background.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_Background.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "Background",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Background",
          "description": ""
        },
        {
          "name": "_background",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _background",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_BaseCodeBlock.gd",
      "path": "res://test/unit/test_BaseCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_BaseCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "BaseCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var BaseCodeBlock",
          "description": ""
        },
        {
          "name": "_baseCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _baseCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_get_instruction()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_CollectCodeBlock.gd",
      "path": "res://test/unit/test_CollectCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_CollectCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "CollectCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var CollectCodeBlock",
          "description": ""
        },
        {
          "name": "_collectCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _collectCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_get_instruction()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_CollectCodeBlockSpawner.gd",
      "path": "res://test/unit/test_CollectCodeBlockSpawner.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_CollectCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "CollectCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var CollectCodeBlockSpawner",
          "description": ""
        },
        {
          "name": "_collectCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _collectCodeBlockSpawner",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_ElseCodeBlock.gd",
      "path": "res://test/unit/test_ElseCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_ElseCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "ElseCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ElseCodeBlock",
          "description": ""
        },
        {
          "name": "_elseCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _elseCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_get_instruction()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_ElseCodeBlockSpawner.gd",
      "path": "res://test/unit/test_ElseCodeBlockSpawner.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_ElseCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "ElseCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ElseCodeBlockSpawner",
          "description": ""
        },
        {
          "name": "_elseCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _elseCodeBlockSpawner",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_EndGoal.gd",
      "path": "res://test/unit/test_EndGoal.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_EndGoal.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "EndGoal",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var EndGoal",
          "description": ""
        },
        {
          "name": "_endGoal",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _endGoal",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__on_EndGoal_body_entered",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__on_EndGoal_body_entered()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_turn_on_monitoring",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_turn_on_monitoring()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_turn_off_monitoring",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_turn_off_monitoring()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_ExclamationMark.gd",
      "path": "res://test/unit/test_ExclamationMark.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_ExclamationMark.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "ExclamationMark",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ExclamationMark",
          "description": ""
        },
        {
          "name": "_exclamationMark",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _exclamationMark",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__on_Tween_tween_all_completed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__on_Tween_tween_all_completed()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_FadeIn.gd",
      "path": "res://test/unit/test_FadeIn.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_FadeIn.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "FadeIn",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var FadeIn",
          "description": ""
        },
        {
          "name": "_fadeIn",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _fadeIn",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__on_AnimationPlayer_animation_finished",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__on_AnimationPlayer_animation_finished()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_FirebaseDatabaseStore.gd",
      "path": "res://test/unit/test_FirebaseDatabaseStore.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_FirebaseDatabaseStore.gd",
      "description": " Taken from https://github.com/GodotNuts/GodotFirebase/blob/main/test/unit/test_FirebaseDatabaseStore.gd\n",
      "sub_classes": [
        {
          "name": "TestPutOperations",
          "path": "res://test/unit/test_FirebaseDatabaseStore.gd",
          "extends_class": [

          ],
          "extends_file": "res://addons/gut/test.gd",
          "icon": "",
          "signature": "class TestPutOperations",
          "description": "",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [

          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "test_put_object",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_object()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_put_nested_object",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_nested_object()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_put_array_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_array_value()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_put_normal_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_normal_value()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_put_deleted_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_deleted_value()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_put_new_object",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_new_object()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_put_new_nested_object",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_new_nested_object()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_put_new_array_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_new_array_value()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_put_new_normal_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_put_new_normal_value()",
              "description": "",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        },
        {
          "name": "TestPatchOperations",
          "path": "res://test/unit/test_FirebaseDatabaseStore.gd",
          "extends_class": [

          ],
          "extends_file": "res://addons/gut/test.gd",
          "icon": "",
          "signature": "class TestPatchOperations",
          "description": "",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [

          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "test_patch_object",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_patch_object()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_patch_nested_object",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_patch_nested_object()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_patch_array_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_patch_array_value()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_patch_normal_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_patch_normal_value()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_patch_deleted_value",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_patch_deleted_value()",
              "description": "",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [
        {
          "name": "FirebaseDatabaseStore",
          "value": "[GDScript:5546]",
          "data_type": "FirebaseDatabaseStore",
          "signature": "const FirebaseDatabaseStore: FirebaseDatabaseStore = preload(\"res://addons/godot-firebase/database/database_store.gd\")",
          "description": "# @meta-authors TODO\r\n# @meta-version 2.2\r\n# Data structure that holds the currently-known data at a given path (a.k.a. reference) in a Firebase Realtime Database.\r\n# Can process both puts and patches into the data based on realtime events received from the service.\r\n"
        },
        {
          "name": "TestKey",
          "value": "-MPrgu_F8OXiL-VpRxjq",
          "data_type": "String",
          "signature": "const TestKey: String = \"-MPrgu_F8OXiL-VpRxjq\"",
          "description": ""
        },
        {
          "name": "TestObject",
          "value": {
            "I": "Some Value",
            "II": "Some Other Value",
            "III": [
              111,
              222,
              333,
              444,
              555
            ],
            "IV": {
              "a": "Another Value",
              "b": "Yet Another Value"
            }
          },
          "data_type": "Dictionary",
          "signature": "const TestObject: Dictionary = {\"I\":\"Some Value\",\"II\":\"Some Other Value\",\"III\":[111,222,333,444,555],\"IV\":{\"a\":\"Another Value\",\"b\":\"Yet Another Value\"}}",
          "description": ""
        },
        {
          "name": "TestArray",
          "value": [
            666,
            777,
            888,
            999
          ],
          "data_type": "Array",
          "signature": "const TestArray: Array = [666,777,888,999]",
          "description": ""
        },
        {
          "name": "TestObjectOther",
          "value": {
            "a": "A Different Value",
            "b": "Another One",
            "c": "A New Value"
          },
          "data_type": "Dictionary",
          "signature": "const TestObjectOther: Dictionary = {\"a\":\"A Different Value\",\"b\":\"Another One\",\"c\":\"A New Value\"}",
          "description": ""
        },
        {
          "name": "TestValue",
          "value": 12345.6789,
          "data_type": "float",
          "signature": "const TestValue: float = 12345.6789",
          "description": ""
        }
      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_FirestoreDocument.gd",
      "path": "res://test/unit/test_FirestoreDocument.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_FirestoreDocument.gd",
      "description": " Taken from https://github.com/GodotNuts/GodotFirebase/blob/main/test/unit/test_FirestoreDocument.gd\n",
      "sub_classes": [
        {
          "name": "TestDeserialization",
          "path": "res://test/unit/test_FirestoreDocument.gd",
          "extends_class": [

          ],
          "extends_file": "res://addons/gut/test.gd",
          "icon": "",
          "signature": "class TestDeserialization",
          "description": "",
          "sub_classes": [

          ],
          "constants": [

          ],
          "members": [

          ],
          "signals": [

          ],
          "methods": [
            {
              "name": "test_deserialize_array_of_dicts",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_deserialize_array_of_dicts()",
              "description": "",
              "arguments": [

              ]
            },
            {
              "name": "test_deserialize_array_of_strings",
              "return_type": "var",
              "rpc_mode": 0,
              "signature": "func test_deserialize_array_of_strings()",
              "description": "",
              "arguments": [

              ]
            }
          ],
          "static_functions": [

          ]
        }
      ],
      "constants": [
        {
          "name": "FirestoreDocument",
          "value": "[GDScript:5558]",
          "data_type": "FirestoreDocument",
          "signature": "const FirestoreDocument: FirestoreDocument = preload(\"res://addons/godot-firebase/firestore/firestore_document.gd\")",
          "description": "# @meta-authors TODO\r\n# @meta-version 2.2\r\n# A reference to a Firestore Document.\r\n# Documentation TODO.\r\n"
        }
      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [

      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_IfCodeBlock.gd",
      "path": "res://test/unit/test_IfCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_IfCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "IfCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var IfCodeBlock",
          "description": ""
        },
        {
          "name": "_ifCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _ifCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_get_instruction()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_IfCodeBlockSpawner.gd",
      "path": "res://test/unit/test_IfCodeBlockSpawner.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_IfCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "IfCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var IfCodeBlockSpawner",
          "description": ""
        },
        {
          "name": "_ifCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _ifCodeBlockSpawner",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_IndentedSpaceToDropCodeBlock.gd",
      "path": "res://test/unit/test_IndentedSpaceToDropCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_IndentedSpaceToDropCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "IndentedSpaceToDropCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var IndentedSpaceToDropCodeBlock",
          "description": ""
        },
        {
          "name": "_indentedSpaceToDropCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _indentedSpaceToDropCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_ItemToDrag.gd",
      "path": "res://test/unit/test_ItemToDrag.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_ItemToDrag.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "ItemToDrag",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ItemToDrag",
          "description": ""
        },
        {
          "name": "_itemToDrag",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _itemToDrag",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_LevelManager.gd",
      "path": "res://test/unit/test_LevelManager.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_LevelManager.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "LevelManager",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var LevelManager",
          "description": ""
        },
        {
          "name": "_levelManager",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _levelManager",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__input",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__input()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_update_statistics",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_update_statistics()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_Login.gd",
      "path": "res://test/unit/test_Login.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_Login.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "Login",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Login",
          "description": ""
        },
        {
          "name": "_login",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _login",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__ready()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_OptionButton.gd",
      "path": "res://test/unit/test_OptionButton.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_OptionButton.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "OptionButton",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var OptionButton",
          "description": ""
        },
        {
          "name": "_optionButton",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _optionButton",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_hide_dropdown_arrow",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_hide_dropdown_arrow()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_PageTemplate.gd",
      "path": "res://test/unit/test_PageTemplate.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_PageTemplate.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "PageTemplate",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var PageTemplate",
          "description": ""
        },
        {
          "name": "_pageTemplate",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _pageTemplate",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_PanelToDropCodeBlocks.gd",
      "path": "res://test/unit/test_PanelToDropCodeBlocks.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_PanelToDropCodeBlocks.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "PanelToDropCodeBlocks",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var PanelToDropCodeBlocks",
          "description": ""
        },
        {
          "name": "_panelToDropCodeBlocks",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _panelToDropCodeBlocks",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__ready()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_create_new_space",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_create_new_space()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_delete_space_which_discarded_block_originated_1",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_delete_space_which_discarded_block_originated_1()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_delete_space_which_discarded_block_originated_2",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_delete_space_which_discarded_block_originated_2()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_PanelToDropItem.gd",
      "path": "res://test/unit/test_PanelToDropItem.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_PanelToDropItem.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "PanelToDropItem",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var PanelToDropItem",
          "description": ""
        },
        {
          "name": "_panelToDropItem",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _panelToDropItem",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_Player.gd",
      "path": "res://test/unit/test_Player.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_Player.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "Player",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Player",
          "description": ""
        },
        {
          "name": "_player",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _player",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_grid_size",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_grid_size()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_inputs",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_inputs()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_terminate",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_terminate()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_unterminate",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_unterminate()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_PopupTutorial.gd",
      "path": "res://test/unit/test_PopupTutorial.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_PopupTutorial.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "PopupTutorial",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var PopupTutorial",
          "description": ""
        },
        {
          "name": "_popupTutorial",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _popupTutorial",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__on_Buttons_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__on_Buttons_pressed()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_Register.gd",
      "path": "res://test/unit/test_Register.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_Register.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "Register",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var Register",
          "description": ""
        },
        {
          "name": "_register",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _register",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__ready()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_RepeatCodeBlock.gd",
      "path": "res://test/unit/test_RepeatCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_RepeatCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "RepeatCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var RepeatCodeBlock",
          "description": ""
        },
        {
          "name": "_repeatCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _repeatCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_get_instruction()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_RepeatCodeBlockSpawner.gd",
      "path": "res://test/unit/test_RepeatCodeBlockSpawner.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_RepeatCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "RepeatCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var RepeatCodeBlockSpawner",
          "description": ""
        },
        {
          "name": "_repeatCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _repeatCodeBlockSpawner",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_RunCodeButton.gd",
      "path": "res://test/unit/test_RunCodeButton.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_RunCodeButton.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "RunCodeButton",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var RunCodeButton",
          "description": ""
        },
        {
          "name": "_runCodeButton",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _runCodeButton",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_runCodeButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_runCodeButton_pressed()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_ScoreRow.gd",
      "path": "res://test/unit/test_ScoreRow.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_ScoreRow.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "ScoreRow",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ScoreRow",
          "description": ""
        },
        {
          "name": "_scoreRow",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _scoreRow",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__ready()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_ScrollContainer.gd",
      "path": "res://test/unit/test_ScrollContainer.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_ScrollContainer.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "ScrollContainer",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var ScrollContainer",
          "description": ""
        },
        {
          "name": "_scrollContainer",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _scrollContainer",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__ready()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_SidePanel.gd",
      "path": "res://test/unit/test_SidePanel.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_SidePanel.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "SidePanel",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var SidePanel",
          "description": ""
        },
        {
          "name": "_sidePanel",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _sidePanel",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__ready()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__on_ResetButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__on_ResetButton_pressed()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_enable_reset_button",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_enable_reset_button()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_disable_reset_button",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_disable_reset_button()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_enable_stop_button",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_enable_stop_button()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__on_StopButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__on_StopButton_pressed()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_SpaceToDropCodeBlock.gd",
      "path": "res://test/unit/test_SpaceToDropCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_SpaceToDropCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "SpaceToDropCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var SpaceToDropCodeBlock",
          "description": ""
        },
        {
          "name": "_spaceToDropCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _spaceToDropCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_increase_rect_min_size",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_increase_rect_min_size()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_decrease_rect_min_size",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_decrease_rect_min_size()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_SpeedButton.gd",
      "path": "res://test/unit/test_SpeedButton.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_SpeedButton.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "SpeedButton",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var SpeedButton",
          "description": ""
        },
        {
          "name": "_SpeedButton",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _SpeedButton",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__ready()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__on_SpeedButton_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__on_SpeedButton_pressed()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_TitleRow.gd",
      "path": "res://test/unit/test_TitleRow.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_TitleRow.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "TitleRow",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var TitleRow",
          "description": ""
        },
        {
          "name": "_titleRow",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _titleRow",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test__ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test__ready()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_TrashBin.gd",
      "path": "res://test/unit/test_TrashBin.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_TrashBin.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "SpeedButton",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var SpeedButton",
          "description": ""
        },
        {
          "name": "_SpeedButton",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _SpeedButton",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_WalkCodeBlock.gd",
      "path": "res://test/unit/test_WalkCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_WalkCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "WalkCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var WalkCodeBlock",
          "description": ""
        },
        {
          "name": "_walkCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _walkCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_get_instruction()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_WalkCodeBlockSpawner.gd",
      "path": "res://test/unit/test_WalkCodeBlockSpawner.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_WalkCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "WalkCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var WalkCodeBlockSpawner",
          "description": ""
        },
        {
          "name": "_walkCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _walkCodeBlockSpawner",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_WhileCodeBlock.gd",
      "path": "res://test/unit/test_WhileCodeBlock.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_WhileCodeBlock.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "WhileCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var WhileCodeBlock",
          "description": ""
        },
        {
          "name": "_whileCodeBlock",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _whileCodeBlock",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_get_instruction",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_get_instruction()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "test_WhileCodeBlockSpawner.gd",
      "path": "res://test/unit/test_WhileCodeBlockSpawner.gd",
      "extends_class": [

      ],
      "extends_file": "res://addons/gut/test.gd",
      "icon": "",
      "signature": "class test_WhileCodeBlockSpawner.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "WhileCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var WhileCodeBlockSpawner",
          "description": ""
        },
        {
          "name": "_whileCodeBlockSpawner",
          "data_type": "var",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _whileCodeBlockSpawner",
          "description": ""
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "before_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func before_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "after_each",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func after_each()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_can_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_can_drop_data()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_drop_data",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_drop_data()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "Testing.gd",
      "path": "res://Testing.gd",
      "extends_class": [
        "Node2D"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class Testing.gd",
      "description": "",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "my_func",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func my_func()",
          "description": "",
          "arguments": [

          ]
        },
        {
          "name": "test_func",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func test_func()",
          "description": "",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    }
  ]
}